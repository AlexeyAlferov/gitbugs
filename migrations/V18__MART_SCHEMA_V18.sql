-- ***************************** SqlDBM: Snowflake ****************************
-- * Generated by SqlDBM: MART SCHEMA, v18 by lesya.rylova+standard@gmail.com *


-- ************************************** MRP_SEQ_01
CREATE SEQUENCE MRP_SEQ_01
START WITH 1
INCREMENT BY 1;

-- ************************************** Sequence_4536
CREATE SEQUENCE Sequence_4536
START WITH 1
INCREMENT BY 1;

-- ************************************** Sequence_77
CREATE SEQUENCE Sequence_77
START WITH 1
INCREMENT BY 1;

CREATE FILE FORMAT CsvFileFormat
 TYPE = CSV
 COMPRESSION = BROTLI;

CREATE FILE FORMAT InlineJsonFileFormat
 TYPE = JSON;

-- ************************************** MART.VALIDATION_METADATA
CREATE TABLE MART.VALIDATION_METADATA
(
 VALIDATION_ID    number(38,0),
 test_NAME        varchar(16777216),
 VIEW_NAME        varchar(16777216),
 TABLE_NAME       varchar(16777216),
 SORT_ORDER       number(38,0),
 test_TYPE        varchar(16777216),
 TARGET_LH_SCREEN varchar(16777216)
);

-- ************************************** MART.TOTAL_ROUTE_DURATION_DETAILS
CREATE TABLE MART.TOTAL_ROUTE_DURATION_DETAILS
(
 HAULING_SITE             varchar(20),
 SUBLOB                   varchar(20),
 RO_KEY                   number(38,0),
 SERVICE_DT               timestamp_ntz(9),
 TOTAL_ROUTE_DURATION_HRS number(24,6)
);

-- ************************************** MART.test_CORP_TRANSFER_LANE_WASTE_TYPE
CREATE TABLE MART.test_CORP_TRANSFER_LANE_WASTE_TYPE
(
 LANE_ORIGIN_FAC_ID      varchar(67),
 WASTE_TYPE              varchar(20),
 LANE_DESTINATION_FAC_ID varchar(193),
 LANE_NAME               varchar(128),
 LONG_HAUL_COST          number(33,11)
);

-- ************************************** MART.test_01
CREATE TABLE MART.test_01
(
 TABLE_NM varchar(32),
 test_NM  varchar(68),
 DETAIL   varchar(16777216)
);

-- ************************************** MART.sk_test9
CREATE TABLE MART.sk_test9
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test8
CREATE TABLE MART.sk_test8
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test7
CREATE TABLE MART.sk_test7
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test6
CREATE TABLE MART.sk_test6
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test5
CREATE TABLE MART.sk_test5
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test4
CREATE TABLE MART.sk_test4
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test3
CREATE TABLE MART.sk_test3
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test2
CREATE TABLE MART.sk_test2
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test10
CREATE TABLE MART.sk_test10
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.sk_test1
CREATE TABLE MART.sk_test1
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(14,0),
 LAST_LOAD_FLAG           number(1,0),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.SK_MODEL_FACILITIES
CREATE TABLE MART.SK_MODEL_FACILITIES
(
 FAC_ID        varchar(277),
 FAC_NAME      varchar(256),
 FAC_TYPE      varchar(277),
 ADDRESS_1     varchar(256),
 ADDRESS_2     varchar(256),
 GEO_CITY_NM   varchar(256),
 GEO_COUNTY_NM varchar(256),
 GEO_STATE_CD  varchar(256),
 GEO_ZIP_CD    varchar(256),
 LATITUDE      number(12,7),
 LONGITUDE     number(12,7),
 TURN_TIME     number(10,2),
 MIN_TONS      float,
 MAX_TONS      float,
 FIXED_COST    number(10,2),
 WM_OWNED_FLAG varchar(1),
 STATUS_IND    varchar(1)
);

-- ************************************** MART.SK_MODEL_COLLECTION_POINTS
CREATE TABLE MART.SK_MODEL_COLLECTION_POINTS
(
 ROWNUMBER                number(18,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(10),
 DEPOTFACID               varchar(12),
 DISPFACID                varchar(27),
 WM_COLLECTION_FLAG       number(1,0),
 LOB                      varchar(40),
 SUBLOB                   varchar(5),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(18,0),
 STEMLEGS                 number(7,6),
 DISPOSALLEGS             number(1,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(13,0),
 HOUSE                    varchar(10),
 STREET_NAME              varchar(40),
 CITY                     varchar(40),
 ZIP                      varchar(10),
 GEO_COUNTY_NM            varchar(256),
 GEO_CITY_NM              varchar(256),
 GEO_STATE_CD             varchar(256),
 GEO_ZIP_CD               varchar(256),
 CUSTOMER_NAME            varchar(40),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(1,0)
);

-- ************************************** MART.SK_LOCATON_MATCHING_SAS
CREATE TABLE MART.SK_LOCATON_MATCHING_SAS
(
 HAULING_SITE_CD                      varchar(20),
 DISPOSAL_CODE                        varchar(20),
 LOC_NAME                             varchar(64),
 TONNAGE                              float,
 LOCATION_TYPE                        varchar(20),
 MATCHED_LOCATIONID_NAME              varchar(602),
 MATCHED_LOCATIONID_TYPE              varchar(623),
 MATCHED_LOCATION_CODE                varchar(602),
 MATCHED_LOCATION_NAME                varchar(602),
 MATCHING_LOGIC                       varchar(7),
 MODIFIED_DATE                        float,
 RNK                                  number(38,0),
 ORIGINAL_LOCATION_TYPE               varchar(20),
 ORIGINAL_MATCHED_LOCATIONID_TYPE     varchar(20),
 WBJ_ORIGINAL_LOCATION_TYPE           varchar(20),
 WBJ_ORIGINAL_MATCHED_LOCATIONID_TYPE varchar(20),
 WBJ_ORIGINAL_MATCHED_LOCATION_CODE   varchar(20)
);

-- ************************************** MART.SK_LOCATION_MATCHING_SAS
CREATE TABLE MART.SK_LOCATION_MATCHING_SAS
(
 HAULING_SITE_CD                      varchar(20),
 DISPOSAL_CODE                        varchar(20),
 LOC_NAME                             varchar(64),
 TONNAGE                              float,
 LOCATION_TYPE                        varchar(20),
 MATCHED_LOCATIONID_NAME              varchar(602),
 MATCHED_LOCATIONID_TYPE              varchar(623),
 MATCHED_LOCATION_CODE                varchar(602),
 MATCHED_LOCATION_NAME                varchar(602),
 MATCHING_LOGIC                       varchar(7),
 MODIFIED_DATE                        float,
 RNK                                  number(38,0),
 ORIGINAL_LOCATION_TYPE               varchar(20),
 ORIGINAL_MATCHED_LOCATIONID_TYPE     varchar(20),
 WBJ_ORIGINAL_LOCATION_TYPE           varchar(20),
 WBJ_ORIGINAL_MATCHED_LOCATIONID_TYPE varchar(20),
 WBJ_ORIGINAL_MATCHED_LOCATION_CODE   varchar(20)
);

-- ************************************** MART.SK_CORP_ROLLOFF_FACT
CREATE TABLE MART.SK_CORP_ROLLOFF_FACT
(
 LOAD_SEQ           number(1,0),
 TONS               float,
 NBRLOADS           number(1,0),
 COST               float,
 GROUP_ID           varchar(16777216),
 ACCOUNTNBR         varchar(16777216),
 HOUSE              varchar(10),
 STREET_NAME        varchar(40),
 CITY               varchar(40),
 ZIP                varchar(10),
 LONGITUDE          float,
 LATITUDE           float,
 DEPOTFACID         varchar(6),
 SUBLOB             varchar(5),
 CUSTOMER_NAME      varchar(40),
 WASTE_TYPE         varchar(20),
 OCS_DISPOSAL_NM    varchar(40),
 OCS_DISPOSAL_CD    varchar(10),
 INTERCOMPANY       varchar(1),
 INACTIVE           varchar(1),
 STATE              varchar(10),
 DISPFACID          varchar(27),
 WM_COLLECTION_FLAG number(1,0),
 LOB                varchar(7),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0),
 SERVICE_DT         timestamp_ntz(9),
 VEHICLE_ID         varchar(10)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.SK_CORP_COMRES_FACT
CREATE TABLE MART.SK_CORP_COMRES_FACT
(
 GROUP_ID           varchar(21),
 ROUTEID            varchar(10),
 DISPFACID          varchar(623),
 DEPOTFACID         varchar(6),
 FAC_NM             varchar(100),
 OCS_DISPOSAL_NM    varchar(40),
 OCS_DISPOSAL_CD    varchar(10),
 INTERCOMPANY       varchar(1),
 INACTIVE           varchar(1),
 SUBLOB             varchar(5),
 SERVICE_DT         timestamp_ntz(9),
 LATITUDE           float,
 LONGITUDE          float,
 LOADSEQ            number(13,0),
 LOADCOUNT          number(13,0),
 LAST_LOAD_FLAG     number(1,0),
 TONS               float,
 COST               float,
 WM_COLLECTION_FLAG number(1,0),
 LOB                varchar(40),
 WASTE_TYPE         varchar(20),
 STEMLEGS           number(5,4),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0),
 VEHICLE_ID         varchar(10)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.SK_CO_EVENTS
CREATE TABLE MART.SK_CO_EVENTS
(
 RO_KEY          number(38,0),
 STATUSCODE      varchar(15),
 VEHICLE_ID      varchar(10),
 VEHICLE_PKEY    number(19,0),
 VEHICLE_TYPE_ID number(19,0),
 EMP_ID          varchar(15),
 ROUTE_ID        varchar(10) NOT NULL,
 HAULING_SITE    varchar(6),
 CUST_NAME       varchar(40),
 CUST_ID         varchar(20),
 DISPOSAL_SITE   varchar(100),
 DISPOSAL_CODE   varchar(10),
 LOB             varchar(40),
 SUBLOB          varchar(5),
 ROUTE_MILES     number(38,0),
 MILEAGESTART    number(38,0),
 MILEAGEEND      number(38,0),
 LATITUDE        float,
 LONGITUDE       float,
 TONNAGE         float,
 COST            float,
 EVENT_START     timestamp_ntz(9) NOT NULL,
 TZ              varchar(64),
 EVENT_END       timestamp_ntz(9),
 EVENT_TYPE      varchar(11),
 SERVICE_DT      timestamp_ntz(9),
 LANDFILL_PKEY   number(19,0),
 CONSTRAINT PK_CO_EVENTS PRIMARY KEY ( ROUTE_ID, EVENT_START )
);

-- ************************************** MART.SITE_PARMS
CREATE TABLE MART.SITE_PARMS
(
 GROUP_KEY varchar(16777216),
 FAC_IDU   varchar(16777216)
);

-- ************************************** MART.ROUTE_FACT
CREATE TABLE MART.ROUTE_FACT
(
 ROUTE_PKEY     number(38,0),
 DEPOTFACID     varchar(6),
 SUBLOB         varchar(5),
 ROUTE_ID       varchar(10),
 SERVICE_DT     date,
 VEHICLE_ID     varchar(10),
 OCCURENCEID    varchar(256),
 SERVICEMODE    varchar(1),
 ISPRIMARYROUTE varchar(1)
);

-- ************************************** MART.RO_WASTETYPE_MAPPING
CREATE TABLE MART.RO_WASTETYPE_MAPPING
(
 WASTETYPE          varchar(20),
 INFERRED_WASTETYPE varchar(20)
);

-- ************************************** MART.OR_CNSC_SAVINGSDETAIL
CREATE TABLE MART.OR_CNSC_SAVINGSDETAIL
(
 SOLUTION_ID         number(38,0),
 SCOPE_ID            varchar(50),
 CASE_ID             number(38,0),
 FAC_ID              varchar(50),
 CASE_NAME           varchar(50),
 FAC_TYPE            varchar(50),
 FAC_NAME            varchar(100),
 WM_DIRECT_TONS      number(20,4),
 WM_XFER_TONS        number(20,4),
 THIRD_PARTY_TONS    number(20,4),
 SHORTFALL_TONS      number(20,4),
 VAR_COST            number(20,4),
 TIP_FEES            number(20,4),
 POST_PROC_REV       number(20,4),
 TOTAL_VAR           number(20,4),
 FIXED_COST          number(20,4),
 TOTAL_FAC           number(20,4),
 WM_DISP_TRIP_HRS    number(20,10),
 DIRECT_FLOW_COST    number(20,4),
 XFER_FLOW_COST      number(20,4),
 TOTAL_FLOW_COST     number(20,4),
 TOTAL_FAC_PLUS_FLOW number(20,4),
 OWNERSHIP           varchar(20),
 PENALTY_COST        number(20,4)
);

-- ************************************** MART.NEW_CORP_ROLLOFF_FACT
CREATE TABLE MART.NEW_CORP_ROLLOFF_FACT
(
 LOAD_SEQ           number(1,0),
 TONS               float,
 NBRLOADS           number(1,0),
 COST               float,
 GROUP_ID           varchar(16777216),
 ACCOUNTNBR         varchar(16777216),
 HOUSE              varchar(10),
 STREET_NAME        varchar(40),
 CITY               varchar(40),
 ZIP                varchar(10),
 LONGITUDE          float,
 LATITUDE           float,
 DEPOTFACID         varchar(6),
 SUBLOB             varchar(5),
 CUSTOMER_NAME      varchar(40),
 WASTE_TYPE         varchar(20),
 OCS_DISPOSAL_NM    varchar(40),
 OCS_DISPOSAL_CD    varchar(10),
 INTERCOMPANY       varchar(1),
 INACTIVE           varchar(1),
 STATE              varchar(10),
 DISPFACID          varchar(27),
 WM_COLLECTION_FLAG number(1,0),
 LOB                varchar(7),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0),
 SERVICE_DT         timestamp_ntz(9),
 VEHICLE_ID         varchar(10)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.NEW_CORP_COMRES_FACT
CREATE TABLE MART.NEW_CORP_COMRES_FACT
(
 GROUP_ID           varchar(21),
 ROUTEID            varchar(10),
 DISPFACID          varchar(623),
 DEPOTFACID         varchar(6),
 FAC_NM             varchar(100),
 OCS_DISPOSAL_NM    varchar(40),
 OCS_DISPOSAL_CD    varchar(10),
 INACTIVE           varchar(1),
 SUBLOB             varchar(5),
 SERVICE_DT         timestamp_ntz(9),
 LATITUDE           float,
 LONGITUDE          float,
 LOADSEQ            number(13,0),
 LOADCOUNT          number(13,0),
 LAST_LOAD_FLAG     number(1,0),
 TONS               float,
 COST               float,
 WM_COLLECTION_FLAG number(1,0),
 LOB                varchar(40),
 WASTE_TYPE         varchar(20),
 STEMLEGS           number(5,4),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0),
 VEHICLE_ID         varchar(10)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.MODEL_TRANSFER_COSTS_PERSISTENT
CREATE TABLE MART.MODEL_TRANSFER_COSTS_PERSISTENT
(
 ENO_ID                    varchar(100),
 LANE_ORIGIN_FAC_ID        varchar(16777216),
 WASTE_TYPE                varchar(16777216),
 LANE_DESTINATION_FAC_ID   varchar(16777216),
 LONG_HAUL_COST            float,
 LOAD_SIZE                 float,
 UNIT_OF_MEASURE           varchar(16777216),
 MIN_TONS                  float,
 MAX_TONS                  float,
 SOURCE                    varchar(16777216),
 ADDL_UNIT_COST            float,
 STATUS_IND                varchar(16777216),
 BASELINE_ACTUAL_FLOW_TONS float,
 BASELINE_MAX_TONS         float,
 CP_TONS                   float,
 TMS_HIST_PCT              float,
 TMS_TONS                  float
);

-- ************************************** MART.MODEL_SWAP_HEADER_PERSISTENT
CREATE TABLE MART.MODEL_SWAP_HEADER_PERSISTENT
(
 ENO_ID                    varchar(100),
 SWAP_HEADER_ID            number(38,0),
 SWAP_NAME                 varchar(16777216),
 SWAP_QTY                  float,
 SHORTFALL_PENALTY_PER_TON float,
 SHORTFALL_PENALTY_REPORT  float
);

-- ************************************** MART.MODEL_SWAP_DETAIL_PERSISTENT
CREATE TABLE MART.MODEL_SWAP_DETAIL_PERSISTENT
(
 ENO_ID         varchar(100),
 SWAP_HEADER_ID number(38,0),
 SWAP_NAME      varchar(16777216),
 DEPOT_FAC_ID   varchar(16777216),
 DISP_FAC_ID    varchar(16777216),
 LOB            varchar(16777216),
 WASTE_TYPE     varchar(16777216)
);

-- ************************************** MART.MODEL_RUN_VALIDATION_DETAIL
CREATE TABLE MART.MODEL_RUN_VALIDATION_DETAIL
(
 VALIDATION_ID    number(38,0),
 ENO_ID           varchar(40),
 test_NAME        varchar(256),
 TABLE_NM         varchar(80),
 test_DETAIL      varchar(16777216),
 SORT_ORDER       number(38,0),
 SEQ              number(38,0),
 test_TYPE        varchar(20),
 TARGET_LH_SCREEN varchar(16777216),
 LH_PARM_1        varchar(16777216),
 LH_PARM_2        varchar(16777216),
 LH_PARM_3        varchar(16777216),
 LH_PARM_4        varchar(16777216),
 LH_PARM_5        varchar(16777216)
)
CLUSTER BY ( ENO_ID );

-- ************************************** MART.MODEL_RUN_VALIDATION_AGGREGATE
CREATE TABLE MART.MODEL_RUN_VALIDATION_AGGREGATE
(
 VALIDATION_ID number(38,0),
 ENO_ID        varchar(40),
 test_NAME     varchar(256),
 test_TYPE     varchar(20),
 PASS_IND      boolean,
 ROW_COUNT     number(38,0),
 SORT_ORDER    number(38,0)
);

-- ************************************** MART.MODEL_RUN_PARAMETERS
CREATE TABLE MART.MODEL_RUN_PARAMETERS
(
 ENO_ID         varchar(100),
 PARAMETER_JSON variant,
 RUN_DTM        timestamp_ltz(9),
 USER_NM        varchar(80)
);

-- ************************************** MART.model_hrs_cap_PERSISTENT
CREATE TABLE MART.model_hrs_cap_PERSISTENT
(
 ENO_ID               varchar(100),
 HRS_CAP_ID           number(38,0),
 CASE_ID              number(38,0),
 FAC_ID               varchar(16777216),
 SUBLOB               varchar(16777216),
 MIN_HRS              float,
 TRUCK_CAPACITY       float,
 TOTAL_COLLECTION_HRS float,
 MAX_HRS              float
);

-- ************************************** MART.MODEL_FLOW_CONTROL_SPECIAL_RATE_PERSISTENT
CREATE TABLE MART.MODEL_FLOW_CONTROL_SPECIAL_RATE_PERSISTENT
(
 ENO_ID         varchar(100),
 FC_RULE_NUMBER number(38,0),
 ROWNUMBER      number(38,0),
 FAC_ID         varchar(16777216),
 UNIT_COST      float,
 UNIT_PRICE     float,
 UNIT_REVENUE   float
);

-- ************************************** MART.MODEL_FLOW_CONTROL_RULES_PERSISTENT
CREATE TABLE MART.MODEL_FLOW_CONTROL_RULES_PERSISTENT
(
 ENO_ID            varchar(100),
 FC_RULE_NUMBER    number(38,0),
 CNT               number(38,0),
 METHOD_TYPE       number(38,0),
 METHOD_TYPE_DESC  varchar(16777216),
 RULE_SOURCE       varchar(16777216),
 COLLECTION_ENTITY varchar(16777216),
 MIN_FC_PKEY       number(38,0),
 FC_PKEYS          varchar(16777216),
 ALL_DISPOSAL_DEST varchar(16777216),
 LOB               varchar(16777216),
 WASTE_TYPE        varchar(16777216),
 MIN_TONS_UNSCALED float,
 MAX_TONS_UNSCALED float,
 MIN_TONS          float,
 MAX_TONS          float,
 SPECIAL_RATE_AMT  float,
 DISPOSAL_ENTITY   varchar(16777216)
);

-- ************************************** MART.MODEL_FLOW_CONTROL_DISPOSAL_PERSISTENT
CREATE TABLE MART.MODEL_FLOW_CONTROL_DISPOSAL_PERSISTENT
(
 ENO_ID         varchar(100),
 FC_RULE_NUMBER number(38,0),
 DISP_FAC_ID    varchar(16777216)
);

-- ************************************** MART.MODEL_FLOW_CONTROL_COLLECTION_PERSISTENT
CREATE TABLE MART.MODEL_FLOW_CONTROL_COLLECTION_PERSISTENT
(
 ENO_ID         varchar(100),
 FC_RULE_NUMBER number(38,0),
 ROWNUMBER      number(38,0)
);

-- ************************************** MART.MODEL_FACILITIES_PERSISTENT
CREATE TABLE MART.MODEL_FACILITIES_PERSISTENT
(
 ENO_ID        varchar(100),
 FAC_ID        varchar(16777216),
 FAC_NAME      varchar(16777216),
 FAC_TYPE      varchar(16777216),
 ADDRESS_1     varchar(16777216),
 ADDRESS_2     varchar(16777216),
 GEO_CITY_NM   varchar(16777216),
 GEO_COUNTY_NM varchar(16777216),
 GEO_STATE_CD  varchar(16777216),
 GEO_ZIP_CD    varchar(16777216),
 LATITUDE      float,
 LONGITUDE     float,
 TURN_TIME     float,
 MIN_TONS      float,
 MAX_TONS      float,
 FIXED_COST    float,
 WM_OWNED_FLAG varchar(16777216),
 STATUS_IND    varchar(16777216),
 FAC_SHORT_NM  varchar(16777216)
);

-- ************************************** MART.MODEL_FACILITIES_MATERIAL_PERSISTENT
CREATE TABLE MART.MODEL_FACILITIES_MATERIAL_PERSISTENT
(
 ENO_ID        varchar(100),
 FAC_ID        varchar(16777216),
 WASTE_TYPE    varchar(16777216),
 ACCEPTED_FLAG varchar(16777216),
 UNIT_COST     float,
 UNIT_PRICE    float,
 UNIT_REVENUE  float,
 MIN_TONS      float,
 MAX_TONS      float
);

-- ************************************** MART.MODEL_DISPOSAL_LOB_PERSISTENT
CREATE TABLE MART.MODEL_DISPOSAL_LOB_PERSISTENT
(
 ENO_ID          varchar(100),
 DISPFACID       varchar(16777216),
 SUBLOB          varchar(16777216),
 ADDL_UNIT_COSTS float
);

-- ************************************** MART.MODEL_DEPOT_LOB_PERSISTENT
CREATE TABLE MART.MODEL_DEPOT_LOB_PERSISTENT
(
 ENO_ID             varchar(100),
 FAC_ID             varchar(16777216),
 SUBLOB             varchar(16777216),
 COSTS_PER_HOUR     float,
 CUT_OFF_TIME_HOURS float
);

-- ************************************** MART.MODEL_COLLECTION_POINTS_PERSISTENT
CREATE TABLE MART.MODEL_COLLECTION_POINTS_PERSISTENT
(
 ENO_ID                   varchar(100),
 ROWNUMBER                number(38,0),
 GROUP_ID                 varchar(16777216),
 ROUTEID                  varchar(16777216),
 DEPOTFACID               varchar(16777216),
 DISPFACID                varchar(16777216),
 WM_COLLECTION_FLAG       number(38,0),
 LOB                      varchar(16777216),
 SUBLOB                   varchar(16777216),
 WASTE_TYPE               varchar(16777216),
 TONS                     float,
 NBRLOADS                 number(38,0),
 STEMLEGS                 float,
 DISPOSALLEGS             number(38,0),
 LONGITUDE                float,
 LATITUDE                 float,
 LOAD_SEQ                 number(38,0),
 HOUSE                    varchar(16777216),
 STREET_NAME              varchar(16777216),
 CITY                     varchar(16777216),
 ZIP                      varchar(16777216),
 LAST_LOAD_FLAG           number(38,0),
 GEO_COUNTY_NM            varchar(16777216),
 GEO_STATE_CD             varchar(16777216),
 GEO_CITY_NM              varchar(16777216),
 GEO_ZIP_CD               varchar(16777216),
 CUSTOMER_NAME            varchar(16777216),
 OCS_DISPOSAL_CD          varchar(16777216),
 OCS_DISPOSAL_DESCRIPTION varchar(16777216),
 RETURN_LEGS              number(38,0),
 DISPOSAL_TRIP_TYPE_CD    varchar(16777216),
 DCO_FROZEN_FLAG          number(38,0)
);

-- ************************************** MART.MODEL_ALL_CONSTRAINTS_PERSISTENT
CREATE TABLE MART.MODEL_ALL_CONSTRAINTS_PERSISTENT
(
 ENO_ID                 varchar(100),
 SRC                    varchar(16777216),
 FAC_ID                 varchar(16777216),
 WASTE_TYPE             varchar(16777216),
 MIN_TONS               float,
 MAX_TONS               float,
 VOLUME_TIME_UNIT       varchar(16777216),
 VOLUME_CONSTRAINT_TYPE varchar(16777216),
 NOTES                  varchar(16777216),
 MIN_TONS_SCALED        float,
 MAX_TONS_SCALED        float,
 GOVERNING_MAX          float,
 GOVERNING_MIN          float,
 GOVERNING_MIN_FLAG     number(38,0),
 GOVERNING_MAX_FLAG     number(38,0)
);

-- ************************************** MART.MEAN_GOOD_ROUTE_DISP_RETURN
CREATE TABLE MART.MEAN_GOOD_ROUTE_DISP_RETURN
(
 SUBLOB           varchar(5),
 RECORD_COUNT     number(18,0),
 STEM_DISP_RETURN number(38,6),
 ROUTE_TIME       number(36,6),
 AVG_PCT_STEM     number(38,12)
);

-- ************************************** MART.MBP_WASTETYPE_MAPPING
CREATE TABLE MART.MBP_WASTETYPE_MAPPING
(
 WASTE_STREAM_DS    varchar(20),
 INFERRED_WASTETYPE varchar(20)
);

-- ************************************** MART.LOCATION_MATCHING_SAS
CREATE TABLE MART.LOCATION_MATCHING_SAS
(
 HAULING_SITE_CD                      varchar(20),
 DISPOSAL_CODE                        varchar(20),
 LOC_NAME                             varchar(64),
 TONNAGE                              float,
 LOCATION_TYPE                        varchar(20),
 MATCHED_LOCATIONID_NAME              varchar(602),
 MATCHED_LOCATIONID_TYPE              varchar(623),
 MATCHED_LOCATION_CODE                varchar(602),
 MATCHED_LOCATION_NAME                varchar(602),
 MATCHING_LOGIC                       varchar(7),
 MODIFIED_DATE                        float,
 RNK                                  number(38,0),
 ORIGINAL_LOCATION_TYPE               varchar(20),
 ORIGINAL_MATCHED_LOCATIONID_TYPE     varchar(20),
 WBJ_ORIGINAL_LOCATION_TYPE           varchar(20),
 WBJ_ORIGINAL_MATCHED_LOCATIONID_TYPE varchar(20),
 WBJ_ORIGINAL_MATCHED_LOCATION_CODE   varchar(20),
 FAC_ID_BEFORE_CLEANUP                varchar(256)
);

-- ************************************** MART.LFV_SHORT
CREATE TABLE MART.LFV_SHORT
(
 PKEY             number(38,0),
 FK_ROUTEORDER    number(38,0),
 FK_CUSTOMERORDER number(38,0),
 FK_LANDFILL      number(38,0),
 FK_WASTETYPE     number(38,0),
 TONNAGE          float,
 ARRIVE           timestamp_ntz(9),
 COST             float,
 DEPART           timestamp_ntz(9),
 SITEID           varchar(6),
 SUBLOB           varchar(5)
);

-- ************************************** MART.GOOD_ROUTES_FOR_TIMING
CREATE TABLE MART.GOOD_ROUTES_FOR_TIMING
(
 HAULING_SITE varchar(6),
 SUBLOB       varchar(5),
 RO_KEY       number(38,0),
 SERVICE_DT   timestamp_ntz(9)
);

-- ************************************** Fact_Customer_Orders_copy_1
CREATE TABLE Fact_Customer_Orders_copy_1
(
 CustomerId int NOT NULL DEFAULT Sequence_77.nextval,
 OrderId    int NOT NULL,
 DateId     int NOT NULL,
 SupplierId int NOT NULL,
 ProductId  int NOT NULL,
 Price      decimal NOT NULL,
 Quantity   int NOT NULL,
 Profit     decimal NOT NULL,
 CONSTRAINT PK_Fact_Customer_Orders PRIMARY KEY ( CustomerId, OrderId, DateId, SupplierId, ProductId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'CsvFileFormat'
);

-- ************************************** MART.EXPLODED_FLOW_CONTROL_PERSISTENT
CREATE TABLE MART.EXPLODED_FLOW_CONTROL_PERSISTENT
(
 ENO_ID                varchar(100),
 FC_RULE_NUMBER        number(38,0),
 RULE_SOURCE           varchar(16777216),
 METHOD_TYPE           number(38,0),
 METHOD_TYPE_DESC      varchar(16777216),
 LOB                   varchar(16777216),
 WASTE_TYPE            varchar(16777216),
 COLLECTION_ENTITY     varchar(16777216),
 MIN_TONS              float,
 MAX_TONS              float,
 PKEY                  number(38,0),
 DEST_COUNTY_NM        varchar(16777216),
 DEST_CITY_NM          varchar(16777216),
 DEST_DISPOSAL_SITE_ID varchar(16777216),
 DEST_STATE_CD         varchar(16777216),
 CUSTOMER_NM           varchar(16777216),
 RULE_DEST             varchar(16777216),
 DISPOSAL_ENTITY       varchar(16777216)
);

-- ************************************** MART.ENO_test
CREATE TABLE MART.ENO_test
(
 COLLECTION_POINT_ID number(38,0),
 DEPOT_FAC_ID        varchar(20),
 DISP_FAC_ID         varchar(20),
 SUBLOB              varchar(20),
 WASTE_TYPE          varchar(256),
 TONS                number(10,2),
 TRIP_HRS            number(10,2),
 TRIP_RATE           number(10,2),
 TRIP_COST           number(10,2),
 DISP_RATE           number(10,2),
 DISP_COST           number(10,2),
 TRATE               number(10,2),
 TCOST               number(10,2),
 XFER_RATE           number(10,2),
 XFER_COST           number(10,2),
 PENALTY_COST        number(10,2),
 TOTAL_COST          number(10,2),
 LOB                 varchar(256),
 LOADS               number(38,0),
 COUNTY              varchar(256),
 ACCOUNT_NBR         varchar(20),
 ROUTE_ID            varchar(20),
 LOAD_SEQ            number(38,0),
 CUSTOMER_NAME       varchar(256),
 CITY                varchar(256),
 ZIPCODE             varchar(20),
 ADDRESS             varchar(256),
 LOAD_TYPE           varchar(256),
 ENO_RESULTSOURCE    varchar(20),
 ENO_ID              varchar(512)
);

-- ************************************** MART.DUMMY
CREATE TABLE MART.DUMMY
(
 COLUMN1 varchar(16777216)
);

-- ************************************** MART.DIM_WASTE_TYPE
CREATE TABLE MART.DIM_WASTE_TYPE
(
 WASTE_TYPE_ID   varchar(3),
 WASTE_TYPE_DESC varchar(26)
);

-- ************************************** Dim_Supplier
CREATE TABLE Dim_Supplier
(
 SupplierId  int NOT NULL,
 CompanyName string NOT NULL,
 Phone       string,
 CONSTRAINT PK_Dim_Supplier PRIMARY KEY ( SupplierId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'CsvFileFormat'
);

-- ************************************** Dim_Product
CREATE TABLE Dim_Product
(
 ProductId      int NOT NULL,
 ProductName    string NOT NULL,
 IsDiscontinued boolean NOT NULL,
 CONSTRAINT PK_Product PRIMARY KEY ( ProductId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'InlineJsonFileFormat'
);

-- ************************************** Dim_Order
CREATE TABLE Dim_Order
(
 OrderId     int NOT NULL,
 OrderNumber string NOT NULL,
 CONSTRAINT PK_DIm_Oreder PRIMARY KEY ( OrderId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'CsvFileFormat'
);

-- ************************************** MART.DIM_MA
CREATE TABLE MART.DIM_MA
(
 MARKET_AREA_CD varchar(256),
 MARKET_AREA_NM varchar(256)
);

-- ************************************** MART.DIM_LOB
CREATE TABLE MART.DIM_LOB
(
 LOB varchar(11)
);

-- ************************************** MART.DIM_HAULING_SITE
CREATE TABLE MART.DIM_HAULING_SITE
(
 FAC_ID             varchar(20),
 FAC_TYPE           varchar(256),
 FAC_NAME           varchar(256),
 ACTIVE_FLAG        varchar(1),
 MARKET_AREA_CD     varchar(256),
 MARKET_AREA_NM     varchar(256),
 WM_OWNED_FLAG      varchar(1),
 LATITUDE           number(12,7),
 LONGITUDE          number(12,7),
 ADDRESS_1          varchar(256),
 ADDRESS_2          varchar(256),
 CITY_NM            varchar(256),
 STATE_CD           varchar(256),
 ZIP_CD             varchar(20),
 COUNTRY_CD         varchar(256),
 COUNTY_NM          varchar(256),
 SOURCE             varchar(4),
 LAST_UPDATED_DTM   timestamp_ntz(9),
 LAST_UPDATED_USER  varchar(40),
 MONDAY_OPEN_AT     varchar(40),
 MONDAY_CLOSE_AT    varchar(40),
 TUESDAY_OPEN_AT    varchar(40),
 TUESDAY_CLOSE_AT   varchar(40),
 WEDNESDAY_OPEN_AT  varchar(40),
 WEDNESDAY_CLOSE_AT varchar(40),
 THURSDAY_OPEN_AT   varchar(40),
 THURSDAY_CLOSE_AT  varchar(40),
 FRIDAY_OPEN_AT     varchar(40),
 FRIDAY_CLOSE_AT    varchar(40),
 SATURDAY_OPEN_AT   varchar(40),
 SATURDAY_CLOSE_AT  varchar(40),
 SUNDAY_OPEN_AT     varchar(40),
 SUNDAY_CLOSE_AT    varchar(40),
 GEO_CITY_NM        varchar(256),
 GEO_COUNTY_NM      varchar(256),
 GEO_STATE_CD       varchar(256),
 GEO_ZIP_CD         varchar(256)
);

-- ************************************** MART.DIM_DISPOSAL_SITE
CREATE TABLE MART.DIM_DISPOSAL_SITE
(
 FAC_ID                 varchar(277),
 FAC_TYPE               varchar(256),
 WM_OWNED_FLAG          varchar(1),
 FAC_NAME               varchar(256),
 ACTIVE_FLAG            varchar(1),
 MARKET_AREA_CD         varchar(16777216),
 MARKET_AREA_NM         varchar(16777216),
 LATITUDE               number(12,7),
 LONGITUDE              number(12,7),
 ADDRESS_1              varchar(256),
 ADDRESS_2              varchar(256),
 CITY_NM                varchar(256),
 STATE_CD               varchar(256),
 ZIP_CD                 varchar(20),
 COUNTRY_CD             varchar(256),
 COUNTY_NM              varchar(256),
 FIXED_COST             number(10,2),
 MIN_TONS               number(38,2),
 MAX_TONS               number(38,2),
 VOLUME_CONSTRAINT_TYPE varchar(256),
 VOLUME_TIME_UNIT       varchar(256),
 CYCLE_MINUTE_CNT       number(10,2),
 UNIT_COST              number(10,2),
 SOURCE                 varchar(4),
 LAST_UPDATED_DTM       timestamp_ntz(9),
 LAST_UPDATED_USER      varchar(40),
 MONDAY_OPEN_AT         varchar(40),
 MONDAY_CLOSE_AT        varchar(40),
 TUESDAY_OPEN_AT        varchar(40),
 TUESDAY_CLOSE_AT       varchar(40),
 WEDNESDAY_OPEN_AT      varchar(40),
 WEDNESDAY_CLOSE_AT     varchar(40),
 THURSDAY_OPEN_AT       varchar(40),
 THURSDAY_CLOSE_AT      varchar(40),
 FRIDAY_OPEN_AT         varchar(40),
 FRIDAY_CLOSE_AT        varchar(40),
 SATURDAY_OPEN_AT       varchar(40),
 SATURDAY_CLOSE_AT      varchar(40),
 SUNDAY_OPEN_AT         varchar(40),
 SUNDAY_CLOSE_AT        varchar(40),
 GEO_CITY_NM            varchar(256),
 GEO_COUNTY_NM          varchar(256),
 GEO_STATE_CD           varchar(256),
 GEO_ZIP_CD             varchar(256)
);

-- ************************************** MART.DIM_DISPOSAL_FAC_TYPE
CREATE TABLE MART.DIM_DISPOSAL_FAC_TYPE
(
 FAC_TYPE varchar(64)
);

-- ************************************** Dim_Date
CREATE TABLE Dim_Date
(
 DateId int NOT NULL,
 Date   datetime NOT NULL,
 Day    int NOT NULL,
 Week   int NOT NULL,
 Month  int NOT NULL,
 Year   int NOT NULL,
 CONSTRAINT PK_Dim_Date PRIMARY KEY ( DateId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'CsvFileFormat'
);

-- ************************************** Dim_Customer
CREATE TRANSIENT TABLE Dim_Customer
(
 CustomerId   int NOT NULL DEFAULT Sequence_77.nextval,
 CustomerName string NOT NULL,
 Phone        string,
 CONSTRAINT PK_table_2 PRIMARY KEY ( CustomerId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'CsvFileFormat'
)
STAGE_COPY_OPTIONS = 
( 
 ON_ERROR = CONTINUE
 PURGE = TRUE
 TRUNCATECOLUMNS = TRUE
 FORCE = TRUE
);

-- ************************************** MART.CORP_WASTE_TYPE_ACCEPTANCE
CREATE TABLE MART.CORP_WASTE_TYPE_ACCEPTANCE
(
 FAC_ID        varchar(20),
 WASTE_TYPE    varchar(20),
 ACCEPTED_FLAG varchar(1),
 UNIT_PRICE    number(10,2),
 SOURCE        varchar(20)
);

-- ************************************** MART.CORP_TRANSFER_LANE_WASTE_TYPE
CREATE TABLE MART.CORP_TRANSFER_LANE_WASTE_TYPE
(
 LANE_ORIGIN_FAC_ID      varchar(20),
 WASTE_TYPE              varchar(20),
 LANE_DESTINATION_FAC_ID varchar(20),
 LANE_NAME               varchar(256),
 LONG_HAUL_COST          number(10,2),
 AVERAGE_LOAD_SIZE_TONS  number(10,2)
);

-- ************************************** MART.CORP_ROLLOFF_FACT_NEW
CREATE TABLE MART.CORP_ROLLOFF_FACT_NEW
(
 LOAD_SEQ           number(1,0),
 TONS               float,
 NBRLOADS           number(1,0),
 COST               float,
 GROUP_ID           varchar(16777216),
 ACCOUNTNBR         varchar(16777216),
 HOUSE              varchar(10),
 STREET_NAME        varchar(40),
 CITY               varchar(40),
 ZIP                varchar(10),
 LONGITUDE          float,
 LATITUDE           float,
 DEPOTFACID         varchar(6),
 SUBLOB             varchar(5),
 CUSTOMER_NAME      varchar(40),
 WASTE_TYPE         varchar(20),
 OCS_DISPOSAL_NM    varchar(40),
 OCS_DISPOSAL_CD    varchar(10),
 INTERCOMPANY       varchar(1),
 INACTIVE           varchar(1),
 STATE              varchar(10),
 DISPFACID          varchar(27),
 WM_COLLECTION_FLAG number(1,0),
 LOB                varchar(7),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0),
 SERVICE_DT         timestamp_ntz(9),
 VEHICLE_ID         varchar(10)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.CORP_ROLLOFF_FACT
CREATE TABLE MART.CORP_ROLLOFF_FACT
(
 DEPOTFACID            varchar(6),
 LOAD_SEQ              number(18,0),
 LAST_LOAD_FLAG        number(1,0),
 TONS                  float,
 NBRLOADS              number(1,0),
 COST                  float,
 GROUP_ID              varchar(16777216),
 ACCOUNTNBR            varchar(16777216),
 CUSTOMER_NAME         varchar(40),
 LATITUDE              float,
 LONGITUDE             float,
 ROUTE_ID              varchar(10),
 LOB                   varchar(40),
 SUBLOB                varchar(5),
 WASTE_TEXT            varchar(40),
 WASTE_TYPE            varchar(20),
 OCS_DISPOSAL_NM       varchar(100),
 OCS_DISPOSAL_CD       varchar(10),
 INTERCOMPANY          varchar(1),
 INACTIVE              varchar(1),
 STATE                 varchar(16777216),
 DISPFACID             varchar(27),
 LANDFILL_PKEY         number(38,0),
 WM_COLLECTION_FLAG    number(1,0),
 DISPOSALLEGS          number(1,0),
 RETURNLEGS            number(1,0),
 SERVICE_DT            timestamp_ntz(9),
 VEHICLE_ID            varchar(10),
 ACTL_TRVL_TO_DSPSL_TM number(33,0),
 SERVICE_TYPE_CD       varchar(3),
 DISPOSAL_TRIP_TYPE_CD varchar(3)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.CORP_HAULING_SITE_COSTS
CREATE TABLE MART.CORP_HAULING_SITE_COSTS
(
 FAC_ID                   varchar(20),
 BU_ID                    varchar(20),
 LOB_CD                   varchar(20),
 SUBLOB_CD                varchar(5),
 LABOR_COST               number(10,2),
 MAINTENANCE_COST         number(10,2),
 FUEL_COST                number(10,2),
 DRIVER_KRONOS_PAID_HOURS number(10,2),
 LCPH                     number(10,2),
 MCPH                     number(10,2),
 FCPH                     number(10,2),
 VCPH                     number(10,2)
);

-- ************************************** MART.CORP_HAULING_SITE_CAPACITY
CREATE TABLE MART.CORP_HAULING_SITE_CAPACITY
(
 FAC_ID                  varchar(30),
 SUBLOB                  varchar(5),
 TRUCK_CNT               number(18,0),
 PERCENTAGE_HOURS_ON_SAT number(38,12)
);

-- ************************************** MART.CORP_HAULING_SITE
CREATE TABLE MART.CORP_HAULING_SITE
(
 FAC_ID         varchar(20),
 FAC_TYPE       varchar(20),
 FAC_NAME       varchar(256),
 ACTIVE_FLAG    varchar(1),
 MARKET_AREA_CD varchar(10),
 MARKET_AREA_NM varchar(100),
 WM_OWNED_FLAG  varchar(1),
 LATITUDE       number(12,7),
 LONGITUDE      number(12,7),
 ADDRESS_1      varchar(256),
 ADDRESS_2      varchar(256),
 CITY_NM        varchar(256),
 STATE_CD       varchar(2),
 ZIP_CD         varchar(10),
 COUNTRY_CD     varchar(2),
 COUNTY_NM      varchar(256)
);

-- ************************************** MART.CORP_DISPOSAL_SITE_INTG_COST
CREATE TABLE MART.CORP_DISPOSAL_SITE_INTG_COST
(
 DISPOSAL_FAC_ID                varchar(20),
 DEPOT_FAC_ID                   varchar(20),
 WASTE_TYPE                     varchar(20),
 SUBLOB_CD                      varchar(20),
 INTG_UNIT_COST_WITHOUT_PENALTY number(10,2),
 INTG_UNIT_COST                 number(10,2),
 SOURCE_ENO_ID                  varchar(512)
);

-- ************************************** MART.CORP_DISPOSAL_SITE
CREATE TABLE MART.CORP_DISPOSAL_SITE
(
 FAC_ID           varchar(20),
 FAC_ROOT_ID      varchar(6),
 FAC_TYPE         varchar(20),
 WM_OWNED_FLAG    varchar(1),
 FAC_NAME         varchar(256),
 ACTIVE_FLAG      varchar(1),
 MARKET_AREA_CD   varchar(10),
 MARKET_AREA_NM   varchar(256),
 LATITUDE         number(12,7),
 LONGITUDE        number(12,7),
 ADDRESS_1        varchar(256),
 ADDRESS_2        varchar(256),
 CITY_NM          varchar(256),
 STATE_CD         varchar(2),
 ZIP_CD           varchar(10),
 COUNTRY_CD       varchar(2),
 COUNTY_NM        varchar(256),
 FIXED_COST       number(10,2),
 MIN_VOLUME       number(10,2),
 MAX_VOLUME       number(10,2),
 CYCLE_MINUTE_CNT number(10,2),
 UNIT_COST        number(10,2),
 SOURCE           varchar(20)
);

-- ************************************** MART.CORP_DISPOSAL_LOB
CREATE TABLE MART.CORP_DISPOSAL_LOB
(
 FAC_ID           varchar(50),
 LOB_CD           varchar(20),
 CYCLE_MINUTE_CNT number(10,2),
 CALC_METHOD      varchar(20)
);

-- ************************************** MART.CORP_COMRES_FACT_NEW
CREATE TABLE MART.CORP_COMRES_FACT_NEW
(
 GROUP_ID           varchar(21),
 ROUTEID            varchar(10),
 DISPFACID          varchar(623),
 DEPOTFACID         varchar(6),
 FAC_NM             varchar(100),
 OCS_DISPOSAL_NM    varchar(40),
 OCS_DISPOSAL_CD    varchar(10),
 INACTIVE           varchar(1),
 SUBLOB             varchar(5),
 SERVICE_DT         timestamp_ntz(9),
 LATITUDE           float,
 LONGITUDE          float,
 LOADSEQ            number(13,0),
 LOADCOUNT          number(13,0),
 LAST_LOAD_FLAG     number(1,0),
 TONS               float,
 COST               float,
 WM_COLLECTION_FLAG number(1,0),
 LOB                varchar(40),
 WASTE_TYPE         varchar(20),
 STEMLEGS           number(5,4),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0),
 VEHICLE_ID         varchar(10)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.CORP_COMRES_FACT
CREATE TABLE MART.CORP_COMRES_FACT
(
 GROUP_ID              varchar(21),
 DEPOTFACID            varchar(6),
 SERVICE_DT            timestamp_ntz(9),
 ROUTE_ID              varchar(10),
 RO_KEY                number(38,0),
 WM_COLLECTION_FLAG    number(1,0),
 OCS_DISPOSAL_NM       varchar(100),
 OCS_DISPOSAL_CD       varchar(10),
 DISPFACID             varchar(27),
 VEHICLE_ID            varchar(10),
 LOB                   varchar(40),
 SUBLOB                varchar(5),
 LOADSEQ               number(14,0),
 LAST_LOAD_FLAG        number(1,0),
 INTERCOMPANY          varchar(1),
 INACTIVE              varchar(1),
 LATITUDE              float,
 LONGITUDE             float,
 WASTE_TYPE            varchar(20),
 TONS                  float,
 COST                  float,
 YARDS                 number(38,2),
 HOMES                 number(38,8),
 STEMLEGS              number(5,4),
 DISPOSALLEGS          number(1,0),
 RETURNLEGS            number(1,0),
 ACTL_TRVL_TO_DSPSL_TM number(33,0),
 LANDFILL_PKEY         number(38,0)
);

-- ************************************** MART.CORP_CENTROIDS_FACT
CREATE TABLE MART.CORP_CENTROIDS_FACT
(
 DEPOTFACID varchar(6),
 ROUTEID    varchar(10),
 LOB        varchar(40),
 SERVICE_DT timestamp_ntz(9),
 LONGITUDE  number(12,6),
 LATITUDE   number(12,6)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** MART.COMRES_WASTETYPE_MAPPING
CREATE TABLE MART.COMRES_WASTETYPE_MAPPING
(
 SUBLOB             varchar(20),
 SUBLOB_DESCRIPTION varchar(50),
 INFERRED_WASTETYPE varchar(20)
);

-- ************************************** MART.CO_EVENTS_NEW
CREATE TABLE MART.CO_EVENTS_NEW
(
 RO_KEY          number(38,0),
 STATUSCODE      varchar(15),
 VEHICLE_ID      varchar(10),
 VEHICLE_PKEY    number(19,0),
 VEHICLE_TYPE_ID number(19,0),
 EMP_ID          varchar(15),
 ROUTE_ID        varchar(10) NOT NULL,
 HAULING_SITE    varchar(6),
 CUST_NAME       varchar(40),
 CUST_ID         varchar(20),
 DISPOSAL_SITE   varchar(100),
 DISPOSAL_CODE   varchar(10),
 LOB             varchar(40),
 SUBLOB          varchar(5),
 ROUTE_MILES     number(38,0),
 MILEAGESTART    number(38,0),
 MILEAGEEND      number(38,0),
 LATITUDE        float,
 LONGITUDE       float,
 TONNAGE         float,
 COST            float,
 EVENT_START     timestamp_ntz(9) NOT NULL,
 TZ              varchar(64),
 EVENT_END       timestamp_ntz(9),
 EVENT_TYPE      varchar(11),
 SERVICE_DT      timestamp_ntz(9),
 LANDFILL_PKEY   number(19,0),
 CONSTRAINT PK_CO_EVENTS PRIMARY KEY ( ROUTE_ID, EVENT_START )
);

-- ************************************** MART.CO_EVENTS_MP
CREATE TRANSIENT TABLE MART.CO_EVENTS_MP
(
 RO_KEY          number(17,0),
 STATUSCODE      varchar(15),
 VEHICLE_ID      varchar(10),
 VEHICLE_PKEY    number(17,0),
 VEHICLE_TYPE_ID number(17,0),
 EMP_ID          varchar(15),
 ROUTE_ID        varchar(10),
 HAULING_SITE    varchar(6),
 CUST_NAME       varchar(40),
 CUST_ID         varchar(20),
 DISPOSAL_SITE   varchar(50),
 DISPOSAL_CODE   varchar(10),
 LOB             varchar(40),
 SUBLOB          varchar(5),
 ROUTE_MILES     float,
 MILEAGESTART    number(38,5),
 MILEAGEEND      number(38,5),
 LATITUDE        float,
 LONGITUDE       float,
 TONNAGE         float,
 COST            float,
 EVENT_START     timestamp_ntz(9),
 TZ              varchar(64),
 EVENT_END       timestamp_ntz(9),
 EVENT_TYPE      varchar(11),
 SERVICE_DT      timestamp_ntz(9),
 LANDFILL_PKEY   number(17,0),
 EVENT_STOP      timestamp_ntz(9),
 EVENT_RESUME    timestamp_ntz(9)
);

-- ************************************** MART.CO_EVENTS
CREATE TABLE MART.CO_EVENTS
(
 RO_KEY          number(38,0),
 STATUSCODE      varchar(15),
 VEHICLE_ID      varchar(10),
 VEHICLE_PKEY    number(19,0),
 VEHICLE_TYPE_ID number(19,0),
 EMP_ID          varchar(15),
 ROUTE_ID        varchar(10) NOT NULL,
 HAULING_SITE    varchar(6),
 CUST_NAME       varchar(40),
 CUST_ID         varchar(20),
 DISPOSAL_SITE   varchar(100),
 DISPOSAL_CODE   varchar(10),
 LOB             varchar(40),
 SUBLOB          varchar(5),
 ROUTE_MILES     number(38,0),
 MILEAGESTART    number(38,0),
 MILEAGEEND      number(38,0),
 LATITUDE        float,
 LONGITUDE       float,
 TONNAGE         float,
 COST            float,
 EVENT_START     timestamp_ntz(9) NOT NULL,
 TZ              varchar(64),
 EVENT_END       timestamp_ntz(9),
 EVENT_TYPE      varchar(11),
 SERVICE_DT      timestamp_ntz(9),
 LANDFILL_PKEY   number(38,0),
 EVENT_STOP      timestamp_ntz(9),
 EVENT_RESUME    timestamp_ntz(9),
 CONSTRAINT PK_CO_EVENTS PRIMARY KEY ( ROUTE_ID, EVENT_START )
);

-- ************************************** MART.CO_EVENT_TIME_INCREMENT
CREATE TABLE MART.CO_EVENT_TIME_INCREMENT
(
 HAULING_SITE         varchar(20),
 RO_KEY               number(38,0),
 EVENT_TYPE           varchar(20),
 PREVIOUS_EVENT_TYPE  varchar(20),
 EVENT_START          timestamp_ntz(9),
 EVENT_END            timestamp_ntz(9),
 SUBLOB               varchar(20),
 PREVIOUS_END         timestamp_ntz(9),
 NEXT_START           timestamp_ntz(9),
 TRAVEL_TIME_TO_HRS   number(24,6),
 TRAVEL_TIME_FROM_HRS number(24,6),
 EVENT_HRS            number(24,6),
 SERVICE_DT           timestamp_ntz(9)
)
CLUSTER BY ( HAULING_SITE );

-- ************************************** MART.CLEANUP_20200427
CREATE TABLE MART.CLEANUP_20200427
(
 FAC_ID   varchar(256),
 FAC_TYPE varchar(256)
);

-- ************************************** MART.BAD_ROUTES_FOR_TIMING
CREATE TABLE MART.BAD_ROUTES_FOR_TIMING
(
 HAULING_SITE varchar(6),
 SUBLOB       varchar(5),
 RO_KEY       number(38,0),
 SERVICE_DT   timestamp_ntz(9)
);

-- ************************************** MART.ALT_CORP_COMRES_FACT
CREATE TABLE MART.ALT_CORP_COMRES_FACT
(
 GROUP_ID           varchar(21),
 DEPOTFACID         varchar(6),
 SERVICE_DT         timestamp_ntz(9),
 ROUTE_ID           varchar(10),
 RO_KEY             number(38,0),
 WM_COLLECTION_FLAG number(1,0),
 OCS_DISPOSAL_NM    varchar(100),
 OCS_DISPOSAL_CD    varchar(10),
 DISPFACID          varchar(623),
 VEHICLE_ID         varchar(10),
 LOB                varchar(40),
 SUBLOB             varchar(5),
 LOADSEQ            number(14,0),
 LAST_LOAD_FLAG     number(1,0),
 INTERCOMPANY       varchar(1),
 INACTIVE           varchar(1),
 LATITUDE           float,
 LONGITUDE          float,
 WASTE_TYPE         varchar(20),
 TONS               float,
 COST               float,
 STEMLEGS           number(5,4),
 DISPOSALLEGS       number(1,0),
 RETURNLEGS         number(1,0)
)
CLUSTER BY ( DEPOTFACID, SERVICE_DT );

-- ************************************** Fact_Customer_Orders
CREATE TABLE Fact_Customer_Orders
(
 CustomerId int NOT NULL DEFAULT Sequence_77.nextval,
 OrderId    int NOT NULL,
 DateId     int NOT NULL,
 SupplierId int NOT NULL,
 ProductId  int NOT NULL,
 Price_1    decimal NOT NULL,
 Price      decimal NOT NULL,
 Quantity   int NOT NULL,
 Profit     decimal NOT NULL,
 CONSTRAINT PK_Fact_Customer_Orders PRIMARY KEY ( CustomerId, OrderId, DateId, SupplierId, ProductId ),
 CONSTRAINT FK_Fact_Customer_Orders_CustomerId FOREIGN KEY ( CustomerId ) REFERENCES Dim_Customer ( CustomerId ),
 CONSTRAINT FK_Fact_Customer_Orders_DateId FOREIGN KEY ( DateId ) REFERENCES Dim_Date ( DateId ),
 CONSTRAINT FK_Fact_Customer_Orders_OrderId FOREIGN KEY ( OrderId ) REFERENCES Dim_Order ( OrderId ),
 CONSTRAINT FK_Fact_Customer_Orders_ProductId FOREIGN KEY ( ProductId ) REFERENCES Dim_Product ( ProductId ),
 CONSTRAINT FK_Fact_Customer_Orders_SupplierId FOREIGN KEY ( SupplierId ) REFERENCES Dim_Supplier ( SupplierId )
)
STAGE_FILE_FORMAT = 
(
 FORMAT_NAME = 'CsvFileFormat'
);

-- ************************************** WBJ_DISPOSAL_COST
CREATE VIEW WBJ_DISPOSAL_COST AS

--

-- Get other waste types from WBJ if available

--

SELECT PWDC.FACILITY as FAC_ID, PWDC.DISPOSAL_COST, PWDC.WASTE_TYPE

FROM

(

  SELECT CODE AS FACILITY, ROUND(DOLLARS_TON,2)::VARCHAR(50) AS DISPOSAL_COST, 'SPW' AS WASTE_TYPE FROM STG.WBJ

  UNION

  SELECT CODE AS FACILITY, ROUND(DOLLARS_TON,2)::VARCHAR(50) AS DISPOSAL_COST, 'C&D' AS WASTE_TYPE FROM STG.WBJ 

  UNION 

  SELECT CODE AS FACILITY, ROUND(DOLLARS_TON,2)::VARCHAR(50) AS DISPOSAL_COST, 'MSW' AS WASTE_TYPE FROM STG.WBJ 

) PWDC WHERE DISPOSAL_COST > 0;

-- ************************************** WBJ_ACCEPTANCE
CREATE VIEW WBJ_ACCEPTANCE AS 

      select * from 

      (SELECT  CODE||'_'|| case  when FAMILY = 'DL'  then 'Disposal'

                                when FAMILY = 'CO'  then 'Compost'

                                when FAMILY = 'IN'  then 'Energy' 

                                else FAMILY end as FAC_ID,

              case  when contains(WASTE_TYPES_ACCEPTED,'C&D')  then 'Y' 

                    when contains(WASTE_TYPES_NOT_ACCEPTED,'C&D')  then 'N' 

                    else null end as C_D,

	            case  when contains(WASTE_TYPES_ACCEPTED,'MSW')  then 'Y'

                    when contains(WASTE_TYPES_NOT_ACCEPTED,'MSW')  then 'N' 

                    else null end as MSW,

	            case  when  contains(upper(WASTE_TYPES_ACCEPTED),'Asb') or 

                          contains(upper(WASTE_TYPES_ACCEPTED),'Tires') or 

                          contains(upper(WASTE_TYPES_ACCEPTED),'Sludge') or 

                          contains(upper(WASTE_TYPES_ACCEPTED),'Appliances') or 

                          contains(upper(WASTE_TYPES_ACCEPTED),'Metal') or 

                          contains(upper(WASTE_TYPES_ACCEPTED),'Electronics') or 

                          contains(upper(WASTE_TYPES_ACCEPTED),'SPECIAL WASTE')   then 'Y'

                          when contains(upper(WASTE_TYPES_NOT_ACCEPTED),'SPECIAL WASTE') then 'N' 

                          else null end as SPW

      from STG.WBJ ) t1

      unpivot (ACCEPT_FLAG for WASTE_TYPE in (C_D, MSW, SPW))                                       where ACCEPT_FLAG is not null;

-- ************************************** VEHICLE_USAGE
CREATE VIEW VEHICLE_USAGE as (SELECT 
  "FAC_ID", 
  "SUBLOB", 
  "TRUCK_CNT" 
FROM (select FAC_ID          FAC_ID,
       SUBLOB,
       Count(distinct vehicle_id) truck_cnt
from
(
select distinct
  DEPOTFACID      FAC_ID,
  LOB,
  SUBLOB,
  vehicle_id
from DEV_ONEWM.MART.COMRES_FACT WHERE service_Dt > current_Date-365

  union all

select distinct
  DEPOTFACID      FAC_ID,
  LOB,
  SUBLOB,
  vehicle_id
from DEV_ONEWM.MART.ROLLOFF_FACT WHERE service_Dt > current_Date-365
) a where fac_Id in (select fac_Id from DEV_ONEWM.MART.HAULING_SITE)
group by 1, 2
) AS "v_0000017686_0000143911");

-- ************************************** VEHICLE_AVAILABILITY
CREATE VIEW VEHICLE_AVAILABILITY as (SELECT 
  "FAC_ID", 
  "SUBLOB", 
  "TRUCK_CNT" 
FROM (WITH COMPASS AS
--
--	Get the core data from COMPASS.  Only interested in Active Trucks.  This gives us our counts but the act_code is often
--	incorrect or sometimes missing.
--	Append Canada and the US together.  There is no overlapping data between the two
--
(
SELECT t1.using_dept_no AS depotfacid, t1.unit_no AS vehicle_id, t4.sublob, t1.act_code,t1.status, t6.description, t1.unit_type
	FROM 		   	DEV_COMPASS_USA.ODS.unit_main t1
	INNER JOIN 		DEV_COMPASS_USA.ODS.view_udc_main t2 ON t1.unit_id = t2.unit_id
	LEFT JOIN 		DEV_COMPASS_USA.ODS.activity t3 ON t1.act_code = t3.act_code
	LEFT JOIN 		DEV_ONEWM.MART.SUBLOB_HIERARCHY t4 ON t1.act_code = CAST(t4.essbase_sublob_key AS varchar(4))
	LEFT JOIN DEV_COMPASS_USA.ODS.UNITDIS t5 ON t1.unit_id = t5.UNIT_ID
	LEFT JOIN DEV_COMPASS_USA.ODS.DISPOSAL_REASON t6 on t6.disposal_reason = t5.disposal_reason
	WHERE  
	--t1.status='A' and t1.unit_type = 'U'   -- drop flagged (e.g. maintenance) , inactive and sold trucks - only consider active.
	t1.class2 in ('COLL')					  -- Collection only
	and category_class in ('COLL')				  -- Collection only
	and (t1.Using_dept_no like '%S0%' or t1.using_dept_no LIKE '%S1%')
	--or (t1.status !='A' AND T6.description in ('COVID 19' , 'SEASONAL'))
UNION ALL
SELECT t1.using_dept_no AS depotfacid, t1.unit_no AS vehicle_id, t4.sublob, t1.act_code,t1.status, t6.description, t1.unit_type
	FROM 		   	DEV_COMPASS_CAN.ODS.unit_main t1
	INNER JOIN 		DEV_COMPASS_CAN.ODS.view_udc_main t2 ON t1.unit_id = t2.unit_id
	LEFT JOIN 		DEV_COMPASS_CAN.ODS.activity t3 ON t1.act_code = t3.act_code
	LEFT JOIN 		DEV_ONEWM.MART.SUBLOB_HIERARCHY t4 ON t1.act_code = CAST(t4.essbase_sublob_key AS varchar(4))
	LEFT JOIN DEV_COMPASS_CAN.ODS.UNITDIS t5 ON t1.unit_id = t5.UNIT_ID
	LEFT JOIN DEV_COMPASS_CAN.ODS.DISPOSAL_REASON t6 on t6.disposal_reason = t5.disposal_reason
	WHERE  
	--t1.status='A' and t1.unit_type = 'U'   -- drop flagged (e.g. maintenance) , inactive and sold trucks - only consider active.
	t1.class2 in ('COLL')					  -- Collection Trucks only
	and category_class in ('COLL')				  -- Collection Trucks only
	and (t1.Using_dept_no like '%S0%' or t1.using_dept_no LIKE '%S1%')
	--or (t1.status !='A' AND T6.description in ('COVID 19' , 'SEASONAL'))
						  ),

OCS_SOURCED AS
--
--			Look in OCS and determine over the past few weeks the total number of routes for each vehicle, sublob combo at a hauling station
--			We give extra emphasis to primary routes since a truck may do multiple routes in the same day
--			One of the routes in primary and the other is secondary.  The primary route is more likely to be the correct sublob
(
SELECT 	depotfacid, sublob, vehicle_id, max(service_dt) AS last_service_dt	,				 -- Get the last service date
		sum(CASE WHEN isprimaryroute IN ('X','C') THEN 1 ELSE 0 end) AS primary_route_cnt,	 -- Count the primary routes
		sum(1) AS all_route_cnt																 -- Count all routes
FROM DEV_ONEWM.MART.route_fact WHERE service_dt > current_date-31											 -- arbitrarily go back 2 weeks.
GROUP BY depotfacid, sublob, vehicle_id),

OCS_ASSIGNMENT AS
(
--
--			Choose one record per combination of depot and vehicle.  The sublob assigned
--			is that with the highest primary route count - or if those are equal then the total route count
--			Also - a truck can be associated with multiple hauling sites.  In this case we prefer the combination of truck/hauling site
--			which exits in compass - if not then get the most recent - not sure that will ever be applied tho
--
SELECT depotfacid, vehicle_id, sublob from
	(SELECT t1.depotfacid, t1.vehicle_id, t1.sublob,
			row_number() OVER (partition BY t1.depotfacid, t1.vehicle_id ORDER BY primary_route_cnt DESC, all_route_cnt DESC,t1.sublob) AS sublob_rnk,
			row_number() OVER (partition BY t1.vehicle_id ORDER BY t2.depotfacid DESC NULLS LAST, last_service_dt desc) AS HAULING_SITE_rnk
	FROM ocs_sourced t1
	LEFT JOIN  compass t2 ON t1.depotfacid= t2.depotfacid AND t1.vehicle_id = t2.vehicle_id)
	WHERE sublob_rnk=1 AND HAULING_SITE_rnk=1)
--
-- So now lets coalesce the 2 tables.  Drive from compass but prefer the sublob from OCS - if available
--

SELECT t1.depotfacid AS fac_id, coalesce(t2.sublob, t1.sublob) AS sublob, count(*) AS truck_cnt
FROM compass t1 LEFT JOIN ocs_assignment t2 ON t1.depotfacid = t2.depotfacid AND t1.vehicle_id = t2.vehicle_id
WHERE coalesce(t2.sublob, t1.sublob) IS NOT null
GROUP BY fac_id, coalesce(t2.sublob, t1.sublob)
) AS "v_0000017686_0000133439");

-- ************************************** VALIDATION_DATA_CPS_WITH_NO_TMS_HISTORICAL_TONNAGE
CREATE VIEW VALIDATION_DATA_CPS_WITH_NO_TMS_HISTORICAL_TONNAGE AS

SELECT SUM(CP_TONS) AS CP_TONS,

	 'Transfer Station ' || LANE_ORIGIN_FAC_ID ||' with waste type '|| WASTE_TYPE || ' has '||round(SUM(CP_TONS),2)||' incoming CP tons but no TMS Historical Tonnage' AS DETAIL

    ,SUBSTR(LANE_ORIGIN_FAC_ID,1,6) AS LH_PARM_1

	,LH_FAC_TYPE(LANE_ORIGIN_FAC_ID)  AS LH_PARM_2

	,WASTE_TYPE AS LH_PARM_3

	,NULL AS LH_PARM_4

	,NULL AS LH_PARM_5

FROM MART.MODEL_TRANSFER_COSTS

WHERE CP_TONS IS NOT NULL

GROUP BY LANE_ORIGIN_FAC_ID, WASTE_TYPE HAVING MAX (TMS_HIST_PCT) IS NULL

;

-- ************************************** TST_BMT_FLOW_CONTROL
CREATE VIEW TST_BMT_FLOW_CONTROL as
select * from 
(select
 PKEY ,
 RULE_TYPE ,
 LOB ,
 WASTE_TYPE ,
 METHOD_TYPE ,
 TIME_HORIZON_NM ,
 NOTES ,
 SRC_HAULING_SITE_ID ,
 SRC_COUNTY_NM ,
 SRC_CITY_NM ,
 SRC_CUSTOMER_NM ,
 SRC_MARKET_AREA_CD ,
 case when DEST_DISPOSAL_SITE_TYPE = 'Transfer Station' then  DEST_DISPOSAL_SITE_ID ||'_TS' 
      when DEST_DISPOSAL_SITE_TYPE = 'MRF Recycling' then DEST_DISPOSAL_SITE_ID ||'_MRF'
      when DEST_DISPOSAL_SITE_TYPE = 'Disposal' then DEST_DISPOSAL_SITE_ID ||'_Disposal'
 else DEST_DISPOSAL_SITE_TYPE end as DEST_DISPOSAL_SITE_ID,
 
 case when DEST_DISPOSAL_SITE_TYPE = 'Transfer Station' then 'TS' 
                when DEST_DISPOSAL_SITE_TYPE = 'MRF Recycling' then 'MRF'
                else DEST_DISPOSAL_SITE_TYPE end as DEST_DISPOSAL_SITE_TYPE,
 DEST_COUNTY_NM ,
 DEST_CITY_NM     ,
 DEST_MARKET_AREA_CD ,
 CUSTOMER_NM ,
 MIN_TONS ,
 MAX_TONS ,
 SPECIAL_RATE_AMT ,
 LAST_UPDATED_DTM ,
 LAST_UPDATED_USER,
 DATA_COLLCTION_ADD_DELETE_UPDATE ,
row_number() over (partition by PKEY order by last_updated_dtm desc nulls last) as rnk,
 ACTIVE_FLAG,
 SRC_STATE_CD,
 DEST_STATE_CD,
 SRC_HAULING_SITE_NM,
 DEST_DISPOSAL_SITE_NM,
 SRC_OCS_DISPOSAL_CD,             --Added New column
 SRC_STATE_NM,
 DEST_STATE_NM,
 SRC_OCS_DISPOSAL_NM
 from STG.FACILITY_FLOW_CONTROL_BMT_DATA_COLLCTN
 )  where rnk=1;

-- ************************************** TS_DISPOSAL_COSTS
CREATE VIEW TS_DISPOSAL_COSTS as (SELECT 
  "FAC_ID", 
  "BU_ID", 
  "LOB", 
  "TOTAL_DISPOSAL_COST", 
  "TOTAL_DISPOSAL_VOLUME", 
  "DCPT" 
FROM (SELECT RFF.FAC_IDU||'_TS' as FAC_ID
  ,BU_ID
  ,LOB
  ,TOTAL_DISPOSAL_COST
  ,TOTAL_DISPOSAL_VOLUME
  ,TOTAL_DISPOSAL_COST/(CASE WHEN TOTAL_DISPOSAL_VOLUME = 0 THEN NULL ELSE TOTAL_DISPOSAL_VOLUME END) AS DCPT
FROM
(
  SELECT
    ETC.ORGANIZATION AS BU_ID
    ,'TS' LOB
    ,SUM(D500_DISPOSAL_FEES_AND_TAXES +
        D500_A502400_REVENUE_REDUCTION_SUBCONTRACTOR_TS_FLOOR_OPS +
        D600_MAINTENANCE_LUBRICANTS +
        D600_MAINTENANCE_PARTS_AND_SUPPLIES +
        D600_A_524000_PRIMARY_SHOP_COSTS_THIRD_PARTY_REPAIRS +
        D600_A_524900_PRIMARY_SHOP_COSTS_OTHER_THIRD_PARTY_MAINTENANCE +
        D600_MAINTENANCE_TIRES +
        D600_CONTRACT_LABOR +
        D600_A514000_PRIMARY_SHOP_COSTS_EMPLOYER_401K_MATCHING +
        D600_A514950_PRIMARY_SHOP_COSTS_PENSION_EXPENSE_UNION +
        D600_PAYROLL_TAX_EXPENSE +
        D600_WAGES_HOURLY +
        D600_WAGES_OVERTIME +
        D600_FUEL +
        D780_A571100_LANDFILL_ROYALTIES_AIRSPACE_HOST_COMMUNITY_FEES +
        D780_A571300_LANDFILL_ROYALTIES_IRSPACE_LF_LEASE_CONTINGENT_PAYMENTS +
        D780_ROYALTIES
    ) AS TOTAL_DISPOSAL_COST
    ,SUM(TOTAL_EXTERNAL_TONS + TOTAL_INTERNAL_TONS) AS TOTAL_DISPOSAL_VOLUME
  FROM DEV_ESSBASE.ODS.ESSBASE_TRANSFER_COST ETC
  WHERE to_date('01-'||TIME,'DD-MON-YY') > add_months(current_date(),-12)
  GROUP BY ETC.ORGANIZATION,  'TS'
) DCPT
LEFT JOIN
(
  SELECT DISTINCT FAC_BUS_UNIT_IDU, FAC_IDU FROM DEV_CORPDB.ODS.RDN2_FAC_FULL
) RFF
ON DCPT.BU_ID = RFF.FAC_BUS_UNIT_IDU



) AS "v_0000017686_0000143777");

-- ************************************** TMS_TONS_WASTE_TYPE
CREATE VIEW TMS_TONS_WASTE_TYPE as (SELECT 
  "TRANSFER_DATE", 
  "LANE_ORIGIN_FAC_ID", 
  "LANE_DESTINATION_FAC_ID", 
  "WASTE_TYPE", 
  "TONS" 
FROM (SELECT 
	POS_TIME_IN_DATE::DATE AS TRANSFER_DATE, 	
	ORIGIN_SITE_ID||'_TS' as LANE_ORIGIN_FAC_ID,
	DESTINATION_SITE_ID||'_' ||case  when DESTLOCTYPECD = 'MRF Recycling'   then 'MRF' else DESTLOCTYPECD end as LANE_DESTINATION_FAC_ID,
	CASE WHEN PMT_CATEGORY = 'MSW' THEN 'MSW'
			WHEN PMT_CATEGORY = 'C&D' THEN 'C&D'
			WHEN PMT_CATEGORY = 'Sp. Waste' THEN 'SPW'
			WHEN PMT_CATEGORY IN ('Other','Non-PMT') 
		THEN CASE WHEN upper(POS_COMMODITY_DESC) LIKE '%MSW%' THEN 'MSW'
			WHEN upper(POS_COMMODITY_DESC) LIKE '%TRASH%' THEN 'MSW'
			WHEN upper(POS_COMMODITY_DESC) LIKE '%C&D%' THEN 'C&D'
			WHEN upper(POS_COMMODITY_DESC) LIKE '%DEMO%' THEN 'C&D'
			WHEN upper(POS_COMMODITY_DESC) LIKE '%CD%' THEN 'C&D'
			WHEN upper(POS_COMMODITY_DESC) LIKE '%SPECIAL' THEN 'SPW'
		ELSE PMT_CATEGORY||'-'||POS_COMMODITY_NM||'-'||POS_COMMODITY_DESC
		END
	END AS WASTE_TYPE,
	sum(tons) AS TONS
FROM  DEV_TMS.ODS.TMS_TONS
WHERE ORIGLOCTYPECD = 'Transfer Station'
AND DESTLOCTYPECD != 'Transfer Station'
AND WASTE_TYPE IN ('MSW','C&D','SPW')
AND TONS > 0
GROUP BY TRANSFER_DATE, LANE_ORIGIN_FAC_ID ,LANE_DESTINATION_FAC_ID, WASTE_TYPE
) AS "v_0000017686_0000304588");

-- ************************************** TMS_TONS
CREATE VIEW TMS_TONS as (SELECT 
  "LANE_ORIGIN_FAC_ID", 
  "LANE_DESTINATION_FAC_ID", 
  "LONG_HAUL_COST", 
  "AVERAGE_LOAD_SIZE_TONS" 
FROM (SELECT
ORIGIN_SITE_ID || '_TS' as LANE_ORIGIN_FAC_ID,
DESTINATION_SITE_ID as LANE_DESTINATION_FAC_ID,
LONG_HAUL_COST,
AVERAGE_LOAD_SIZE_TONS
from
(
SELECT
ORIGIN_SITE_ID,
DESTINATION_SITE_ID,
SUM(AMOUNT) / case when SUM(CASE WHEN AMOUNT IS NOT NULL THEN TONS ELSE NULL END) = 0 then null else SUM(CASE WHEN AMOUNT IS NOT NULL THEN TONS ELSE NULL END) end as LONG_HAUL_COST,
SUM(TONS)/(
CASE WHEN SUM(LOADS) = 0 THEN NULL ELSE SUM(LOADS) END
) AS AVERAGE_LOAD_SIZE_TONS
FROM
DEV_TMS.ODS.TMS_TONS a
WHERE
to_date(
'01-' || a.MONTH || '-' || a.YEAR, 'DD-MM-YYYY'
) > add_months(current_date(),-12)
GROUP BY
ORIGIN_SITE_ID,
DESTINATION_SITE_ID
)
) AS "v_0000017686_0000143895");

-- ************************************** TMS_MARKET_AREAS
CREATE VIEW TMS_MARKET_AREAS as (SELECT 
  "FAC_ID", 
  "FAC_MA_NM", 
  "FAC_MA_IDU" 
FROM (--
--  Lets get the TMS destination facilities.  Here is the logic we are implmenting:-
--  For each destination assume the MA associated with the origin.
--  If a detination is attached to multiple MAs then choose the one with the most entries in the TMS contracts table
--  Only consider non-S0 destinations
--
SELECT 
  LANE_DESTINATION_CODE as FAC_ID, 
  FAC_MA_NM, 
  FAC_MA_IDU 
from 
  (
    select 
      LANE_DESTINATION_CODE, 
      FAC_MA_NM, 
      FAC_MA_IDU, 
      row_number() over (
        partition by LANE_DESTINATION_CODE 
        order by 
          COUNT(*) desc nulls last
      ) as rnk 
    from 
      DEV_ONEWM.MART.TMS_CONTRACT_RATES_VW t1, 
      DEV_CORPDB.ODS.RDN2_FAC_FULL t2 
    where 
      t1.LANE_ORIGIN_CODE = t2.FAC_IDU 
      and t1.LANE_DESTINATION_CODE not like 'S0%' -- not only S0
      and t1.LANE_DESTINATION_CODE not like 'S1%' 
      and t1.LANE_DESTINATION_CODE not like 'S5%' 
    group by 
      LANE_DESTINATION_CODE, 
      FAC_MA_NM, 
      FAC_MA_IDU
  ) 
where 
  rnk = 1
) AS "v_0000017686_0000143682");

-- ************************************** TMS_CONTRACT_RATES_VW
CREATE VIEW TMS_CONTRACT_RATES_VW as (SELECT 
  "CONTRACT_NAME", 
  "SUPPLIER_NAME", 
  "MARKET_AREA", 
  "CURRENCY", 
  "CONTRACT_TYPE", 
  "TERM", 
  "EFFECTIVE_DATE", 
  "END_DATE", 
  "NOTICE_TO_REVIEW", 
  "NOTICE_TO_CANCEL", 
  "FSC_TYPE", 
  "CPI_AREA", 
  "CPI_ADJUSTMENT_TYPE", 
  "CPI_ADJUSTMENT_DATE", 
  "CPI_ADJUSTMENT_MONTH", 
  "BASE_CPI", 
  "CURRENT_CPI", 
  "DOE_REGION", 
  "BASE_PEG_PRICE", 
  "CURRENT_PEG_PRICE", 
  "PERCENTAGE_OF_CPI", 
  "MILES_PER_GALLON_OR_KMS_LITRE", 
  "FSC_INCREASE_PER_MILE", 
  "AVERAGE_PRICE_RANGE_INCREASE", 
  "PERCENTAGE_OF_BASE_RATE", 
  "LANE_NAME", 
  "LANE_ORIGIN_NAME", 
  "LANE_ORIGIN_BU_NUMBER", 
  "LANE_ORIGIN_CODE", 
  "LANE_ORIGIN_TYPE", 
  "LANE_DESTINATION_NAME", 
  "LANE_DESTINATION_BU_NUMBER", 
  "LANE_DESTINATION_CODE", 
  "LANE_DESTINATION_TYPE", 
  "RATE_CATEGORY", 
  "RATE_SUB_CATEGORY", 
  "MINIMUM_WEIGHT", 
  "CONTRACTED_DISTANCE", 
  "UNIT_FOR_COST", 
  "UNIT_FOR_LOADING_CHARGES", 
  "BASE_RATE_NET_FUEL", 
  "BASE_COST_OF_FUEL", 
  "BASE_TRANSPORTATION_RATE", 
  "BASE_LOADING_CHARGE", 
  "CURRENT_RATE_NET_FUEL", 
  "CURRENT_COST_OF_FUEL", 
  "CURRENT_TRANSPORTATION_RATE", 
  "CURRENT_LOADING_CHARGE", 
  "FUEL_SURCHARGE", 
  "ALLOCATED_FUEL", 
  "ACCESSORIAL_CHARGES", 
  "STATUS", 
  "PAID_AT", 
  "WEIGHED_AT", 
  "OUT_OF_SCOPE" 
FROM (select 
  * 
from 
  DEV_ONEWM.MART.TMS_CONTRACT_RATES 
where 
  LANE_ORIGIN_TYPE = 'Transfer Station' 
  and LANE_DESTINATION_TYPE IN ('Disposal', 'MRF Recycling') 
  AND LANE_ORIGIN_CODE LIKE 'S%'
) AS "v_0000017686_0000143635");

-- ************************************** TMS_CONTRACT_RATES
CREATE VIEW TMS_CONTRACT_RATES as (SELECT 
  "CONTRACT_NAME", 
  "SUPPLIER_NAME", 
  "MARKET_AREA", 
  "CURRENCY", 
  "CONTRACT_TYPE", 
  "TERM", 
  "EFFECTIVE_DATE", 
  "END_DATE", 
  "NOTICE_TO_REVIEW", 
  "NOTICE_TO_CANCEL", 
  "FSC_TYPE", 
  "CPI_AREA", 
  "CPI_ADJUSTMENT_TYPE", 
  "CPI_ADJUSTMENT_DATE", 
  "CPI_ADJUSTMENT_MONTH", 
  "BASE_CPI", 
  "CURRENT_CPI", 
  "DOE_REGION", 
  "BASE_PEG_PRICE", 
  "CURRENT_PEG_PRICE", 
  "PERCENTAGE_OF_CPI", 
  "MILES_PER_GALLON_OR_KMS_LITRE", 
  "FSC_INCREASE_PER_MILE", 
  "AVERAGE_PRICE_RANGE_INCREASE", 
  "PERCENTAGE_OF_BASE_RATE", 
  "LANE_NAME", 
  "LANE_ORIGIN_NAME", 
  "LANE_ORIGIN_BU_NUMBER", 
  "LANE_ORIGIN_CODE", 
  "LANE_ORIGIN_TYPE", 
  "LANE_DESTINATION_NAME", 
  "LANE_DESTINATION_BU_NUMBER", 
  "LANE_DESTINATION_CODE", 
  "LANE_DESTINATION_TYPE", 
  "RATE_CATEGORY", 
  "RATE_SUB_CATEGORY", 
  "MINIMUM_WEIGHT", 
  "CONTRACTED_DISTANCE", 
  "UNIT_FOR_COST", 
  "UNIT_FOR_LOADING_CHARGES", 
  "BASE_RATE_NET_FUEL", 
  "BASE_COST_OF_FUEL", 
  "BASE_TRANSPORTATION_RATE", 
  "BASE_LOADING_CHARGE", 
  "CURRENT_RATE_NET_FUEL", 
  "CURRENT_COST_OF_FUEL", 
  "CURRENT_TRANSPORTATION_RATE", 
  "CURRENT_LOADING_CHARGE", 
  "FUEL_SURCHARGE", 
  "ALLOCATED_FUEL", 
  "ACCESSORIAL_CHARGES", 
  "STATUS", 
  "PAID_AT", 
  "WEIGHED_AT", 
  "OUT_OF_SCOPE" 
FROM (select 
  * 
from 
  DEV_TMS.ODS.TMS_CONTRACT_RATES_ALL 
where 
  status in (
    'Expiring in 90 days', 'Active','In Process')
) AS "v_0000017686_0000143822");

-- ************************************** TIME_HORIZON
CREATE VIEW TIME_HORIZON as

select 'Daily' TIME_HORIZON_NM

union all select 'Monthly'

union all select 'Quarterly'

union all select 'Yearly';

-- ************************************** test_TRANSFER_LANE_WASTE_TYPE
CREATE VIEW test_TRANSFER_LANE_WASTE_TYPE as (SELECT 
  "LANE_ORIGIN_FAC_ID", 
  "WASTE_TYPE", 
  "LANE_DESTINATION_FAC_ID", 
  "LANE_NAME", 
  "LONG_HAUL_COST_PER_TON", 
  "LONG_HAUL_COST_PER_LOAD", 
  "AVERAGE_LOAD_SIZE_TONS", 
  "STATUS_IND", 
  "SOURCE", 
  "LAST_UPDATED_DTM", 
  "LAST_UPDATED_USER", 
  "DATA_COLLCTION_ADD_DELETE_UPDATE", 
  "MIN_TONS", 
  "MAX_TONS", 
  "VOLUME_CONSTRAINT_TYPE", 
  "VOLUME_TIME_UNIT" 
FROM (select
coalesce( t1.LANE_ORIGIN_FAC_ID, t2.LANE_ORIGIN_FAC_ID) as LANE_ORIGIN_FAC_ID,
coalesce( t1.WASTE_TYPE, t2.WASTE_TYPE) as WASTE_TYPE,
coalesce( t1.LANE_DESTINATION_FAC_ID, t2.LANE_DESTINATION_FAC_ID) as LANE_DESTINATION_FAC_ID,
coalesce(t1.LANE_NAME, t2.LANE_NAME) as LANE_NAME,
CASE WHEN t1.LONG_HAUL_COST_PER_TON = 0 or t1.LONG_HAUL_COST_PER_TON is null then t2.LONG_HAUL_COST else t1.LONG_HAUL_COST_PER_TON end AS LONG_HAUL_COST_PER_TON,
LONG_HAUL_COST_PER_LOAD ,
coalesce(t1.AVERAGE_LOAD_SIZE_TONS ,t2.AVERAGE_LOAD_SIZE_TONS) as AVERAGE_LOAD_SIZE_TONS,
case when t1.STATUS_IND is null then 'A' else t1.STATUS_IND end as STATUS_IND ,
case when t1.LANE_ORIGIN_FAC_ID is not null then t1.SOURCE else 'MART' end as SOURCE,
LAST_UPDATED_DTM ,
LAST_UPDATED_USER ,
DATA_COLLCTION_ADD_DELETE_UPDATE ,
MIN_TONS,
MAX_TONS,
volume_constraint_type,
volume_time_unit
from DEV_ONEWM.MART.BMT_TRANSFER_LANE_WASTE_TYPE t1 
full outer join DEV_ONEWM.MART.test_CORP_TRANSFER_LANE_WASTE_TYPE_VW t2
on  t1.LANE_ORIGIN_FAC_ID = t2.LANE_ORIGIN_FAC_ID and t1.WASTE_TYPE = T2.waste_type and
t1.LANE_DESTINATION_FAC_ID = t2.LANE_DESTINATION_FAC_ID
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D'
) AS "v_0000000307_0000041778");

-- ************************************** test_TMS_TONS
CREATE VIEW test_TMS_TONS as (SELECT 
  "LANE_ORIGIN_FAC_ID", 
  "LANE_DESTINATION_FAC_ID", 
  "LONG_HAUL_COST", 
  "AVERAGE_LOAD_SIZE_TONS" 
FROM (SELECT
	ORIGIN_SITE_ID||'_TS' as LANE_ORIGIN_FAC_ID,
	DESTINATION_SITE_ID as LANE_DESTINATION_FAC_ID,
	LONG_HAUL_COST,
	AVERAGE_LOAD_SIZE_TONS
from
(
	SELECT ORIGIN_SITE_ID
		,DESTINATION_SITE_ID
		,SUM(AMOUNT) / case when SUM(TONS) = 0 then null else SUM(TONS) end as LONG_HAUL_COST
		,SUM(TONS)/(CASE WHEN SUM(LOADS) = 0 THEN NULL ELSE SUM(LOADS) END) AS AVERAGE_LOAD_SIZE_TONS
	FROM DEV_ONEWM.STG.TMS_TONS a
	WHERE to_date('01-'||a.MONTH||'-'||a.YEAR,'DD-MM-YYYY') > add_months(current_date(),-12)
	GROUP BY ORIGIN_SITE_ID, DESTINATION_SITE_ID
)
) AS "v_0000000307_0000041585");

-- ************************************** test_sj
CREATE VIEW test_sj  as

select red.SITE_CD as DepotFacId

	, count(red.rte_num) routes 

	, sum(red.DSPSL_TRIP_CNT) disposal_trips

	, sum(red.total_equivalent_haul_num) eq_hauls

	, cast(sum(red.total_equivalent_haul_num)/count(red.rte_num) as numeric(10,2)) as eq_hauls_per_route_N

from STG.PVW_FCT_DAY_RTE_EXECUTION_DRVR red 

where red.SUB_LOB_CD like 'RO%' 

	and red.RTE_EXECUTION_SVC_DT between '2019-10-01' and '2019-12-31'

  and (depotfacid in (select fac_idu from site_parms where group_key in  ('S04136','S03789','S03752','S04547','S07288','S04058','S04249','S04069','S03825','S03227','S02928','S09205','S06991','S04107','S05636','S04058') )  or (1 in ('COMMERCIAL','RESIDENTIAL','ROLLOFF')))

group by DepotFacId;

-- ************************************** test_CORP_TRANSFER_LANE_WASTE_TYPE_VW
CREATE VIEW test_CORP_TRANSFER_LANE_WASTE_TYPE_VW as (SELECT 
  "LANE_ORIGIN_FAC_ID", 
  "WASTE_TYPE", 
  "LANE_DESTINATION_FAC_ID", 
  "LANE_NAME", 
  "LONG_HAUL_COST", 
  "AVERAGE_LOAD_SIZE_TONS" 
FROM (SELECT t3.LANE_ORIGIN_FAC_ID
	, t1.WASTE_TYPE
	, t3.LANE_DESTINATION_FAC_ID
	, LANE_NAME
	, coalesce (LONG_HAUL_COST,
                      median(LONG_HAUL_COST) over (partition by WASTE_TYPE)) as LONG_HAUL_COST
	, t4.AVERAGE_LOAD_SIZE_TONS
FROM  DEV_ONEWM.MART.CORP_WASTE_TYPE_ACCEPTANCE t1 
join DEV_ONEWM.MART.CORP_DISPOSAL_SITE t2 on T1.FAC_ID = T2.FAC_ID
      JOIN  DEV_ONEWM.MART.TRANSFER_LANES t3 ON T2.FAC_ID = T3.LANE_ORIGIN_FAC_ID
      LEFT JOIN DEV_ONEWM.MART.test_TMS_TONS t4 ON T3.LANE_ORIGIN_FAC_ID = T4.LANE_ORIGIN_FAC_ID and substring(t3.LANE_DESTINATION_FAC_ID,1,6) = T4.LANE_DESTINATION_FAC_ID
      WHERE T2.FAC_TYPE = 'TS'
) AS "v_0000000307_0000040686");

-- ************************************** SWAP_HEADER
CREATE VIEW SWAP_HEADER as 

SELECT 1 AS SWAP_HEADER_ID, 'BFI_SWAP' as SWAP_NAME, 20000 as SWAP_QTY, 999999 as SHORTFALL_PENALTY_PER_TON, 999999 as SHORTFALL_PENALTY_REPORT;

-- ************************************** SUBLOB_HIERARCHY
CREATE VIEW SUBLOB_HIERARCHY as (SELECT 
  "LOB", 
  "SUBLOB", 
  "SUBLOB_DESC", 
  "ESSBASE_SUBLOB_KEY", 
  "ESSBASE_SUBLOB_DESC" 
FROM (select LOB, SUBLOB, SUBLOB_DESC, ESSBASE_SUBLOB_KEY, ESSBASE_SUBLOB_DESC 
from DEV_ONEWM.MART.COMRES_LOB_HIERARCHY
union
select LOB, SUBLOB, SUBLOB_DESC, ESSBASE_SUBLOB_KEY, ESSBASE_SUBLOB_DESC 
from DEV_ONEWM.MART.RO_LOB_HIERARCHY
) AS "v_0000017686_0000143914");

-- ************************************** sk_test
CREATE VIEW sk_test AS 

select

 MART.FAC_ID

,MART.FAC_NAME

,'HS' FAC_TYPE

,MART.ACTIVE_FLAG

,MART.MARKET_AREA_NM

,MART.MARKET_AREA_CD

,MART.ADDRESS_1

,MART.ADDRESS_2

,MART.CITY_NM

,MART.STATE_CD

,MART.ZIP_CD

,MART.LATITUDE

,MART.LONGITUDE

,0 TURN_TIME

,0 MIN_VOLUME

,0 MAX_VOLUME

,0 FIXED_COST

,MART.WM_OWNED_FLAG

,null LAST_UPDATED_DTM

,'CORPDB' DATA_SOURCE

from DEV_ONEWM.MART.corp_HAULING_SITE mart 

left join DEV_ONEWM.STG.facility_location_data_bmt_data_collctn bmt_data_clctn

on mart.FAC_ID = bmt_data_clctn.FAC_ID

where bmt_data_clctn.FAC_ID is null



union all 



select

 MART.FAC_ID

,MART.FAC_NAME

,MART.FAC_TYPE

,MART.ACTIVE_FLAG

,MART.MARKET_AREA_NM

,MART.MARKET_AREA_CD

,MART.ADDRESS_1

,MART.ADDRESS_2

,MART.CITY_NM

,MART.STATE_CD

,MART.ZIP_CD

,MART.LATITUDE

,MART.LONGITUDE

,MART.CYCLE_MINUTE_CNT TURN_TIME

,MART.MIN_VOLUME

,MART.MAX_VOLUME

,MART.FIXED_COST

,MART.WM_OWNED_FLAG

,null LAST_UPDATED_DTM

,mart.source DATA_SOURCE

from DEV_ONEWM.MART.CORP_DISPOSAL_SITE mart

left join DEV_ONEWM.STG.facility_location_data_bmt_data_collctn bmt_data_clctn

on mart.FAC_ID = bmt_data_clctn.FAC_ID

where bmt_data_clctn.FAC_ID is null



union all 





select 

 FAC_ID

,FAC_NAME

,FAC_TYPE

,ACTIVE_FLAG

,MARKET_AREA_NM

,MARKET_AREA_CD

,ADDRESS_1

,ADDRESS_2

,CITY_NM

,STATE_CD

,ZIP_CD

,LATITUDE

,LONGITUDE

,TURN_TIME

,MIN_VOLUME

,MAX_VOLUME

,FIXED_COST

,WM_OWNED_FLAG

,LAST_UPDATED_DTM

,'BMT' DATA_SOURCE

from 

(select

 FAC_ID

,FAC_NAME

,FAC_TYPE

,ACTIVE_FLAG

,MARKET_AREA_NM

,MARKET_AREA_CD

,ADDRESS_1

,ADDRESS_2

,CITY_NM

,STATE_CD

,ZIP_CD

,LATITUDE

,LONGITUDE

,CYCLE_MINUTE_CNT TURN_TIME

,MIN_VOLUME

,MAX_VOLUME

,FIXED_COST

,WM_OWNED_FLAG

,LAST_UPDATED_DTM

,row_number() over (partition by FAC_ID, FAC_TYPE order by LAST_UPDATED_DTM DESC) rn 

from DEV_ONEWM.STG.facility_location_data_bmt_data_collctn

where DATA_COLLCTION_ADD_DELETE_UPDATE in ('A', 'E','U')) A

where a.rn=1;

-- ************************************** SK_FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW
CREATE VIEW SK_FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW AS 
select
 MART.FAC_ID
,MART.FAC_NAME
,'HS' FAC_TYPE
,MART.ACTIVE_FLAG
,MART.MARKET_AREA_NM
,MART.MARKET_AREA_CD
,MART.ADDRESS_1
,MART.ADDRESS_2
,MART.CITY_NM
,MART.STATE_CD
,MART.ZIP_CD
,MART.LATITUDE
,MART.LONGITUDE
,0 TURN_TIME
,0 MIN_VOLUME
,0 MAX_VOLUME
,0 FIXED_COST
,MART.WM_OWNED_FLAG
,null LAST_UPDATED_DTM
,'CORPDB' DATA_SOURCE
from DEV_ONEWM.MART.corp_HAULING_SITE mart 
left join DEV_ONEWM.STG.facility_location_data_bmt_data_collctn bmt_data_clctn
on mart.FAC_ID = bmt_data_clctn.FAC_ID
where bmt_data_clctn.FAC_ID is null

union all 

select
 MART.FAC_ID
,MART.FAC_NAME
,MART.FAC_TYPE
,MART.ACTIVE_FLAG
,MART.MARKET_AREA_NM
,MART.MARKET_AREA_CD
,MART.ADDRESS_1
,MART.ADDRESS_2
,MART.CITY_NM
,MART.STATE_CD
,MART.ZIP_CD
,MART.LATITUDE
,MART.LONGITUDE
,MART.CYCLE_MINUTE_CNT TURN_TIME
,MART.MIN_VOLUME
,MART.MAX_VOLUME
,MART.FIXED_COST
,MART.WM_OWNED_FLAG
,null LAST_UPDATED_DTM
,mart.source DATA_SOURCE
from DEV_ONEWM.MART.CORP_DISPOSAL_SITE mart
left join DEV_ONEWM.STG.facility_location_data_bmt_data_collctn bmt_data_clctn
on mart.FAC_ID = bmt_data_clctn.FAC_ID
where bmt_data_clctn.FAC_ID is null

union all 


select 
 FAC_ID
,FAC_NAME
,FAC_TYPE
,ACTIVE_FLAG
,MARKET_AREA_NM
,MARKET_AREA_CD
,ADDRESS_1
,ADDRESS_2
,CITY_NM
,STATE_CD
,ZIP_CD
,LATITUDE
,LONGITUDE
,TURN_TIME
,MIN_VOLUME
,MAX_VOLUME
,FIXED_COST
,WM_OWNED_FLAG
,LAST_UPDATED_DTM
,'BMT' DATA_SOURCE
from 
(select
 FAC_ID
,FAC_NAME
,FAC_TYPE
,ACTIVE_FLAG
,MARKET_AREA_NM
,MARKET_AREA_CD
,ADDRESS_1
,ADDRESS_2
,CITY_NM
,STATE_CD
,ZIP_CD
,LATITUDE
,LONGITUDE
,CYCLE_MINUTE_CNT TURN_TIME
,MIN_VOLUME
,MAX_VOLUME
,FIXED_COST
,WM_OWNED_FLAG
,LAST_UPDATED_DTM
,row_number() over (partition by FAC_ID order by LAST_UPDATED_DTM DESC) rn 
from DEV_ONEWM.STG.facility_location_data_bmt_data_collctn
where DATA_COLLCTION_ADD_DELETE_UPDATE in ('A', 'E')) A
where a.rn=1;

-- ************************************** SCALE_CONSTRAINTS
CREATE VIEW SCALE_CONSTRAINTS AS

SELECT

COUNTDAYOFWEEK($start_date,$end_date,0) AS MODEL_SUNDAYS,

COUNTDAYOFWEEK($start_date,$end_date,1) AS MODEL_MONDAYS,

COUNTDAYOFWEEK($start_date,$end_date,2) AS MODEL_TUESDAYS,

COUNTDAYOFWEEK($start_date,$end_date,3) AS MODEL_WEDNESDAYS,

COUNTDAYOFWEEK($start_date,$end_date,4) AS MODEL_THURSDAYS,

COUNTDAYOFWEEK($start_date,$end_date,5) AS MODEL_FRIDAYS,

COUNTDAYOFWEEK($start_date,$end_date,6) AS MODEL_SATURDAYS,

countdays($start_date,$end_date,0) AS MODEL_WEEKDAYS,

--Subtract one day to make sure we don't include the extra day e.g. 1 month from 4/1 -> 5/1 -> 4/30

countdays($start_date, DATEADD(day,-1,DATEADD(month,1, $start_date)),0) AS MONTHLY_WEEKDAYS,

countdays($start_date, DATEADD(day,-1,DATEADD(month,1, $start_date)),1) AS MONTHLY_SATURDAYS,

countdays($start_date, DATEADD(day,-1,DATEADD(quarter,1, $start_date)),0) AS QTR_WEEKDAYS,

countdays($start_date, DATEADD(day,-1,DATEADD(quarter,1, $start_date)),1) AS QTR_SATURDAYS,

countdays($start_date, DATEADD(day,-1,DATEADD(year,1, $start_date)),0) AS YEARLY_WEEKDAYS,

countdays($start_date, DATEADD(day,-1,DATEADD(year,1, $start_date)),1) AS YEARLY_SATURDAYS,

(MODEL_WEEKDAYS + MODEL_SATURDAYS) AS DAILY_FACTOR,

(MODEL_WEEKDAYS + MODEL_SATURDAYS)/(MONTHLY_WEEKDAYS + MONTHLY_SATURDAYS) AS MONTHLY_FACTOR,

(MODEL_WEEKDAYS + MODEL_SATURDAYS)/(QTR_WEEKDAYS + QTR_SATURDAYS) AS QTR_FACTOR,

(MODEL_WEEKDAYS + MODEL_SATURDAYS)/(YEARLY_WEEKDAYS + YEARLY_SATURDAYS) AS YEARLY_FACTOR,

1 AS FACTOR;

-- ************************************** sc_test11
CREATE VIEW sc_test11
as
select 'County' as SRC;

-- ************************************** S0_ACTIVE_SITES
CREATE VIEW S0_ACTIVE_SITES as

with 

S0_PMT as (

select FAC_IDU,       'TS' as location_type

      from STG.PMT_TRANSFER_ROLLUP

      where (DATA_DT  between $start_date and $end_date ) and ROLLUP_TYPE='M' and TOT_TONS > 0            group by FAC_IDU

      UNION ALL          

      select FAC_IDU, 'MRF' as location_type

      from STG.PMT_RECYCLING_ROLLUP

      where (DATA_DT  between $start_date and $end_date ) and ROLLUP_TYPE='M' and TOT_TONS > 0

      group by FAC_IDU

      UNION ALL        

      select FAC_IDU, 'LF' as location_type

      from STG.PMT_DISPOSAL_ROLLUP

      where (DATA_DT  between $start_date and $end_date ) and ROLLUP_TYPE='M' and TOT_TONS > 0

      group by FAC_IDU ) 

select  FAC_ID from

(

select FAC_IDU||'-'||location_type as FAC_ID from S0_PMT 

);

-- ************************************** ROLLOFF_TRAVEL_TO_DISPOSAL_VW
CREATE VIEW ROLLOFF_TRAVEL_TO_DISPOSAL_VW as 

SELECT LANDFILL_PKEY, 

TIMESTAMPDIFF(MINUTE, EVENT_BEFORE_LANDFILL, ARRIVE) TRAVEL_TO_DSPSL_MINUTE, 

TIMESTAMPDIFF(MINUTE, DOWNSTART,DOWNEND) DOWN_TIME,

TIMESTAMPDIFF(MINUTE, LUNCHSTART,LUNCHEND) MEAL_TIME,

CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)

     THEN MEAL_TIME - NVL(DOWN_TIME, 0)

     ELSE MEAL_TIME 

END NET_MEAL_TIME,

CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)

	 THEN DOWN_TIME - NVL(MEAL_TIME,0) 

	 ELSE DOWN_TIME

END NET_DOWN_TIME,

TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0) NET_TRAVEL_TO_DSPS

              

FROM 

MART.ROLLOFF_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT T1



LEFT JOIN STG.TP_RO_DOWNTIME ROD

ON ROD.FK_ROUTEORDER = T1.FK_ROUTEORDER 

AND ROD.FK_VEHICLE IS NULL 

AND ROD.DOWNSTART  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE

AND ROD.DOWNEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE 

LEFT JOIN STG.TP_RO_LUNCH RLUNCH

ON RLUNCH.FK_ROUTEORDER = T1.FK_ROUTEORDER 

AND RLUNCH.LUNCHSTART BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE 

AND RLUNCH.LUNCHEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE

AND RLUNCH.FK_VEHICLE IS NULL 

;

-- ************************************** ROLLOFF_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT
CREATE VIEW ROLLOFF_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT as

SELECT * FROM

(SELECT FK_ROUTEORDER, LANDFILL_PKEY, ARRIVE, EVENT_BEFORE_LANDFILL, ROW_NUMBER () OVER(PARTITION BY LANDFILL_PKEY ORDER BY ARRIVE asc) RN 

FROM

(

SELECT ROL.FK_ROUTEORDER, COR.FK_CUSTOMERORDER, ROL.PKEY LANDFILL_PKEY , COR.ARRIVELANDFILL ARRIVE  , max(EVENT_BEFORE_LANDFILL) EVENT_BEFORE_LANDFILL

FROM STG.TP_CO_RESULT  COR

JOIN MART.ROLLOFF_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL EVNTS_BFR

ON EVNTS_BFR.FK_CUSTOMERORDER = COR.FK_CUSTOMERORDER 

AND COR.FK_VEHICLE IS NULL 

AND COR.ARRIVELANDFILL >= EVNTS_BFR.EVENT_BEFORE_LANDFILL

JOIN STG.TP_RO_LANDFILL ROL 

ON ROL.FK_CUSTOMERORDER = COR.FK_CUSTOMERORDER

AND ROL.FK_VEHICLE IS NULL 

GROUP BY ROL.FK_ROUTEORDER, COR.FK_CUSTOMERORDER, ROL.PKEY, COR.ARRIVELANDFILL

) A

) A1

WHERE A1.RN = 1 





----



































;

-- ************************************** ROLLOFF_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL
CREATE VIEW ROLLOFF_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL as 



SELECT COR.FK_CUSTOMERORDER, COR.DISPATCHED EVENT_BEFORE_LANDFILL

FROM STG.TP_CO_RESULT COR

JOIN STG.TP_CUSTOMERORDER CO

ON COR.FK_CUSTOMERORDER = CO.PKEY

AND COR.FK_VEHICLE IS NULL 

JOIN STG.TP_LOB L 

ON L.PKEY = CO.FK_LOB

AND L.UNIQUEID = 'O'



UNION ALL 



SELECT COR.FK_CUSTOMERORDER, COR.DEPARTCUSTOMER 

FROM STG.TP_CO_RESULT COR

JOIN STG.TP_CUSTOMERORDER CO

ON COR.FK_CUSTOMERORDER = CO.PKEY

AND COR.FK_VEHICLE IS NULL 

AND DEPARTCUSTOMER IS NOT NULL 

JOIN STG.TP_LOB L 

ON L.PKEY = CO.FK_LOB

AND L.UNIQUEID = 'O'



UNION ALL 



SELECT COR.FK_CUSTOMERORDER, COR.STOPTICKET 

FROM STG.TP_CO_RESULT COR

JOIN STG.TP_CUSTOMERORDER CO

ON COR.FK_CUSTOMERORDER = CO.PKEY

AND COR.FK_VEHICLE IS NULL 

AND STOPTICKET IS NOT NULL 

JOIN STG.TP_LOB L 

ON L.PKEY = CO.FK_LOB

AND L.UNIQUEID = 'O'



UNION ALL 



SELECT COR.FK_CUSTOMERORDER, COR.RESTARTTICKET 

FROM STG.TP_CO_RESULT COR

JOIN STG.TP_CUSTOMERORDER CO

ON COR.FK_CUSTOMERORDER = CO.PKEY

AND COR.FK_VEHICLE IS NULL 

AND RESTARTTICKET IS NOT NULL

JOIN STG.TP_LOB L 

ON L.PKEY = CO.FK_LOB

AND L.UNIQUEID = 'O'

;

-- ************************************** ROLLOFF_LOAD_TICKET_TYPE
CREATE VIEW ROLLOFF_LOAD_TICKET_TYPE AS

--

-- Ticket Type data available from OPUS table .  From there we navigate to TP_ROUTEORDER (thanks Ganga)

-- Max eliminates the few duplicate records - duplicate landfill keys always have the same load type

--

SELECT rol.pkey AS landfill_pkey, max(tickt_loadtype_cd) as service_type_cd

FROM DEV_ONEWM.STG.PVW_FCT_RTE_EXECUTION_STOP_RO_FLASH_SUMMRY rolloff 

	JOIN DEV_OCS.ODS.TP_CUSTOMER c 

ON rolloff.src_cust_key_id =c.uniqueid

JOIN DEV_OCS.ODS.TP_CUSTOMERORDER co 	ON co.fk_customer = c.pkey  	AND co.ticketnumber = rolloff.mas_ticket_number 

JOIN DEV_OCS.ODS.TP_ROUTEORDER ro 		ON ro.pkey = co.fk_routeorder 	AND ro.orderdate = rolloff.rte_exec_date 

JOIN DEV_OCS.ODS.TP_RO_LANDFILL rol 	ON ro.pkey =rol.fk_routeorder 	AND rol.fk_vehicle is NULL	AND rol.fk_customerorder = co.pkey  

WHERE rte_exec_date > '2018-12-31'

group by rol.pkey

;

-- ************************************** ROLLOFF_DISPOSAL_LEG_TIME
CREATE VIEW ROLLOFF_DISPOSAL_LEG_TIME as (SELECT 
  "LANDFILL_PKEY", 
  "NET_TRAVEL_TO_DSPS" 
FROM (SELECT 
ROL.PKEY LANDFILL_PKEY,  
sum(CASE when TLT.UNIQUEID IN ('E/R','BTE','BRN') OR TLT.UNIQUEID IN ('S/O','DNR','LIV') THEN
	 CASE WHEN  STOPTICKET BETWEEN DEPARTCUSTOMER and ARRIVELANDFILL and RESTARTTICKET BETWEEN DEPARTCUSTOMER and ARRIVELANDFILL
	 	  THEN  ( TIMESTAMPDIFF(MINUTE , DEPARTCUSTOMER , ARRIVELANDFILL ) - TIMESTAMPDIFF(MINUTE , STOPTICKET, RESTARTTICKET) - NVL(TIMESTAMPDIFF(MINUTE , RODDCARL.DOWNSTART, RODDCARL.DOWNEND),0)) 
	 ELSE  TIMESTAMPDIFF(MINUTE ,DEPARTCUSTOMER , ARRIVELANDFILL) - NVL(TIMESTAMPDIFF(MINUTE , RODDCARL.DOWNSTART, RODDCARL.DOWNEND),0)
	 END
	 WHEN  TLT.UNIQUEID IN ('FFY','FDR','FRN') OR TLT.UNIQUEID IN ('FYN','FYS') THEN
       CASE WHEN STOPTICKET BETWEEN DISPATCHED AND ARRIVELANDFILL AND RESTARTTICKET BETWEEN DISPATCHED AND ARRIVELANDFILL
			THEN  ( TIMESTAMPDIFF (MINUTE , DISPATCHED, ARRIVELANDFILL) - TIMESTAMPDIFF(MINUTE ,STOPTICKET, RESTARTTICKET)  - NVL(TIMESTAMPDIFF(MINUTE , RODTSARL.DOWNSTART, RODTSARL.DOWNEND),0))
		ELSE   TIMESTAMPDIFF(MINUTE,DISPATCHED,  ARRIVELANDFILL) - NVL(TIMESTAMPDIFF(MINUTE , RODTSARL.DOWNSTART, RODTSARL.DOWNEND),0)
		END
END)  NET_TRAVEL_TO_DSPS
FROM  DEV_OCS.ODS.TP_CO_RESULT COR
JOIN  DEV_OCS.ODS.TP_CUSTOMERORDER CO
ON COR.FK_CUSTOMERORDER = CO.PKEY
AND COR.FK_VEHICLE IS NULL
JOIN  DEV_OCS.ODS.TP_LOB L
ON L.PKEY = CO.FK_LOB
AND L.UNIQUEID = 'O'
JOIN DEV_OCS.ODS.TP_TICKETLOADTYPE TLT 
ON TLT.PKEY = cor.fk_loadtype 
JOIN DEV_OCS.ODS.TP_RO_LANDFILL ROL 
ON ROL.FK_CUSTOMERORDER =  CO.PKEY
AND ROL.FK_VEHICLE IS NULL
LEFT JOIN DEV_OCS.ODS.TP_RO_DOWNTIME RODDCARL
ON RODDCARL.FK_ROUTEORDER = CO.FK_ROUTEORDER
AND RODDCARL.FK_VEHICLE IS NULL
AND TLT.UNIQUEID IN ('E/R','BTE','BRN','S/O','DNR','LIV')
AND RODDCARL.DOWNSTART BETWEEN COR.DEPARTCUSTOMER AND COR.ARRIVELANDFILL
AND RODDCARL.DOWNEND BETWEEN COR.DEPARTCUSTOMER AND COR.ARRIVELANDFILL
AND NOT (
		 RODDCARL.DOWNSTART BETWEEN COR.STOPTICKET AND COR.RESTARTTICKET
		AND RODDCARL.DOWNEND BETWEEN COR.STOPTICKET AND COR.RESTARTTICKET
 
        )
        
LEFT JOIN DEV_OCS.ODS.TP_RO_DOWNTIME RODTSARL ON RODTSARL.FK_ROUTEORDER = CO.FK_ROUTEORDER
AND RODTSARL.FK_VEHICLE IS NULL
AND  TLT.UNIQUEID IN ('FFY','FDR','FRN','FYN','FYS')
AND RODTSARL.DOWNSTART BETWEEN COR.DISPATCHED AND COR.ARRIVELANDFILL
AND RODTSARL.DOWNEND BETWEEN COR.DISPATCHED AND COR.ARRIVELANDFILL
AND NOT (
		 RODTSARL.DOWNSTART BETWEEN COR.STOPTICKET AND COR.RESTARTTICKET
		AND RODTSARL.DOWNEND BETWEEN COR.STOPTICKET AND COR.RESTARTTICKET
 
        )
group by ROL.PKEY
) AS "v_0000017686_0000143661");

-- ************************************** RO_LOB_HIERARCHY
CREATE VIEW RO_LOB_HIERARCHY as (SELECT 
  "LOB", 
  "SUBLOB", 
  "SUBLOB_DESC", 
  "ESSBASE_SUBLOB_KEY", 
  "ESSBASE_SUBLOB_DESC" 
FROM (select t2.NAME as LOB
,t1.UNIQUEID as SUBLOB
,t1.NAME as SUBLOB_DESC
,CASE WHEN t1.UNIQUEID = 'RO' THEN 260
        WHEN t1.UNIQUEID = 'ROOR' THEN 275
        WHEN t1.UNIQUEID = 'RORY' THEN 270
        WHEN t1.UNIQUEID = 'ROES' THEN 265
END AS ESSBASE_SUBLOB_KEY
,CASE WHEN t1.UNIQUEID = 'RO' THEN 'Roll Off'
        WHEN t1.UNIQUEID = 'ROOR' THEN 'Roll Off Organics'
        WHEN t1.UNIQUEID = 'RORY' THEN 'Roll Off Recycling'
        WHEN t1.UNIQUEID = 'ROES' THEN 'Roll Off Energy Services'
END AS ESSBASE_SUBLOB_DESC
from DEV_OCS.ODS.TP_SUBLOB t1 
join DEV_OCS.ODS.TP_LOB t2 on t1.FK_LOB = t2.pkey
 where t2.NAME in ('ROLLOFF')
) AS "v_0000017686_0000143690");

-- ************************************** RESI_TRAVEL_TO_DISPOSAL_VW
CREATE VIEW RESI_TRAVEL_TO_DISPOSAL_VW as 

SELECT LANDFILL_PKEY, 

TIMESTAMPDIFF(MINUTE, EVENT_BEFORE_LANDFILL, ARRIVE) TRAVEL_TO_DSPSL_MINUTE, 

TIMESTAMPDIFF(MINUTE, DOWNSTART,DOWNEND) DOWN_TIME,

TIMESTAMPDIFF(MINUTE, LUNCHSTART,LUNCHEND) MEAL_TIME,

CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)

     THEN MEAL_TIME - NVL(DOWN_TIME, 0)

     ELSE MEAL_TIME 

END NET_MEAL_TIME,

CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)

	 THEN DOWN_TIME - NVL(MEAL_TIME,0) 

	 ELSE DOWN_TIME

END NET_DOWN_TIME,

TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0) NET_TRAVEL_TO_DSPS

              

FROM 

MART.RESI_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT T1



LEFT JOIN STG.TP_RO_DOWNTIME ROD

ON ROD.FK_ROUTEORDER = T1.FK_ROUTEORDER 

AND ROD.FK_VEHICLE IS NULL 

AND ROD.DOWNSTART  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE

AND ROD.DOWNEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE 

LEFT JOIN STG.TP_RO_LUNCH RLUNCH

ON RLUNCH.FK_ROUTEORDER = T1.FK_ROUTEORDER 

AND RLUNCH.LUNCHSTART BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE 

AND RLUNCH.LUNCHEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE

AND RLUNCH.FK_VEHICLE IS NULL 

;

-- ************************************** RESI_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT
CREATE VIEW RESI_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT as

SELECT * FROM

(SELECT FK_ROUTEORDER, LANDFILL_PKEY, ARRIVE, EVENT_BEFORE_LANDFILL, ROW_NUMBER () OVER(PARTITION BY LANDFILL_PKEY ORDER BY ARRIVE asc) RN 

FROM

(

SELECT ROL.FK_ROUTEORDER, ROL.PKEY LANDFILL_PKEY , ROL.ARRIVE  , max(EVENT_BEFORE_LANDFILL) EVENT_BEFORE_LANDFILL

FROM STG.TP_RO_LANDFILL  ROL

JOIN MART.RESI_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL EVNTS_BFR

ON EVNTS_BFR.fk_routeorder = ROL.FK_ROUTEORDER 

AND ROL.FK_VEHICLE IS NULL 

AND ROL.ARRIVE >= EVNTS_BFR.EVENT_BEFORE_LANDFILL

GROUP BY ROL.FK_ROUTEORDER, ROL.PKEY  , ROL.ARRIVE

) A

) A1

WHERE A1.RN=1 

;

-- ************************************** RESI_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL
CREATE VIEW RESI_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL as

select FROMYARD EVENT_BEFORE_LANDFILL, fk_routeorder 

from STG.tp_ro_result ros

join STG.tp_routeorder ro

on ro.pkey = ros.fk_routeorder 

AND ROS.FK_VEHICLE IS NULL 

AND ROS.FROMYARD IS NOT NULL

AND RO.ORDERDATE >='2019-01-01'

AND RO.STATUSCODE='CONFIRMED'

join STG.tp_rouTe r 

on r.pkey = ro.fk_route

join STG.tp_lob lob

on lob.pkey = r.fk_lob 

and lob."NAME" ='RESIDENTIAL'



UNION  ALL 



SELECT COR.DEPARTCUSTOMER , CO.FK_ROUTEORDER 

FROM STG.TP_CUSTOMERORDER CO

JOIN STG.TP_ROUTEORDER RO

ON RO.PKEY = CO.FK_ROUTEORDER 

AND RO.ORDERDATE >='2019-01-01'

AND RO.STATUSCODE='CONFIRMED'

JOIN STG.TP_CO_RESULT  COR 

ON COR.FK_VEHICLE IS NULL 

AND COR.FK_CUSTOMERORDER = CO.PKEY 

JOIN STG.TP_ROUTE R 

ON R.PKEY = RO.FK_ROUTE 

JOIN STG.TP_LOB L 

ON L.PKEY =R.FK_LOB

AND L."NAME" ='RESIDENTIAL'



UNION ALL 



SELECT COR.STOPTICKET , CO.FK_ROUTEORDER 

FROM 

STG.TP_CUSTOMERORDER CO

JOIN STG.TP_ROUTEORDER RO

ON RO.PKEY = CO.FK_ROUTEORDER 

AND RO.ORDERDATE >='2019-01-01'

AND RO.STATUSCODE='CONFIRMED'

JOIN STG.TP_CO_RESULT  COR 

ON COR.FK_VEHICLE IS NULL 

AND COR.STOPTICKET IS NOT NULL

AND COR.FK_CUSTOMERORDER = CO.PKEY 

JOIN STG.TP_ROUTE R 

ON R.PKEY = RO.FK_ROUTE 

JOIN STG.TP_LOB L 

ON L.PKEY =R.FK_LOB

AND L."NAME" ='RESIDENTIAL'

;

-- ************************************** RED_VW
CREATE VIEW RED_VW  as
--
-- From OPUS.  Used to hauls per route - original CP code
--
select red.SITE_CD as DepotFacId
	, count(red.rte_num) routes 
	, sum(red.DSPSL_TRIP_CNT) disposal_trips
	, sum(red.total_equivalent_haul_num) eq_hauls
	, cast(sum(red.total_equivalent_haul_num)/count(red.rte_num) as numeric(10,2)) as eq_hauls_per_route_N
from STG.PVW_FCT_DAY_RTE_EXECUTION_DRVR red 
where red.SUB_LOB_CD like 'RO%' 
	and red.RTE_EXECUTION_SVC_DT between $start_date AND $end_date
  and (depotfacid in (select FAC_ID from MART.HAULING_SITE WHERE MARKET_AREA_CD = $MARKET_AREA))
group by DepotFacId;

-- ************************************** pmt_transfer_3p
CREATE VIEW pmt_transfer_3p AS

WITH filtered_rollup AS

( SELECT *

FROM stg.pmt_transfer_rollup

WHERE data_dt BETWEEN 

        get_3p_start_date(

              $num_weeks_3p

            , $start_date

            , $end_date

            , get_3p_end_date($num_weeks_3p, $start_date, $end_date,

                           (SELECT MAX(data_dt) FROM stg.pmt_transfer_rollup))

            ) AND

            get_3p_end_date($num_weeks_3p, $start_date, $end_date,

                            (SELECT MAX(data_dt) FROM stg.pmt_transfer_rollup))

    AND (tons_ext_msw + tons_ext_cd + tons_ext_oth + tons_ext_rms) > 0

    AND UPPER(ROLLUP_TYPE)='W' --Use weekly totals only, E is cumulative and M is monthly



),

    pmt_transfer_exploded AS

(

    SELECT *

    FROM filtered_rollup

    UNPIVOT(third_party FOR waste_type 

        IN (tons_ext_msw, tons_ext_cd, tons_ext_oth, tons_ext_rms)

    )

)

SELECT fac_idu || '_TS' AS fac_id

    , DATE_PART('weekday', data_dt) AS day_of_week

    , CASE

        WHEN waste_type = 'TONS_EXT_CD' THEN 'C&D'

        ELSE UPPER(REGEXP_SUBSTR(waste_type, 'tons_ext_\([[:alnum:]]+\)', 1, 1, 'i',1))

      END AS waste_type

    , AVG(third_party)/6 AS avg_third_party --Average across the weeks and divide the average by 6 (excludes Sundays) to get a daily

FROM pmt_transfer_exploded

GROUP BY fac_id, day_of_week, waste_type

ORDER BY fac_id, day_of_week, waste_type;

-- ************************************** PMT_FACT
CREATE VIEW PMT_FACT as (SELECT 
  "MARKET_AREA_CD", 
  "MARKET_AREA_NM", 
  "DATA_DT", 
  "FAC_IDU", 
  "FAC_ID", 
  "FAC_TYPE", 
  "TOT_TONS_INT", 
  "TOT_TONS_EXT", 
  "TOT_TONS", 
  "TONS_INT_MSW", 
  "TONS_EXT_MSW", 
  "TOT_TONS_MSW", 
  "TONS_INT_CD", 
  "TONS_EXT_CD", 
  "TOT_TONS_CD", 
  "TONS_INT_SPW", 
  "TONS_EXT_SPW", 
  "TOT_TONS_SPW", 
  "TONS_INT_RGC", 
  "TONS_EXT_RGC", 
  "TOT_TONS_RGC", 
  "TONS_INT_RDW", 
  "TONS_EXT_RDW", 
  "TOT_TONS_RDW", 
  "TONS_INT_OTH", 
  "TONS_EXT_OTH", 
  "TOT_TONS_OTH", 
  "TONS_INT_RMS", 
  "TONS_EXT_RMS", 
  "TOT_TONS_RMS" 
FROM (SELECT 
	FCT.MARKET_AREA_CD
	,FCT.MARKET_AREA_NM
	,FCT.DATA_DT
	,FCT.FAC_IDU
	,FCT.FAC_ID
	,FCT.FAC_TYPE
	,FCT.TOT_TONS_INT
	,FCT.TOT_TONS_EXT
	,FCT.TOT_TONS 
	,FCT.TONS_INT_MSW
	,FCT.TONS_EXT_MSW
	,FCT.TOT_TONS_MSW
	,FCT.TONS_INT_CD
	,FCT.TONS_EXT_CD
	,FCT.TOT_TONS_CD
	,FCT.TONS_INT_SPW
	,FCT.TONS_EXT_SPW
	,FCT.TOT_TONS_SPW
	,FCT.TONS_INT_RGC
	,FCT.TONS_EXT_RGC
	,FCT.TOT_TONS_RGC
	,FCT.TONS_INT_RDW
	,FCT.TONS_EXT_RDW
	,FCT.TOT_TONS_RDW
	,FCT.TONS_INT_OTH
	,FCT.TONS_EXT_OTH
	,FCT.TOT_TONS_OTH
	,FCT.TONS_INT_RMS
	,FCT.TONS_EXT_RMS
	,FCT.TOT_TONS_RMS
FROM
(
	SELECT DISTINCT
		HS.MARKET_AREA_CD
		,HS.MARKET_AREA_NM
		,DR.DATA_DT
		,DR.FAC_IDU AS FAC_IDU
		,(DR.FAC_IDU||'_'||'Disposal') as FAC_ID
		,'Disposal' as FAC_TYPE 
		,DR.TOT_TONS_INT
		,DR.TOT_TONS_EXT
		,(DR.TOT_TONS_INT+DR.TOT_TONS_EXT) as TOT_TONS 
		,DR.TONS_INT_MSW
		,DR.TONS_EXT_MSW
		,(DR.TONS_INT_MSW+DR.TONS_EXT_MSW) as TOT_TONS_MSW
		,DR.TONS_INT_CD
		,DR.TONS_EXT_CD
		,(DR.TONS_INT_CD+DR.TONS_EXT_CD) as TOT_TONS_CD
		,DR.TONS_INT_SPW
		,DR.TONS_EXT_SPW
		,(DR.TONS_INT_SPW+DR.TONS_EXT_SPW) as TOT_TONS_SPW
		,DR.TONS_INT_RGC
		,DR.TONS_EXT_RGC
		,(DR.TONS_INT_RGC+DR.TONS_EXT_RGC) as TOT_TONS_RGC
		,DR.TONS_INT_RDW
		,DR.TONS_EXT_RDW
		,(DR.TONS_INT_RDW+DR.TONS_EXT_RDW) as TOT_TONS_RDW
		,NULL as TONS_INT_OTH
		,NULL as TONS_EXT_OTH
		,NULL as TOT_TONS_OTH
		,NULL as TONS_INT_RMS
		,NULL as TONS_EXT_RMS
		,NULL as TOT_TONS_RMS
	FROM DEV_PMT.ODS.PMT_DISPOSAL_ROLLUP DR
	JOIN DEV_ONEWM.MART.DISPOSAL_SITE HS
	ON DR.FAC_IDU = SUBSTR(HS.FAC_ID,1,6)
	WHERE DR.ROLLUP_TYPE = 'M'

  UNION
  
	SELECT DISTINCT
		HS.MARKET_AREA_CD
		,HS.MARKET_AREA_NM
		,DR.DATA_DT
		,DR.FAC_IDU AS FAC_IDU
		,(DR.FAC_IDU||'_'||'MRF') as FAC_ID
		,'MRF' as FAC_TYPE 
		,DR.TOT_TONS_INT
		,DR.TOT_TONS_EXT
		,(DR.TOT_TONS_INT+DR.TOT_TONS_EXT) as TOT_TONS 
		,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
	FROM DEV_PMT.ODS.PMT_RECYCLING_ROLLUP DR
	JOIN DEV_ONEWM.MART.DISPOSAL_SITE HS
	ON DR.FAC_IDU = SUBSTR(HS.FAC_ID,1,6)
	WHERE DR.ROLLUP_TYPE = 'M'

  UNION
  
	SELECT DISTINCT
		HS.MARKET_AREA_CD
		,HS.MARKET_AREA_NM
		,DR.DATA_DT
		,DR.FAC_IDU AS FAC_IDU
		,(DR.FAC_IDU||'_'||'TS') as FAC_ID
		,'TS' as FAC_TYPE 
		,DR.TOT_TONS_INT
		,DR.TOT_TONS_EXT
		,(DR.TOT_TONS_INT+DR.TOT_TONS_EXT) as TOT_TONS
		,DR.TONS_INT_MSW
		,DR.TONS_EXT_MSW
		,(DR.TONS_INT_MSW+DR.TONS_EXT_MSW) as TOT_TONS_MSW
		,DR.TONS_INT_CD
		,DR.TONS_EXT_CD
		,(DR.TONS_INT_CD+DR.TONS_EXT_CD) as TOT_TONS_CD
		,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
		,DR.TONS_INT_OTH
		,DR.TONS_EXT_OTH
		,(DR.TONS_INT_OTH+DR.TONS_EXT_OTH) as TOT_TONS_OTH
		,DR.TONS_INT_RMS
		,DR.TONS_EXT_RMS
		,(DR.TONS_INT_RMS+DR.TONS_EXT_RMS) as TOT_TONS_RMS
	FROM DEV_PMT.ODS.PMT_TRANSFER_ROLLUP DR
	JOIN DEV_ONEWM.MART.DISPOSAL_SITE HS
	ON DR.FAC_IDU = SUBSTR(HS.FAC_ID,1,6)
	WHERE DR.ROLLUP_TYPE = 'M'
) FCT
WHERE FCT.TOT_TONS_INT > 0 AND FCT.TOT_TONS_EXT > 0
) AS "v_0000017686_0000143679");

-- ************************************** PMT_DISPOSAL_3P
CREATE VIEW PMT_DISPOSAL_3P as

WITH filtered_rollup AS

( SELECT *

FROM stg.pmt_disposal_rollup

WHERE data_dt BETWEEN 

        get_3p_start_date(

              $num_weeks_3p

            , $start_date

            , $end_date

            , get_3p_end_date($num_weeks_3p, $start_date, $end_date,

                           (SELECT MAX(data_dt) FROM stg.pmt_disposal_rollup))

            ) AND

            get_3p_end_date($num_weeks_3p, $start_date, $end_date,

                            (SELECT MAX(data_dt) FROM stg.pmt_disposal_rollup))

    AND (tons_ext_msw + tons_ext_cd + tons_ext_spw + tons_ext_rgc + tons_ext_rdw) > 0

    AND UPPER(ROLLUP_TYPE)='W' --Use weekly totals only, E is cumulative and M is monthly

),

    pmt_disposal_exploded AS

(

    SELECT *

    FROM filtered_rollup

    UNPIVOT(third_party FOR waste_type 

        IN (tons_ext_msw, tons_ext_cd, tons_ext_spw, tons_ext_rgc, tons_ext_rdw)

    )

)

SELECT fac_idu || '_Disposal'        AS fac_id

    , DATE_PART('weekday', data_dt) AS day_of_week

    , CASE

        WHEN waste_type = 'TONS_EXT_CD' THEN 'C&D'

        ELSE UPPER(REGEXP_SUBSTR(waste_type, 'tons_ext_\([[:alnum:]]+\)', 1, 1, 'i',1))

      END AS waste_type

    , AVG(third_party)/6 AS avg_third_party --Average across the weeks and divide the average by 6 (excludes Sundays) to get a daily average

FROM pmt_disposal_exploded

GROUP BY fac_id, day_of_week, waste_type

ORDER BY fac_id, day_of_week, waste_type;

-- ************************************** OCS_DISPOSAL_COST
CREATE VIEW OCS_DISPOSAL_COST AS

SELECT

  SUBSTRING(DispFacID,1,6) as FAC_ID,

  SUBSTRING(DispFacID,8) as FAC_TYPE,

  WASTE_TYPE,

  AVG(COST/ TONS) AS DISPOSAL_COST

FROM

(

  select 1 as SRC, DispFacID, WASTE_TYPE, COST, TONS, INACTIVE, SERVICE_DT, INTERCOMPANY from MART.COMRES_FACT

  UNION ALL

  select 2, DispFacID, WASTE_TYPE, COST, TONS, INACTIVE, SERVICE_DT, INTERCOMPANY from MART.ROLLOFF_FACT

)

WHERE (INACTIVE IS NULL OR     INACTIVE     = '')	-- currently stored as empty string

AND   (INTERCOMPANY IS NULL OR INTERCOMPANY = '')	-- currently stored as empty string

AND COST IS NOT NULL

AND TONS IS NOT NULL

AND TONS > 0 AND FAC_ID iS NOT NULL

AND SERVICE_DT  >= current_Date - 90

AND waste_type IN ( 'MSW', 'C&D', 'SPW' )

GROUP BY 1,2,3;

-- ************************************** MODEL_SWAP_HEADER
CREATE VIEW MODEL_SWAP_HEADER as

SELECT 21 AS SWAP_HEADER_ID, 'BFI_SWAP' as SWAP_NAME, 20000 as SWAP_QTY, 999999 as SHORTFALL_PENALTY_PER_TON, 999999 as SHORTFALL_PENALTY_REPORT where 0=1;

-- ************************************** MODEL_SWAP_DETAIL
CREATE VIEW MODEL_SWAP_DETAIL as

SELECT 21 AS SWAP_HEADER_ID, 'BFI_SWAP' as SWAP_NAME, 'S01000' AS DEPOT_FAC_ID, 'S02000' as DISP_FAC_ID, null as LOB, 'MSW' as WASTE_TYPE where 0=1;

-- ************************************** MODEL_RUN_PARAMETERS_FLAT
CREATE VIEW MODEL_RUN_PARAMETERS_FLAT AS

--

-- Create a flattened view of Model run parameters which unpacks the JSON

--

SELECT ENO_ID, RUN_DTM, USER_NM

, PARAMETER_JSON:"MARKET_AREA:"::VARCHAR(10) AS MARKET_AREA

, PARAMETER_JSON:"Start_Date:"::VARCHAR(10)  AS START_DATE   -- was going to make this a date but folks can enter invalid dates

, PARAMETER_JSON:"END_DATE:"::VARCHAR(10)  AS END_DATE		-- was going to make this a date but folks can enter invalid dates

, PARAMETER_JSON:"RANGE:"::VARCHAR(10) AS RANGE

, PARAMETER_JSON:"LAMBDA:"::STRING AS LAMBDA

, PARAMETER_JSON:"USERID:"::VARCHAR(256) AS USERID

, PARAMETER_JSON:"OPTIMIZE_EANDR_ONLY:"::STRING AS OPTIMIZE_EANDR_ONLY

, PARAMETER_JSON:"TMS_WEEKS:"::STRING AS TMS_WEEKS

FROM MART.model_run_parameters ;

-- ************************************** MBP_DISPOSAL_COST
CREATE VIEW MBP_DISPOSAL_COST AS

SELECT 

  SUBSTR(MD.ACTIVE_LANDFILL_MRF_3P_SITE,1,6) AS FAC_ID,

  CASE WHEN SUBSTR(MD.ACTIVE_LANDFILL_MRF_3P_SITE,10,1) = '_' THEN 

       CASE WHEN SUBSTR(MD.ACTIVE_LANDFILL_MRF_3P_SITE,8,2) = 'LF' THEN 'Disposal' ELSE SUBSTR(MD.ACTIVE_LANDFILL_MRF_3P_SITE,8,2)  END  

      ELSE SUBSTR(MD.ACTIVE_LANDFILL_MRF_3P_SITE,8,3) END AS FAC_TYPE ,

  MWM.INFERRED_WASTETYPE AS WASTE_TYPE,

  AVG(MD.COLUMN__EXPERT_CUST_PRICE) AS DISPOSAL_COST

FROM 

(

  SELECT DISTINCT ACTIVE_LANDFILL_MRF_3P_SITE,REPLACE(COLUMN__EXPERT_CUST_PRICE,',','')  AS COLUMN__EXPERT_CUST_PRICE, WASTE_STREAM_DS FROM 

  DEV_ONEWM.STG.MBP_DIRECT 



) MD

JOIN DEV_ONEWM.MART.MBP_WASTETYPE_MAPPING MWM

    ON MD.WASTE_STREAM_DS = MWM.WASTE_STREAM_DS WHERE FAC_ID != 'All' and FAC_TYPE IN ('TS','MRF','Disposal') AND WASTE_TYPE != 'OTHER'

GROUP BY 1,2,3 having AVG(MD.COLUMN__EXPERT_CUST_PRICE) > 0;

-- ************************************** MARKET_AREA_SITE_PROXIMITY
CREATE VIEW MARKET_AREA_SITE_PROXIMITY as

SELECT

  HAVERSINE(HS.LATITUDE, HS.LONGITUDE, DS.LATITUDE, DS.LONGITUDE)*(0.62) AS DIST_MILES,

  HS.FAC_ID HAULING_FAC_ID,

  DS.FAC_ID DISPOSAL_FAC_ID

FROM MART.HAULING_SITE HS

CROSS JOIN MART.DISPOSAL_SITE DS

WHERE DS.fac_type in ('Disposal','TS')

    AND UPPER(DS.ACTIVE_FLAG) = 'A'

	AND HS.MARKET_AREA_CD = $MARKET_AREA

	AND DIST_MILES <= $RANGE

    AND (DS.LATITUDE !=0 AND DS.LONGITUDE!=0)

    AND (DS.LATITUDE IS NOT NULL AND DS.LONGITUDE IS NOT NULL)

;

-- ************************************** LOCATION_HUB_VW
CREATE VIEW LOCATION_HUB_VW as (SELECT 
  "FAC_ID", 
  "LOCATION_NAME", 
  "LONGITUDE", 
  "LATITUDE", 
  "ADDRESS_1", 
  "ADDRESS_2", 
  "CITY_NM", 
  "STATE_CD", 
  "ZIP_CD", 
  "COUNTRY_CD", 
  "COUNTY_NM", 
  "RNK" 
FROM (select * from 
     (select LOCATION_CD as FAC_ID, LOCATION_NAME, 
            case when MANUAL_LONGITUDE < 0 AND MANUAL_LONGITUDE IS NOT NULL THEN MANUAL_LONGITUDE ELSE LONGITUDE END as LONGITUDE,
            case when MANUAL_LATITUDE  > 0 AND MANUAL_LATITUDE  IS NOT NULL THEN MANUAL_LATITUDE ELSE LATITUDE END as LATITUDE,
      ADDRESS_1,ADDRESS_2,CITY_NM,STATE_CD,ZIP_CD,COUNTRY_CD ,COUNTY_NM, row_number() over (partition by LOCATION_CD order by longitude desc nulls last) as rnk
      FROM DEV_TMS.ODS.WML_LH_LOCATION ) t1 where rnk=1
) AS "v_0000017686_0000143670");

-- ************************************** LOB_HIERARCHY
CREATE VIEW LOB_HIERARCHY as (SELECT 
  "LOB", 
  "SUBLOB", 
  "SUBLOB_DESC", 
  "INFERRED_WASTETYPE" 
FROM (select t2.NAME as LOB, t1.UNIQUEID as SUBLOB, t1.NAME as SUBLOB_DESC, t3.INFERRED_WASTETYPE  
from DEV_OCS.ODS.TP_SUBLOB t1 
join  DEV_OCS.ODS.TP_LOB t2 on t1.FK_LOB = t2.pkey
left join DEV_ONEWM.MART.comres_wastetype_mapping t3
on t1.uniqueid = t3.SUBLOB where t2.NAME in ('COMMERCIAL','RESIDENTIAL')
) AS "v_0000017686_0000143757");

-- ************************************** LH_LIST_WASTE_TYPE
CREATE VIEW LH_LIST_WASTE_TYPE

as select           'MSW' as WASTE_TYPE_ID, 'Municiapl Solid Waste' as WASTE_TYPE_DESC

      union all SELECT  'C&D', 'Contruction and Demolition' union all

            SELECT 'SPW', 'Special Waste';

-- ************************************** LH_LIST_WASTE_ACCEPTED_FLAG
CREATE VIEW LH_LIST_WASTE_ACCEPTED_FLAG

as select 'Y' as ACCEPTED_FLAG, 'Accepted' as ACCEPTED_FLAG_DESC union all 

          select 'N' , 'No' union all 

          select 'U' , 'Unknown';

-- ************************************** LH_LIST_VOLUME_CONSTRAINTS
CREATE VIEW LH_LIST_VOLUME_CONSTRAINTS as
select 'Operational' VOLUME_CONSTRAINTS
union all
select 'Regulatory'
union all 
select 'Strategic';

-- ************************************** LH_LIST_TIME_HORIZON
CREATE VIEW LH_LIST_TIME_HORIZON as
select 'Hourly' TIME_HORIZON_NM
union all select 'Daily'
union all select 'Monthly'
union all select 'Quarterly'
union all select 'Yearly';

-- ************************************** LH_LIST_METHOD_TYPE
CREATE VIEW LH_LIST_METHOD_TYPE as

select 'All collected waste must go' union all

select 'All collected waste must NOT go' union all

select 'Minimum collected waste must go (tons)' union all

select 'Maximum collected waste limited to (tons)' union all

select 'All collected waste has a special rate' union All

select 'Destination may only accept';

-- ************************************** LH_LIST_LOB
CREATE VIEW LH_LIST_LOB as

select  'COMMERCIAL' LOB union all

select  'RESIDENTIAL' LOB union all

select  'ROLLOFF';

-- ************************************** LH_LIST_GIS_COUNTY_VW
CREATE VIEW LH_LIST_GIS_COUNTY_VW
as
select distinct COUNTRY_CD,STATE_NM,COUNTY_NM,STATE_CD,MARKET_AREA_NM,MARKET_AREA_CD from STG.LH_LIST_GIS;

-- ************************************** LH_LIST_GIS_CITY_VW
CREATE VIEW LH_LIST_GIS_CITY_VW
as
select distinct COUNTRY_CD,CITY_NM,STATE_NM,STATE_CD,MARKET_AREA_NM,MARKET_AREA_CD from STG.LH_LIST_GIS;

-- ************************************** LH_LIST_FLOW_CONTROL_RULE_SRC
CREATE VIEW LH_LIST_FLOW_CONTROL_RULE_SRC
as 
select 'County' as SRC union all
select 'Hauling Site' as SRC union all
select 'OCS Code' as SRC union all --added ocs Code
select 'City' as SRC union all
--select 'Customer' as SRC --removed customer
--added state
select 'State' as SRC;

-- ************************************** LH_LIST_FLOW_CONTROL_RULE_DEST
CREATE VIEW LH_LIST_FLOW_CONTROL_RULE_DEST
as 
select 'County' as DEST union all
select 'City' as DEST union all
select 'Disposal Site' as DEST union all
--added state
select 'State' as DEST;

-- ************************************** LF_DISPOSAL_COSTS
CREATE VIEW LF_DISPOSAL_COSTS as (SELECT 
  "FAC_ID", 
  "BU_ID", 
  "LOB", 
  "NON_DEPLETION_DISPOSAL_COST", 
  "DEPLETION_DISPOSAL_COST", 
  "TOTAL_DISPOSAL_VOLUME", 
  "NON_DEPLETION_DCPT", 
  "DEPLETION_DCPT", 
  "DCPT" 
FROM (SELECT RFF.FAC_IDU||'_Disposal' as FAC_ID
,BU_ID
,LOB
,NON_DEPLETION_DISPOSAL_COST
,DEPLETION_DISPOSAL_COST
,TOTAL_DISPOSAL_VOLUME
,NON_DEPLETION_DISPOSAL_COST/(CASE WHEN TOTAL_DISPOSAL_VOLUME = 0 THEN NULL ELSE TOTAL_DISPOSAL_VOLUME END) AS NON_DEPLETION_DCPT
,DEPLETION_DISPOSAL_COST/(CASE WHEN TOTAL_DISPOSAL_VOLUME = 0 THEN NULL ELSE TOTAL_DISPOSAL_VOLUME END) AS DEPLETION_DCPT
,(NVL(NON_DEPLETION_DCPT,0)+NVL(DEPLETION_DCPT,0)) AS DCPT
FROM
(
  SELECT
  ORGANIZATION AS BU_ID
  ,'LF' LOB
  ,SUM(D500_DISPOSAL_FEES_AND_TAXES +
      D600_MAINTENANCE_LUBRICANTS +
      D600_MAINTENANCE_PARTS_SUPPLIES +
      D600_A524000_PRIMARY_SHOP_COSTS_THIRD_PARTY_REPAIRS +
      D600_A524900_PRIMARY_SHOP_COSTS_OTHER_THIRD_PARTY_MAINTENANCE +
      D600_MAINTENANCE_TIRES +
      D600_CONTRACT_LABOR +
      D600_A514000_PRIMARY_SHOP_COSTS_EMPLOYER_401K_MATCHING +
      D600_A514950_PRIMARY_SHOP_COSTS_PENSION_EXPENSE_UNION +
      D600_PAYROLL_TAX_EXPENSE +
      D600_WAGES_HOURLY +
      D600_WAGES_OVERTIME +
      D600_FUEL +
      D780_A571100_LANDFILL_ROYALTIES_AIRSPACE_HOST_COMMUNITY_FEES +
      D780_A571300_LANDFILL_ROYALTIES_AIRSPACE_LF_LEASE_CONTINGENT_PAYMENTS +
      D780_ROYALTIES
  ) AS NON_DEPLETION_DISPOSAL_COST
  ,SUM(D780_A704000_LANDFILL_ROYALTIES_AIRSPACE_NON143_AIRSPACE_AMORTIZATION +
      D780_A704100_LANDFILL_ROYALTIES_AIRSPACE_LF_CAPPING_AMORTIZATION +
      D780_A704400_LANDFILL_ROYALTIES_AIRSPACE_LF_CLOS_POST_CLOS_AMORTIZATION
  ) AS DEPLETION_DISPOSAL_COST
  ,SUM(TOTAL_EXTERNAL_TONS + TOTAL_INTERNAL_TONS) AS TOTAL_DISPOSAL_VOLUME
  FROM DEV_ESSBASE.ODS.ESSBASE_DISPOSAL_COST t1
  WHERE to_date('01-'||TIME,'DD-MON-YY') >= add_months(current_date(),-12)
  GROUP BY BU_ID, 'LF'
) DCPT
LEFT JOIN
(
  SELECT DISTINCT FAC_BUS_UNIT_IDU, FAC_IDU FROM DEV_CORPDB.ODS.RDN2_FAC_FULL
) RFF
ON DCPT.BU_ID = RFF.FAC_BUS_UNIT_IDU
) AS "v_0000017686_0000143785");

-- ************************************** HAULING_SITE_SATURDAY_FLEET_CAPACITY
CREATE VIEW HAULING_SITE_SATURDAY_FLEET_CAPACITY as (SELECT 
  "FAC_ID", 
  "SUBLOB", 
  "WEEK_DAY_CAPACITY", 
  "SATURDAY_CAPACITY", 
  "PERCENTAGE_HOURS_ON_SAT" 
FROM (with WEEKDAYS_SATURDAYS_CNT_IN_YEAR AS
(
SELECT SUM(CASE WHEN dayname(CALNDR_DT) IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri') THEN 1 ELSE 0 END) WEEK_DAYS,
       SUM(CASE WHEN dayname(CALNDR_DT) IN ('Sat') THEN 1 ELSE 0 END) SAT_DAYS
from DEV_ONEWM.STG.DIM_DT_CALNDR_DAY 
where CALNDR_DT between current_date - 366 and current_date - 1
)

SELECT RO_Leave_Yard.HAULING_SITE FAC_ID,  RO_Leave_Yard.sublob,
SUM  (CASE WHEN dayname(RO_Leave_Yard.service_dt) IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri')
     THEN (DATEDIFF(MINUTE , RO_Leave_Yard.event_start , RO_Arrive_Yard.event_start))
     END)/(select WEEK_DAYS from WEEKDAYS_SATURDAYS_CNT_IN_YEAR)
     WEEK_DAY_CAPACITY ,
SUM  (CASE WHEN dayname(RO_Leave_Yard.service_dt) IN ('Sat')
     THEN (DATEDIFF(MINUTE , RO_Leave_Yard.event_start , RO_Arrive_Yard.event_start))
     END)/(select SAT_DAYS from WEEKDAYS_SATURDAYS_CNT_IN_YEAR)
     SATURDAY_CAPACITY ,
    ((SATURDAY_CAPACITY/NULLIF(WEEK_DAY_CAPACITY,0))*100) PERCENTAGE_HOURS_ON_SAT
FROM DEV_ONEWM.MART.co_events RO_Leave_Yard
join DEV_ONEWM.MART.co_events RO_Arrive_Yard
on RO_Leave_Yard.ro_key = RO_Arrive_Yard.ro_key
and RO_Leave_Yard.event_type = 'Leave Yard'
and RO_Arrive_Yard.event_type = 'Arrive Yard'
WHERE RO_Leave_Yard.service_dt between  current_date - 366 and current_date -1 
group by RO_Leave_Yard.HAULING_SITE, RO_Leave_Yard.sublob
) AS "v_0000017686_0000143927");

-- ************************************** HAULING_SITE
CREATE VIEW HAULING_SITE as (SELECT 
  "FAC_ID", 
  "FAC_TYPE", 
  "FAC_NAME", 
  "FAC_SHORT_NM", 
  "ACTIVE_FLAG", 
  "MARKET_AREA_CD", 
  "MARKET_AREA_NM", 
  "WM_OWNED_FLAG", 
  "LATITUDE", 
  "LONGITUDE", 
  "ADDRESS_1", 
  "ADDRESS_2", 
  "CITY_NM", 
  "STATE_CD", 
  "ZIP_CD", 
  "COUNTRY_CD", 
  "COUNTY_NM", 
  "SOURCE", 
  "LAST_UPDATED_DTM", 
  "LAST_UPDATED_USER", 
  "MONDAY_OPEN_AT", 
  "MONDAY_CLOSE_AT", 
  "TUESDAY_OPEN_AT", 
  "TUESDAY_CLOSE_AT", 
  "WEDNESDAY_OPEN_AT", 
  "WEDNESDAY_CLOSE_AT", 
  "THURSDAY_OPEN_AT", 
  "THURSDAY_CLOSE_AT", 
  "FRIDAY_OPEN_AT", 
  "FRIDAY_CLOSE_AT", 
  "SATURDAY_OPEN_AT", 
  "SATURDAY_CLOSE_AT", 
  "SUNDAY_OPEN_AT", 
  "SUNDAY_CLOSE_AT", 
  "GEO_CITY_NM", 
  "GEO_COUNTY_NM", 
  "GEO_STATE_CD", 
  "GEO_ZIP_CD" 
FROM (select
coalesce( t1.FAC_ID, t2.FAC_ID) as FAC_ID,
coalesce( t1.FAC_TYPE, t2.FAC_TYPE) as FAC_TYPE,
coalesce( t1.FAC_NAME, t2.FAC_NAME) as FAC_NAME,
t1.FAC_SHORT_NM as FAC_SHORT_NM,
coalesce( t1.ACTIVE_FLAG, t2.ACTIVE_FLAG) as ACTIVE_FLAG,
coalesce( t1.MARKET_AREA_CD, t2.MARKET_AREA_CD) as MARKET_AREA_CD,
coalesce( t1.MARKET_AREA_NM, t2.MARKET_AREA_NM) as MARKET_AREA_NM,
coalesce( t1.WM_OWNED_FLAG, t2.WM_OWNED_FLAG) as WM_OWNED_FLAG,
coalesce( t1.LATITUDE, T2.LATITUDE) as LATITUDE,
coalesce( t1.LONGITUDE, t2.LONGITUDE) as LONGITUDE,
coalesce( t1.ADDRESS_1, T2.ADDRESS_1) as ADDRESS_1,
case when t1.FAC_ID is not null then t1.ADDRESS_2 else t2.ADDRESS_2 end as ADDRESS_2,
coalesce( t1.CITY_NM, t2.CITY_NM) as CITY_NM,
coalesce( t1.STATE_CD, T2.STATE_CD) as STATE_CD,
coalesce( t1.ZIP_CD, T2.ZIP_CD) as ZIP_CD,
coalesce( t1.COUNTRY, t2.COUNTRY_CD) as COUNTRY_CD,
coalesce( t1.COUNTY_NM, t2.COUNTY_NM) AS COUNTY_NM,
case when t1.FAC_ID is not null then 'LH' else 'MART' end as SOURCE,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
Monday_OPEN_AT,
Monday_CLOSE_AT,
Tuesday_OPEN_AT,
Tuesday_CLOSE_AT,
Wednesday_OPEN_AT,
Wednesday_CLOSE_AT,
Thursday_OPEN_AT,
Thursday_CLOSE_AT,
Friday_OPEN_AT,
Friday_CLOSE_AT,
Saturday_OPEN_AT,
Saturday_CLOSE_AT,
Sunday_OPEN_AT,
Sunday_CLOSE_AT,
t1.GEO_CITY_NM,
t1.GEO_COUNTY_NM,
t1.GEO_STATE_CD,
t1.GEO_ZIP_CD
from DEV_ONEWM.MART.BMT_HAULING_SITE t1
left outer join DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW FH
on t1.FAC_ID = FH.FAC_ID --and FH.FAC_TYPE=t1.FAC_TYPE
full outer join DEV_ONEWM.MART.CORP_HAULING_SITE t2 on T1.FAC_ID = T2.FAC_ID
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D'
) AS "v_0000017686_0000143700");

-- ************************************** GEOCODE_RESULTS
CREATE VIEW GEOCODE_RESULTS as SELECT * from

  (select row_number() over  (partition by LATITUDE, LONGITUDE order by INSERT_DTM desc) as rnk, *

   from STG.GEOCODE_RESULTS_RAW )

where rnk=1;

-- ************************************** FACILITY_VOLUME_CONSTRAINT_ADJUST_FACTOR
CREATE VIEW FACILITY_VOLUME_CONSTRAINT_ADJUST_FACTOR AS 
select cnst.FAC_ID, 
       cnst.FAC_TYPE, 
case when VOLUME_TIME_UNIT = 'Daily'     then 1
     when VOLUME_TIME_UNIT = 'Monthly'   then 30 - (FACILITY_CLOSED_DAYS_IN_SCOPE*4.3)
     when VOLUME_TIME_UNIT = 'Quarterly' then 90 - (FACILITY_CLOSED_DAYS_IN_SCOPE*13)
     when VOLUME_TIME_UNIT = 'Yearly'    then 90 - (FACILITY_CLOSED_DAYS_IN_SCOPE*52)
end volume_adjust_factor 
from
(select FAC_ID, FAC_TYPE,VOLUME_TIME_UNIT 
from mart.LH_SITE s 
) cnst
left join 
(select FAC_ID, FAC_TYPE, COUNT(distinct Closed_day) FACILITY_CLOSED_DAYS_IN_SCOPE
from mart.BMT_FACILITY_CLOSED_DAYS_VW cls
GROUP BY 1,2) clsd
on cnst.FAC_ID=clsd.FAC_ID
and cnst.FAC_TYPE = clsd.FAC_TYPE;

-- ************************************** FACILITY_TURN_TIMES_VW
CREATE VIEW FACILITY_TURN_TIMES_VW

as select UNIQUEID as FAC_ID, avg(DSPSL_CYCLE_MINUTE_CNT) as CYCLE_MINUTE_CNT from STG.O3_FACILITY_TURN_TIMES group by UNIQUEID;

-- ************************************** FACILITY_OPERATION_DAYS_IN_SCOPE
CREATE VIEW FACILITY_OPERATION_DAYS_IN_SCOPE AS 
select ttl_days.FAC_ID, ttl_days.FAC_TYPE, DAYS_IN_SCOPE - nvl(FACILITY_CLOSED_DAYS_IN_SCOPE,0) FACILITY_OPERATIONAL_DAYS_IN_SCOPE
from
(select FAC_ID, FAC_TYPE, COUNT(CALNDR_DT) DAYS_IN_SCOPE
from "STG"."DIM_DT_CALNDR_DAY" DT_DIM
join mart.LH_SITE s 
on CALNDR_DT  between '2020-01-01' and '2020-03-05'
GROUP BY 1,2) ttl_days
left join 
(select FAC_ID, FAC_TYPE, COUNT(CALNDR_DT) FACILITY_CLOSED_DAYS_IN_SCOPE
from "STG"."DIM_DT_CALNDR_DAY" DT_DIM
join mart.BMT_FACILITY_CLOSED_DAYS_VW cls
on DT_DIM.DAY_WEEK_NM  = cls.Closed_day
and CALNDR_DT  between '2020-01-01' and '2020-03-05'
GROUP BY 1,2) clsd
on ttl_days.FAC_ID=clsd.FAC_ID
and ttl_days.FAC_TYPE = clsd.FAC_TYPE;

-- ************************************** FACILITY_OPERATING_HOURS_VW
CREATE VIEW FACILITY_OPERATING_HOURS_VW as 
select 

FAC_ID 				,
FAC_NAME 			,
Monday_OPEN_AT 		,
Monday_CLOSE_AT 	,
Tuesday_OPEN_AT 	,
Tuesday_CLOSE_AT 	,
Wednesday_OPEN_AT 	,
Wednesday_CLOSE_AT  ,
Thursday_OPEN_AT 	,
Thursday_CLOSE_AT 	,
Friday_OPEN_AT 		,
Friday_CLOSE_AT 	,
Saturday_OPEN_AT 	,
Saturday_CLOSE_AT 	,
Sunday_OPEN_AT 		,
Sunday_CLOSE_AT 	

from
(
select
FAC_ID 				,
FAC_NAME 			,
Monday_OPEN_AT 		,
Monday_CLOSE_AT 	,
Tuesday_OPEN_AT 	,
Tuesday_CLOSE_AT 	,
Wednesday_OPEN_AT 	,
Wednesday_CLOSE_AT  ,
Thursday_OPEN_AT 	,
Thursday_CLOSE_AT 	,
Friday_OPEN_AT 		,
Friday_CLOSE_AT 	,
Saturday_OPEN_AT 	,
Saturday_CLOSE_AT 	,
Sunday_OPEN_AT 		,
Sunday_CLOSE_AT 	,
DATA_COLLCTION_ADD_DELETE_UPDATE,
row_number() over (partition by fac_id order by last_updated_dtm desc nulls last) as rnk
from stg.FACILITY_OPERATING_HOURS_BMT_DATA_COLLCTN
)  where rnk=1 and DATA_COLLCTION_ADD_DELETE_UPDATE != 'D'
;

-- ************************************** ENO_GREENFLOW_HAULING_CAPACITY
CREATE VIEW ENO_GREENFLOW_HAULING_CAPACITY AS
SELECT
  Z.ENO_ID
  ,Z.ENO_RESULTSOURCE
  ,Z.DEPOT_FAC_ID
  ,Z.DISP_FAC_SHORT_NM
  ,Z.LOB
  ,Z.SUBLOB
  ,Z.NBR_OF_TRUCKS
  ,Z.HRS_PER_DAY
  ,Z.TRUCK_CAPACITY_HOURS
  ,Z.TOTAL_COLLECTION_HRS
  ,Z.MIN_HRS
  ,Z.MAX_HRS
  ,Z.SOLUTION_HRS
  ,CASE WHEN (NVL(Z.MAX_HRS,0) - NVL(Z.SOLUTION_HRS,0)) > 0 THEN (NVL(Z.MAX_HRS,0) - NVL(Z.SOLUTION_HRS,0)) ELSE 0 END AS REMAINING_CAPACITY
  ,CASE WHEN (NVL(Z.SOLUTION_HRS,0) - NVL(Z.MAX_HRS,0)) > 0 THEN (NVL(Z.SOLUTION_HRS,0) - NVL(Z.MAX_HRS,0)) ELSE 0 END AS OVER_USE
  ,CASE WHEN (NVL(Z.MIN_HRS,0) - NVL(Z.SOLUTION_HRS,0)) > 0 THEN (NVL(Z.MIN_HRS,0) - NVL(Z.SOLUTION_HRS,0)) ELSE 0 END AS UNDERUSE
FROM
(
  SELECT
  EGS.ENO_ID
  ,EGS.ENO_RESULTSOURCE
  ,EGS.DEPOT_FAC_ID AS DEPOT_FAC_ID
  ,NVL(MF.FAC_SHORT_NM,MF.FAC_NAME) AS DISP_FAC_SHORT_NM
  ,SH.LOB AS LOB
  ,EGS.SUBLOB
  ,HSC.TRUCK_CNT AS NBR_OF_TRUCKS
  ,NVL(HSC.HOURS_PER_TRUCK,10) AS HRS_PER_DAY
  ,MHP.TRUCK_CAPACITY as TRUCK_CAPACITY_HOURS
  ,MHP.TOTAL_COLLECTION_HRS AS TOTAL_COLLECTION_HRS
  ,MHP.MIN_HRS AS MIN_HRS
  ,MHP.MAX_HRS AS MAX_HRS
  ,SUM(TRIP_HRS) AS SOLUTION_HRS
  FROM STG.ENO_GREENFLOW_SOLUTION_RESULTS EGS
  JOIN MART.model_hrs_cap_PERSISTENT MHP
  ON EGS.DEPOT_FAC_ID = MHP.FAC_ID
  AND EGS.SUBLOB = MHP.SUBLOB
  AND EGS.ENO_ID = MHP.ENO_ID
  LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MF
  ON MHP.FAC_ID = MF.FAC_ID
  AND MHP.ENO_ID = MF.ENO_ID
  LEFT JOIN MART.SUBLOB_HIERARCHY SH
  ON MHP.SUBLOB = SH.SUBLOB
  LEFT JOIN MART.HAULING_SITE_CAPACITY HSC
  ON HSC.FAC_ID = SUBSTR(MHP.FAC_ID,1,6)
  AND HSC.SUBLOB = MHP.SUBLOB
  GROUP BY
   EGS.ENO_ID
  ,EGS.ENO_RESULTSOURCE
  ,EGS.DEPOT_FAC_ID
  ,NVL(MF.FAC_SHORT_NM,MF.FAC_NAME)
  ,SH.LOB
  ,EGS.SUBLOB
  ,HSC.TRUCK_CNT
  ,HSC.HOURS_PER_TRUCK
  ,MHP.TRUCK_CAPACITY
  ,MHP.TOTAL_COLLECTION_HRS
  ,MHP.MIN_HRS
  ,MHP.MAX_HRS
) Z
;

-- ************************************** ENO_GREENFLOW_FLOW_OUT
CREATE VIEW ENO_GREENFLOW_FLOW_OUT as
SELECT
  T1.ENO_ID
  ,T1.ROWNUM AS COLLECTION_POINT_ID
  ,T1.FROM_TYPE
  ,EGS.LOB
  ,T1.LOB as SUBLOB
  ,T1.WASTE_TYPE
--DEPOT
  ,T1.SITE_ID                 AS DEPOT_FAC_ID
  ,EGS.B_DEPOT_FAC_TYPE       AS DEPOT_FAC_TYPE
  ,EGS.B_DEPOT_FAC_NAME       AS DEPOT_FAC_NAME
  ,EGS.B_DEPOT_FAC_SHORT_NM   AS DEPOT_FAC_SHORT_NM
  ,EGS.B_DEPOT_WM_OWNED_FLAG  AS DEPOT_WM_OWNED_FLAG
  ,EGS.B_DEPOT_LATITUDE       AS DEPOT_LATITUDE
  ,EGS.B_DEPOT_LONGITUDE      AS DEPOT_LONGITUDE
  ,EGS.B_DEPOT_GEO_CITY_NM    AS DEPOT_GEO_CITY_NM
  ,EGS.B_DEPOT_GEO_COUNTY_NM  AS DEPOT_GEO_COUNTY_NM
  ,EGS.B_DEPOT_GEO_STATE_CD   AS DEPOT_GEO_STATE_CD
  ,EGS.B_DEPOT_GEO_ZIP_CD     AS DEPOT_GEO_ZIP_CD
--DISPOSAL
  ,T1.TO_ID AS DISP_FAC_ID
  ,MFP2.FAC_TYPE AS DISP_FAC_TYPE
  ,MFP2.FAC_NAME AS DISP_FAC_NAME
  ,NVL(MFP2.FAC_SHORT_NM, MFP2.FAC_NAME) AS DISP_FAC_SHORT_NM
  ,MFP2.WM_OWNED_FLAG AS DISP_WM_OWNED_FLAG
  ,MFP2.LATITUDE AS DISP_LATITUDE
  ,MFP2.LONGITUDE AS DISP_LONGITUDE
  ,MFP2.GEO_CITY_NM AS DISP_GEO_CITY_NM
  ,MFP2.GEO_COUNTY_NM AS DISP_GEO_COUNTY_NM
  ,MFP2.GEO_STATE_CD AS DISP_GEO_STATE_CD
  ,MFP2.GEO_ZIP_CD AS DISP_GEO_ZIP_CD
--TS
  ,T1.FROM_ID AS TS_FAC_ID
  ,MFP3.FAC_TYPE AS TS_FAC_TYPE
  ,MFP3.FAC_NAME AS TS_FAC_NAME
  ,NVL(MFP3.FAC_SHORT_NM, MFP3.FAC_NAME) AS TS_FAC_SHORT_NM
  ,MFP3.WM_OWNED_FLAG AS TS_WM_OWNED_FLAG
  ,MFP3.LATITUDE AS TS_LATITUDE
  ,MFP3.LONGITUDE AS TS_LONGITUDE
  ,MFP3.GEO_CITY_NM AS TS_GEO_CITY_NM
  ,MFP3.GEO_COUNTY_NM AS TS_GEO_COUNTY_NM
  ,MFP3.GEO_STATE_CD AS TS_GEO_STATE_CD
  ,MFP3.GEO_ZIP_CD AS TS_GEO_ZIP_CD
--
  ,T1.TONS
  ,EGS.LOADS
  ,T1.COST
  ,T1.DOLLAR_PER_HR
  ,T1.ROUTE_TIME
  ,T1.CP_ID
  ,T1.ENO_RESULTSOURCE
  ,EGS.ROUTE_ID
  ,EGS.LOAD_SEQ
  ,EGS.LOAD_TYPE
  ,EGS.ACCOUNT_NBR
  ,EGS.CUSTOMER_NAME
  ,EGS.CP_LATITUDE
  ,EGS.CP_LONGITUDE
  ,EGS.CP_GEO_CITY_NM
  ,EGS.CP_GEO_COUNTY_NM
  ,EGS.CP_GEO_STATE_CD
  ,EGS.CP_GEO_ZIP_CD
  ,EGS.STEM_LEGS
  ,EGS.RETURN_LEGS
  ,EGS.DISPOSAL_LEGS
FROM STG.ENO_GREENFLOW_FLOW_OUT T1
LEFT JOIN MART.ENO_GREENFLOW_SOLUTION_RESULTS_VW EGS
ON T1.ENO_ID = EGS.ENO_ID
  AND T1.ROWNUM = EGS.COLLECTION_POINT_ID
LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP2
ON MFP2.ENO_ID = T1.ENO_ID
  AND MFP2.FAC_ID = T1.TO_ID
LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP3
ON MFP3.ENO_ID = T1.ENO_ID
  AND MFP3.FAC_ID = T1.FROM_ID
;

-- ************************************** ENO_GREENFLOW_FLOW_CONTROL_CAPACITY
CREATE VIEW ENO_GREENFLOW_FLOW_CONTROL_CAPACITY AS
SELECT
	Z.ENO_ID
	,Z.ENO_RESULTSOURCE
	,Z.PKEY AS FLOW_CONTROL_RULE_ID
	,Z.FLOW_CONTROL_SOURCE
	,Z.FLOW_CONTROL_SOURCE_TYPE
	,Z.FLOW_CONTROL_DESTINATION
	,Z.FLOW_CONTROL_DESTINATION_TYPE
	,Z.WASTE_TYPE
	,Z.LOB
	,NVL(Z.MIN_TONS,0) AS MIN_TONS
	,NVL(Z.MAX_TONS,0) AS MAX_TONS
	,CASE WHEN (NVL(Z.MIN_TONS,0) - NVL(Z.THREEP_TONS,0)) < 0
				THEN 0
	 			ELSE (NVL(Z.MIN_TONS,0) - NVL(Z.THREEP_TONS,0))
		END AS MIN_TONS_EXCL_3P
	,CASE WHEN (NVL(Z.MAX_TONS,0) - NVL(Z.THREEP_TONS,0)) < 0
				THEN 0
	 			ELSE (NVL(Z.MAX_TONS,0) - NVL(Z.THREEP_TONS,0))
		END AS MAX_TONS_EXCL_3P
	,(NVL(Z.WM_TONS,0) + NVL(Z.THREEP_TONS,0)) AS SOLUTION_TOTAL_TONS
	,NVL(Z.WM_TONS,0) AS SOLUTION_WM_TONS
	,NVL(Z.THREEP_TONS,0) AS SOLUTION_3P_TONS
	,CASE WHEN (NVL(Z.MAX_TONS,0) - NVL(SOLUTION_TOTAL_TONS,0)) > 0 THEN (NVL(Z.MAX_TONS,0) - NVL(SOLUTION_TOTAL_TONS,0)) ELSE NULL END AS REMAINING_CAPACITY
	,CASE WHEN Z.MAX_TONS IS NULL THEN NULL ELSE (NVL(SOLUTION_TOTAL_TONS,0) - NVL(Z.MAX_TONS,0)) END AS OVER_USE
--	,CASE WHEN (NVL(SOLUTION_TOTAL_TONS,0) - NVL(Z.MAX_TONS,0)) > 0 THEN (NVL(SOLUTION_TOTAL_TONS,0) - NVL(Z.MAX_TONS,0)) ELSE NULL END AS OVER_USE
	,CASE WHEN (NVL(Z.MIN_TONS,0) - NVL(SOLUTION_TOTAL_TONS,0)) > 0 THEN (NVL(Z.MIN_TONS,0) - NVL(SOLUTION_TOTAL_TONS,0)) ELSE NULL END AS UNDERUSE
FROM
(
		SELECT EFC.PKEY
        ,EGS.ENO_ID
				,EGS.ENO_RESULTSOURCE
        ,EFC.COLLECTION_ENTITY AS FLOW_CONTROL_SOURCE
        ,EFC.RULE_SOURCE AS FLOW_CONTROL_SOURCE_TYPE
        ,EFC.DISPOSAL_ENTITY AS FLOW_CONTROL_DESTINATION
        ,EFC.RULE_DEST AS FLOW_CONTROL_DESTINATION_TYPE
        ,EFC.WASTE_TYPE AS WASTE_TYPE
        ,EFC.LOB AS LOB
        ,EFC.MIN_TONS AS MIN_TONS
        ,EFC.MAX_TONS AS MAX_TONS
				,SUM( CASE WHEN EGS.SUBLOB = '3PLOB' THEN TONS ELSE 0 END) AS THREEP_TONS
				,SUM( CASE WHEN EGS.SUBLOB = '3PLOB' THEN 0 ELSE TONS END) AS WM_TONS
    FROM MART.EXPLODED_FLOW_CONTROL_PERSISTENT EFC
    LEFT JOIN MART.MODEL_FLOW_CONTROL_DISPOSAL_PERSISTENT T2
    ON EFC.FC_RULE_NUMBER = T2.FC_RULE_NUMBER AND EFC.ENO_ID = T2.ENO_ID
    JOIN STG.ENO_GREENFLOW_SOLUTION_RESULTS EGS
    ON T2.ENO_ID = EGS.ENO_ID  AND T2.DISP_FAC_ID = EGS.DISP_FAC_ID
    WHERE EFC.METHOD_TYPE IN (2,3)
		GROUP BY
        EFC.PKEY
        ,EGS.ENO_ID
				,EGS.ENO_RESULTSOURCE
        ,EFC.PKEY
        ,EFC.COLLECTION_ENTITY
        ,EFC.RULE_SOURCE
        ,EFC.DISPOSAL_ENTITY
        ,EFC.RULE_DEST
        ,EFC.WASTE_TYPE
        ,EFC.LOB
        ,EFC.MIN_TONS
        ,EFC.MAX_TONS
) Z
;

-- ************************************** ENO_GREENFLOW_FACILITY_MATERIAL_CAPACITY
CREATE VIEW ENO_GREENFLOW_FACILITY_MATERIAL_CAPACITY AS
SELECT DISTINCT
	EGS.ENO_ID AS ENO_ID
	,EGS.ENO_RESULTSOURCE AS ENO_RESULTSOURCE
	,EGS.DISP_FAC_ID AS DISP_FAC_ID
	,EGS.DISP_FAC_TYPE
	,EGS.DISP_FAC_SHORT_NM
  ,EGS.WASTE_TYPE
	,MAC.VOLUME_CONSTRAINT_TYPE
	,MAC.VOLUME_TIME_UNIT
	,MAC.GOVERNING_MAX_FLAG AS GOVERNING_MAX_IND
	,MAC.GOVERNING_MIN_FLAG AS GOVERNING_MIN_IND
	,NVL(MAC.MIN_TONS_SCALED,0) AS MIN_TONS
	,NVL(MAC.MAX_TONS_SCALED,0) AS MAX_TONS
	,CASE WHEN (NVL(MAC.MIN_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0)) < 0
				THEN 0
	 			ELSE (NVL(MAC.MIN_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0))
		END AS MIN_TONS_EXCL_3P
	,CASE WHEN (NVL(MAC.MAX_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0)) < 0
				THEN 0
	 			ELSE (NVL(MAC.MAX_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0))
		END AS MAX_TONS_EXCL_3P
	,(NVL(EGS.WM_TONS,0) + NVL(EGS.THREEP_TONS,0)) AS SOLUTION_TOTAL_TONS
	,NVL(EGS.WM_TONS,0) AS SOLUTION_WM_TONS
	,NVL(EGS.THREEP_TONS,0) AS SOLUTION_3P_TONS
	,CASE WHEN (NVL(MAC.MAX_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) > 0 THEN (NVL(MAC.MAX_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) ELSE NULL END AS REMAINING_CAPACITY
	,CASE WHEN MAC.MAX_TONS_SCALED IS NULL THEN NULL ELSE (NVL(SOLUTION_TOTAL_TONS,0) - NVL(MAC.MAX_TONS_SCALED,0)) END AS OVER_USE
	--,CASE WHEN (NVL(SOLUTION_TOTAL_TONS,0) - NVL(MAC.MAX_TONS_SCALED,0)) > 0 THEN (NVL(SOLUTION_TOTAL_TONS,0) - NVL(MAC.MAX_TONS_SCALED,0)) ELSE NULL END AS OVER_USE
	,CASE WHEN (NVL(MAC.MIN_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) > 0 THEN (NVL(MAC.MIN_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) ELSE NULL END AS UNDERUSE
FROM
(
	SELECT
	EGS.ENO_ID, EGS.DISP_FAC_ID, EGS.ENO_RESULTSOURCE, EGS.WASTE_TYPE,
	MFP.FAC_TYPE AS DISP_FAC_TYPE
	,NVL(MFP.FAC_SHORT_NM, MFP.FAC_NAME) AS DISP_FAC_SHORT_NM
  ,SUM( CASE WHEN EGS.SUBLOB  = '3PLOB' THEN TONS ELSE 0 END) AS THREEP_TONS,
	SUM( CASE WHEN EGS.SUBLOB  = '3PLOB' THEN 0 ELSE TONS END) AS WM_TONS
	FROM STG.ENO_GREENFLOW_SOLUTION_RESULTS EGS
	LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP
		ON MFP.ENO_ID = EGS.ENO_ID
		AND MFP.FAC_ID = EGS.DISP_FAC_ID
	GROUP BY EGS.ENO_ID, EGS.DISP_FAC_ID, EGS.ENO_RESULTSOURCE, EGS.WASTE_TYPE, MFP.FAC_TYPE, NVL(MFP.FAC_SHORT_NM, MFP.FAC_NAME)
) EGS
LEFT JOIN MART.MODEL_ALL_CONSTRAINTS_PERSISTENT MAC
	ON MAC.FAC_ID = EGS.DISP_FAC_ID
	AND MAC.ENO_ID = EGS.ENO_ID
    AND MAC.WASTE_TYPE = EGS.WASTE_TYPE
WHERE MAC.SRC = 'WASTE_TYPE'
;

-- ************************************** ENO_GREENFLOW_FACILITIES_CAPACITY
CREATE VIEW ENO_GREENFLOW_FACILITIES_CAPACITY AS
SELECT
	EGS.ENO_ID AS ENO_ID
	,EGS.ENO_RESULTSOURCE AS ENO_RESULTSOURCE
	,EGS.DISP_FAC_ID AS DISP_FAC_ID
	,EGS.FAC_TYPE AS DISP_FAC_TYPE
	,EGS.DISP_FAC_SHORT_NM
	,MAC.VOLUME_CONSTRAINT_TYPE
	,MAC.VOLUME_TIME_UNIT
	,MAC.GOVERNING_MAX_FLAG AS GOVERNING_MAX_IND
	,MAC.GOVERNING_MIN_FLAG AS GOVERNING_MIN_IND
	,NVL(MAC.MIN_TONS_SCALED,0) AS MIN_TONS
	,NVL(MAC.MAX_TONS_SCALED,0) AS MAX_TONS
	,CASE WHEN (NVL(MAC.MIN_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0)) < 0
				THEN 0
	 			ELSE (NVL(MAC.MIN_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0))
		END AS MIN_TONS_EXCL_3P
	,CASE WHEN (NVL(MAC.MAX_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0)) < 0
				THEN 0
	 			ELSE (NVL(MAC.MAX_TONS_SCALED,0) - NVL(EGS.THREEP_TONS,0))
		END AS MAX_TONS_EXCL_3P
	,(nvl(EGS.WM_TONS,0) + nvl(EGS.THREEP_TONS,0)) AS SOLUTION_TOTAL_TONS
	,NVL(EGS.WM_TONS,0) AS SOLUTION_WM_TONS
	,NVL(EGS.THREEP_TONS,0) AS SOLUTION_3P_TONS
	,CASE WHEN (NVL(MAC.MAX_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) > 0 THEN (NVL(MAC.MAX_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) ELSE NULL END AS REMAINING_CAPACITY
	,CASE WHEN MAC.MAX_TONS_SCALED IS NULL THEN NULL ELSE (NVL(SOLUTION_TOTAL_TONS,0) - NVL(MAC.MAX_TONS_SCALED,0)) END AS OVER_USE
--	,CASE WHEN (NVL(SOLUTION_TOTAL_TONS,0) - NVL(MAC.MAX_TONS_SCALED,0)) > 0 THEN (NVL(SOLUTION_TOTAL_TONS,0) - NVL(MAC.MAX_TONS_SCALED,0)) ELSE NULL END AS OVER_USE
	,CASE WHEN (NVL(MAC.MIN_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) > 0 THEN (NVL(MAC.MIN_TONS_SCALED,0) - NVL(SOLUTION_TOTAL_TONS,0)) ELSE NULL END AS UNDERUSE
FROM
(
	SELECT
	EGS.ENO_ID, EGS.DISP_FAC_ID, EGS.ENO_RESULTSOURCE, MFP.FAC_TYPE, NVL(MFP.FAC_SHORT_NM, MFP.FAC_NAME)  as DISP_FAC_SHORT_NM
	,SUM( CASE WHEN EGS.SUBLOB  = '3PLOB' THEN EGS.TONS ELSE 0 END) AS THREEP_TONS,
	SUM( CASE WHEN EGS.SUBLOB  = '3PLOB' THEN 0 ELSE EGS.TONS END) AS WM_TONS
	FROM STG.ENO_GREENFLOW_SOLUTION_RESULTS  EGS
	JOIN MART.MODEL_FACILITIES_PERSISTENT MFP
		ON MFP.ENO_ID = EGS.ENO_ID
		AND MFP.FAC_ID = EGS.DISP_FAC_ID
	GROUP BY EGS.ENO_ID, EGS.DISP_FAC_ID, EGS.ENO_RESULTSOURCE, MFP.FAC_TYPE, NVL(MFP.FAC_SHORT_NM, MFP.FAC_NAME)
) EGS
LEFT JOIN MART.MODEL_ALL_CONSTRAINTS_PERSISTENT MAC
	ON MAC.FAC_ID = EGS.DISP_FAC_ID
	AND MAC.ENO_ID = EGS.ENO_ID

WHERE MAC.SRC = 'GLOBAL_FACILITY_CONSTRAINT'
;

-- ************************************** DISPOSAL_TURN_TIMES_SITE_VW
CREATE VIEW DISPOSAL_TURN_TIMES_SITE_VW as 
SELECT A.DISPFACID DISPFACID,  AVG(NET_TURN_TIME) TURN_TIME 
FROM MART.DISPOSAL_TURN_TIMES_SITE_MA_LEVEL_VW  A
GROUP BY A.DISPFACID
;

-- ************************************** DISPOSAL_TURN_TIMES_SITE_MA_LEVEL_VW
CREATE VIEW DISPOSAL_TURN_TIMES_SITE_MA_LEVEL_VW as

SELECT LH_MATCHING.DISPFACID DISPFACID , LH_MATCHING.DISPFAC_TYPE,

       S.MA_ID ,L."NAME" LOB , DATEDIFF(MINUTE , ROL.ARRIVE,ROL.DEPART) TURN_TIME, 

DATEDIFF(MINUTE , ROD.DOWNSTART,ROD.DOWNEND) OVERLAP_DOWNTIME,

DATEDIFF(MINUTE , RLUNCH.LUNCHSTART,RLUNCH.LUNCHEND) OVERLAP_MEALTIME,



CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)

     THEN OVERLAP_MEALTIME - NVL(OVERLAP_DOWNTIME, 0)

     ELSE OVERLAP_MEALTIME 

END NET_MEAL_TIME,

CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)

	 THEN OVERLAP_DOWNTIME - NVL(OVERLAP_MEALTIME,0) 

	 ELSE OVERLAP_DOWNTIME

END NET_DOWN_TIME,

TURN_TIME - NVL(NET_DOWN_TIME,0) -  NVL(NET_MEAL_TIME,0) NET_TURN_TIME,

ROL.ARRIVE,ROL.DEPART, RLUNCH.LUNCHSTART,RLUNCH.LUNCHEND

FROM STG.TP_RO_LANDFILL ROL

JOIN STG.TP_ROUTEORDER  RO 

ON RO.PKEY =ROL.FK_ROUTEORDER 

AND ROL.FK_VEHICLE IS NULL 

AND ro.ORDERDATE  BETWEEN dateadd('DAY' , -366, GETDATE()) AND dateadd('DAY' , -1, GETDATE())

JOIN STG.TP_ROUTE R 

ON R.PKEY = RO.FK_ROUTE 

JOIN STG.TP_LOB L 

ON L.PKEY = R.FK_LOB 

AND L.NAME IN ('COMMERCIAL', 'RESIDENTIAL', 'ROLLOFF')

JOIN STG.TP_LANDFILL LND 

ON LND.PKEY =ROL.FK_LANDFILL 

JOIN STG.TP_SITE S

ON S.PKEY = LND.FK_SITE 



JOIN

(SELECT DISTINCT HAULING_SITE_ID, OCS_DISPOSAL_CD, 

 SUBSTR(MATCHED_LOCATIONID_TYPE , 0, REGEXP_INSTR(MATCHED_LOCATIONID_TYPE , '_') -1) DISPFACID,

 SUBSTR(MATCHED_LOCATIONID_TYPE ,REGEXP_INSTR(MATCHED_LOCATIONID_TYPE , '_') + 1) DISPFAC_TYPE

FROM  MART.LOCATION_MATCHING) LH_MATCHING

ON LH_MATCHING.HAULING_SITE_ID = S.UNIQUEID

AND LND.ID=LH_MATCHING.OCS_DISPOSAL_CD



LEFT JOIN DEV_ONEWM.STG.TP_RO_DOWNTIME ROD

ON ROD.FK_ROUTEORDER = RO.PKEY 

AND ROD.FK_VEHICLE IS NULL 

AND ROD.DOWNSTART  BETWEEN ROL.ARRIVE AND ROL.DEPART

AND ROD.DOWNEND  BETWEEN ROL.ARRIVE AND ROL.DEPART 

LEFT JOIN DEV_ONEWM.STG.TP_RO_LUNCH RLUNCH

ON RLUNCH.FK_ROUTEORDER = RO.PKEY 

AND RLUNCH.LUNCHSTART BETWEEN ROL.ARRIVE AND ROL.DEPART 

AND RLUNCH.LUNCHEND  BETWEEN ROL.ARRIVE AND ROL.DEPART

AND RLUNCH.FK_VEHICLE IS NULL 

;

-- ************************************** DISPOSAL_TURN_TIMES_SITE_MA_LEVEL
CREATE VIEW DISPOSAL_TURN_TIMES_SITE_MA_LEVEL as
SELECT LH_MATCHING.DISPFACID DISPFACID , LH_MATCHING.DISPFAC_TYPE,
       S.MA_ID ,L."NAME" LOB , DATEDIFF(MINUTE , ROL.ARRIVE,ROL.DEPART) TURN_TIME, 
DATEDIFF(MINUTE , ROD.DOWNSTART,ROD.DOWNEND) OVERLAP_DOWNTIME,
DATEDIFF(MINUTE , RLUNCH.LUNCHSTART,RLUNCH.LUNCHEND) OVERLAP_MEALTIME,

CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)
     THEN OVERLAP_MEALTIME - NVL(OVERLAP_DOWNTIME, 0)
     ELSE OVERLAP_MEALTIME 
END NET_MEAL_TIME,
CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)
	 THEN OVERLAP_DOWNTIME - NVL(OVERLAP_MEALTIME,0) 
	 ELSE OVERLAP_DOWNTIME
END NET_DOWN_TIME,
TURN_TIME - NVL(NET_DOWN_TIME,0) -  NVL(NET_MEAL_TIME,0) NET_TURN_TIME,
ROL.ARRIVE,ROL.DEPART, RLUNCH.LUNCHSTART,RLUNCH.LUNCHEND
FROM STG.TP_RO_LANDFILL ROL
JOIN STG.TP_ROUTEORDER  RO 
ON RO.PKEY =ROL.FK_ROUTEORDER 
AND Ro.statuscode = 'CONFIRMED'
AND ROL.FK_VEHICLE IS NULL 
AND ro.ORDERDATE  BETWEEN dateadd('DAY' , -366, GETDATE()) AND dateadd('DAY' , -1, GETDATE())
JOIN STG.TP_ROUTE R 
ON R.PKEY = RO.FK_ROUTE 
JOIN STG.TP_LOB L 
ON L.PKEY = R.FK_LOB 
AND L.NAME IN ('COMMERCIAL', 'RESIDENTIAL', 'ROLLOFF')
JOIN STG.TP_LANDFILL LND 
ON LND.PKEY =ROL.FK_LANDFILL 
JOIN STG.TP_SITE S
ON S.PKEY = LND.FK_SITE 

JOIN
(SELECT DISTINCT HAULING_SITE_ID, OCS_DISPOSAL_CD, 
 SUBSTR(MATCHED_LOCATIONID_TYPE , 0, REGEXP_INSTR(MATCHED_LOCATIONID_TYPE , '_') -1) DISPFACID,
 SUBSTR(MATCHED_LOCATIONID_TYPE ,REGEXP_INSTR(MATCHED_LOCATIONID_TYPE , '_') + 1) DISPFAC_TYPE
FROM  MART.LOCATION_MATCHING) LH_MATCHING
ON LH_MATCHING.HAULING_SITE_ID = S.UNIQUEID
AND LND.ID=LH_MATCHING.OCS_DISPOSAL_CD

LEFT JOIN DEV_ONEWM.STG.TP_RO_DOWNTIME ROD
ON ROD.FK_ROUTEORDER = RO.PKEY 
AND ROD.FK_VEHICLE IS NULL 
AND ROD.DOWNSTART  BETWEEN ROL.ARRIVE AND ROL.DEPART
AND ROD.DOWNEND  BETWEEN ROL.ARRIVE AND ROL.DEPART 
LEFT JOIN DEV_ONEWM.STG.TP_RO_LUNCH RLUNCH
ON RLUNCH.FK_ROUTEORDER = RO.PKEY 
AND RLUNCH.LUNCHSTART BETWEEN ROL.ARRIVE AND ROL.DEPART 
AND RLUNCH.LUNCHEND  BETWEEN ROL.ARRIVE AND ROL.DEPART
AND RLUNCH.FK_VEHICLE IS NULL 
;

-- ************************************** DISPOSAL_TURN_TIMES_SITE_LOB_VW
CREATE VIEW DISPOSAL_TURN_TIMES_SITE_LOB_VW as 
SELECT A.DISPFACID DISPFACID, LOB AS LOB, AVG(NET_TURN_TIME) TURN_TIME 
FROM MART.DISPOSAL_TURN_TIMES_SITE_MA_LEVEL_VW  A
GROUP BY A.DISPFACID, LOB 
;

-- ************************************** DISPOSAL_TURN_TIMES_MA_VW
CREATE VIEW DISPOSAL_TURN_TIMES_MA_VW as 
SELECT A.MA_ID MA_ID , DISPFAC_TYPE, AVG(NET_TURN_TIME) TURN_TIME 
FROM MART.DISPOSAL_TURN_TIMES_SITE_MA_LEVEL_VW  A
GROUP BY A.MA_ID, DISPFAC_TYPE
;

-- ************************************** DISPOSAL_TRIP_TYPE
CREATE VIEW DISPOSAL_TRIP_TYPE as (SELECT 
  "PKEY", 
  "UNIQUEID", 
  "NAME", 
  "INACTIVE", 
  "SERVICECONFEVENT", 
  "SEQNR", 
  "AUDIT_CREATE_UID", 
  "AUDIT_CREATE_DT", 
  "AUDIT_UPDATED_DT", 
  "EQUIVALENTHAUL", 
  "RO_DISPOSAL_REQUIRED", 
  "RO_DISPOSAL_ONLY", 
  "DISPOSAL_NO_VALIDATION", 
  "DISPOSAL_DO_NOT_SEND", 
  "RO_RETURN_REQUIRED", 
  "RO_TRP_AUTO_CHANGE_REQUIRED", 
  "RO_RETURN_NO_SERVICE_DISABLED", 
  "NON_RO_DISPOSAL_LOADTYPE", 
  "NON_RO_DISPOSAL_ONLY", 
  "MODIFIEDBY", 
  "STAMP", 
  "SESSIONID", 
  "AUDIT_ID", 
  "AUDIT_LOAD_DTM", 
  "DISPOSAL_TRIP_TYPE_CD", 
  "DISPOSAL_TRIP_TYPE_NM" 
FROM (SELECT *,
CASE WHEN UNIQUEID IN ( 'E/R', 'ER' ,'BRN')
     THEN 'ER'
     WHEN UNIQUEID IN ( 'S/O', 'DNR','FYS','FYN','FFY','LIV','FDR','FRN')
     THEN 'EFO'
     WHEN UNIQUEID IN ( 'DEL', 'REL','BTS','BTN','BTY','DNE','TRP','EDE','ERE','ZAD','ZRP')
     THEN 'ND'
     ELSE 'EFO' END AS  DISPOSAL_TRIP_TYPE_CD,
CASE WHEN UNIQUEID IN ( 'E/R', 'ER' ,'BRN')
     THEN 'Empty & Return'
     WHEN UNIQUEID IN ( 'S/O', 'DNR','FYS','FYN','FFY','LIV','FDR','FRN')
     THEN 'Empty and Follow-On'
     WHEN UNIQUEID IN ( 'DEL', 'REL','BTS','BTN','BTY','DNE','TRP','EDE','ERE','ZAD','ZRP')
     THEN 'No Disposal Trip'
ELSE 'Empty and Follow-On' END  AS  DISPOSAL_TRIP_TYPE_NM
FROM
DEV_OCS.ODS.TP_TICKETLOADTYPE
) AS "v_0000017686_0000177637");

-- ************************************** DISPOSAL_SITE
CREATE VIEW DISPOSAL_SITE as (SELECT 
  "FAC_ID", 
  "FAC_TYPE", 
  "WM_OWNED_FLAG", 
  "FAC_NAME", 
  "FAC_SHORT_NM", 
  "ACTIVE_FLAG", 
  "MARKET_AREA_CD", 
  "MARKET_AREA_NM", 
  "LATITUDE", 
  "LONGITUDE", 
  "ADDRESS_1", 
  "ADDRESS_2", 
  "CITY_NM", 
  "STATE_CD", 
  "ZIP_CD", 
  "COUNTRY_CD", 
  "COUNTY_NM", 
  "FIXED_COST", 
  "UNIT_COST", 
  "SOURCE", 
  "LAST_UPDATED_DTM", 
  "LAST_UPDATED_USER", 
  "MONDAY_OPEN_AT", 
  "MONDAY_CLOSE_AT", 
  "TUESDAY_OPEN_AT", 
  "TUESDAY_CLOSE_AT", 
  "WEDNESDAY_OPEN_AT", 
  "WEDNESDAY_CLOSE_AT", 
  "THURSDAY_OPEN_AT", 
  "THURSDAY_CLOSE_AT", 
  "FRIDAY_OPEN_AT", 
  "FRIDAY_CLOSE_AT", 
  "SATURDAY_OPEN_AT", 
  "SATURDAY_CLOSE_AT", 
  "SUNDAY_OPEN_AT", 
  "SUNDAY_CLOSE_AT", 
  "GEO_CITY_NM", 
  "GEO_COUNTY_NM", 
  "GEO_STATE_CD", 
  "GEO_ZIP_CD" 
FROM (select
coalesce( t1.FAC_ID, t2.FAC_ID) as FAC_ID,
coalesce( t1.FAC_TYPE, t2.FAC_TYPE) as FAC_TYPE,
coalesce( t1.WM_OWNED_FLAG, t2.WM_OWNED_FLAG) as WM_OWNED_FLAG,
coalesce( t1.FAC_NAME, T2.FAC_NAME) as FAC_NAME,
t1.FAC_SHORT_NM as FAC_SHORT_NM,
coalesce( t1.ACTIVE_FLAG, t2.ACTIVE_FLAG) as ACTIVE_FLAG,
coalesce( t1.MARKET_AREA_CD, t2.MARKET_AREA_CD) as MARKET_AREA_CD,
coalesce( t1.MARKET_AREA_NM, T2.MARKET_AREA_NM) AS MARKET_AREA_NM,
coalesce( t1.LATITUDE, t2.LATITUDE) as LATITUDE,
coalesce( t1.LONGITUDE, t2.LONGITUDE) as LONGITUDE,
coalesce( t1.ADDRESS_1, t2.ADDRESS_1) as ADDRESS_1,
coalesce( t1.ADDRESS_2, t2.ADDRESS_2) as ADDRESS_2,
coalesce( t1.CITY_NM, t2.CITY_NM) as CITY_NM,
coalesce( t1.STATE_CD, t2.STATE_CD) as STATE_CD,
coalesce( t1.ZIP_CD, t2.ZIP_CD) as ZIP_CD,
coalesce( t1.COUNTRY, t2.COUNTRY_CD) as COUNTRY_CD,
coalesce( t1.COUNTY_NM, t2.COUNTY_NM) as COUNTY_NM,
t1.FIXED_COST,
case when t1.UNIT_COST is null or t1.UNIT_COST=0 then T2.UNIT_COST else t1.UNIT_COST end as UNIT_COST,
case when t1.FAC_ID is not null then 'LH' else 'MART' end as SOURCE,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
Monday_OPEN_AT,
Monday_CLOSE_AT,
Tuesday_OPEN_AT,
Tuesday_CLOSE_AT,
Wednesday_OPEN_AT,
Wednesday_CLOSE_AT,
Thursday_OPEN_AT,
Thursday_CLOSE_AT,
Friday_OPEN_AT,
Friday_CLOSE_AT,
Saturday_OPEN_AT,
Saturday_CLOSE_AT,
Sunday_OPEN_AT,
Sunday_CLOSE_AT,
t1.GEO_CITY_NM,
t1.GEO_COUNTY_NM,
t1.GEO_STATE_CD,
t1.GEO_ZIP_CD
from DEV_ONEWM.MART.BMT_DISPOSAL_SITE t1
left outer join DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW FH
on t1.FAC_ID = FH.FAC_ID --AND FH.FAC_TYPE=t1.FAC_TYPE
full outer join DEV_ONEWM.MART.CORP_DISPOSAL_SITE t2 on T1.FAC_ID = T2.FAC_ID
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D'
) AS "v_0000017686_0000143765");

-- ************************************** DIM_DT_YR
CREATE VIEW DIM_DT_YR as (SELECT 
  "DIM_DT_YR_GUID", 
  "YR_ID", 
  "YR_START_DT", 
  "YR_END_DT", 
  "YR_DAY_CNT", 
  "PREV_YR_ID", 
  "AUDIT_ID", 
  "WAREHOUSE_ID", 
  "CURRENT_IND" 
FROM (SELECT * FROM DEV_ONEWM.STG.DIM_DT_YR
) AS "v_0000017686_0000143639");

-- ************************************** DIM_DT_QTR
CREATE VIEW DIM_DT_QTR as (SELECT 
  "DIM_DT_QTR_GUID", 
  "DIM_DT_YR_GUID", 
  "QTR_ID", 
  "QTR_NUM", 
  "QTR_DSPLY_NM", 
  "QTR_YR_DSPLY_NM", 
  "QTR_START_DT", 
  "QTR_END_DT", 
  "QTR_DAY_CNT", 
  "YR_ID", 
  "YR_START_DT", 
  "YR_END_DT", 
  "YR_DAY_CNT", 
  "PREV_QTR_ID", 
  "PREV_QTR_GUID", 
  "PREV_YR_QTR_ID", 
  "PREV_YR_QTR_GUID", 
  "PREV_YR_ID", 
  "PREV_YR_GUID", 
  "AUDIT_ID", 
  "WAREHOUSE_ID", 
  "CURRENT_IND" 
FROM (SELECT * FROM DEV_ONEWM.STG.DIM_DT_QTR


) AS "v_0000017686_0000143702");

-- ************************************** DIM_DT_MNTH
CREATE VIEW DIM_DT_MNTH as (SELECT 
  "DIM_DT_MNTH_GUID", 
  "DIM_DT_YR_GUID", 
  "DIM_DT_QTR_GUID", 
  "MNTH_ID", 
  "MNTH_NUM", 
  "MNTH_NM", 
  "MNTH_YR_DISP_NM", 
  "MNTH_YR_SHORT_NM", 
  "MNTH_START_DT", 
  "MNTH_END_DT", 
  "MNTH_DAY_CNT", 
  "QTR_ID", 
  "QTR_NUM", 
  "QTR_DSPLY_NM", 
  "QTR_YR_DSPLY_NM", 
  "QTR_START_DT", 
  "QTR_END_DT", 
  "QTR_DAY_CNT", 
  "YR_ID", 
  "YR_START_DT", 
  "YR_END_DT", 
  "YR_DAY_CNT", 
  "ACCT_PERIOD_CLOSED_FLG", 
  "PREV_MNTH_ID", 
  "PREV_MNTH_GUID", 
  "PREV_YR_MNTH_ID", 
  "PREV_YR_MNTH_GUID", 
  "PREV_QTR_ID", 
  "PREV_QTR_GUID", 
  "PREV_YR_QTR_ID", 
  "PREV_YR_QTR_GUID", 
  "PREV_YR_ID", 
  "PREV_YR_GUID", 
  "AUDIT_ID", 
  "WAREHOUSE_ID", 
  "CURRENT_IND" 
FROM (SELECT * FROM DEV_ONEWM.STG.DIM_DT_MNTH


) AS "v_0000017686_0000143867");

-- ************************************** DIM_DT_CALNDR_DAY
CREATE VIEW DIM_DT_CALNDR_DAY as (SELECT 
  "DIM_DT_CALNDR_DAY_GUID", 
  "DIM_WEEK_START_DT_GUID", 
  "DIM_DT_MNTH_GUID", 
  "DIM_DT_QTR_GUID", 
  "DIM_DT_YR_GUID", 
  "CALNDR_DT", 
  "CALNDR_DT_NM", 
  "DT_SHORT_DSPLY_NM", 
  "DAY_WEEK_NM", 
  "DAY_WEEK_NUM", 
  "DAY_MNTH_NUM", 
  "DAY_QTR_NUM", 
  "DAY_YR_NUM", 
  "USA_WEEK_START_DT", 
  "USA_WEEK_END_DT", 
  "CANADA_WEEK_START_DT", 
  "CANADA_WEEK_END_DT", 
  "MNTH_ID", 
  "MNTH_NUM", 
  "MNTH_NM", 
  "MNTH_YR_DSPLY_NM", 
  "MNTH_YR_SHORT_DSPLY_NM", 
  "MNTH_START_DT", 
  "MNTH_END_DT", 
  "MNTH_DAY_CNT", 
  "QTR_ID", 
  "QTR_NUM", 
  "QTR_DSPLY_NM", 
  "QTR_YR_DSPLY_NM", 
  "QTR_START_DT", 
  "QTR_END_DT", 
  "QTR_DAY_CNT", 
  "YR_ID", 
  "YR_START_DT", 
  "YR_END_DT", 
  "YR_DAY_CNT", 
  "PREV_CALNDR_DT", 
  "PREV_YR_CALNDR_DT", 
  "PREV_MNTH_ID", 
  "PREV_MNTH_GUID", 
  "PREV_YR_MNTH_ID", 
  "PREV_YR_MNTH_GUID", 
  "PREV_QTR_ID", 
  "PREV_QTR_GUID", 
  "PREV_YR_QTR_ID", 
  "PREV_YR_QTR_GUID", 
  "PREV_YR_ID", 
  "PREV_YR_GUID", 
  "AUDIT_ID", 
  "CURRENT_IND", 
  "WAREHOUSE_ID", 
  "YR_WEEK_NUM", 
  "MONTH_NAME_SHORT", 
  "DAY_OF_THE_WEEK_SHORT" 
FROM (SELECT * FROM DEV_ONEWM.STG.DIM_DT_CALNDR_DAY


) AS "v_0000017686_0000143854");

-- ************************************** DIM_DAY_OF_WEEK
CREATE VIEW DIM_DAY_OF_WEEK as (SELECT 
  "DIM_DAY_OF_WEEK_GUID", 
  "DAY_OF_WEEK_CD", 
  "DAY_OF_WEEK_NM", 
  "USA_DAY_SEQ_NUM", 
  "CANADA_DAY_SEQ_NUM", 
  "SRC_SYS_GUID", 
  "AUDIT_ID", 
  "WAREHOUSE_ID", 
  "CURRENT_IND" 
FROM (SELECT * FROM DEV_ONEWM.STG.DIM_DAY_OF_WEEK


) AS "v_0000017686_0000143886");

-- ************************************** COMRES_LOB_HIERARCHY
CREATE VIEW COMRES_LOB_HIERARCHY as (SELECT 
  "LOB", 
  "SUBLOB", 
  "SUBLOB_DESC", 
  "ESSBASE_SUBLOB_KEY", 
  "ESSBASE_SUBLOB_DESC", 
  "INFERRED_WASTETYPE" 
FROM (select t2.NAME as LOB
,t1.UNIQUEID as SUBLOB
,t1.NAME as SUBLOB_DESC
,CASE WHEN t1.UNIQUEID = 'CMRL' THEN 100
        WHEN t1.UNIQUEID = 'CMSL' THEN 110
        WHEN t1.UNIQUEID = 'CMFL' THEN 120
        WHEN t1.UNIQUEID = 'CMRY' THEN 140
		WHEN t1.UNIQUEID = 'CMFY' THEN 160
        WHEN t1.UNIQUEID = 'CMOR' THEN 175
		WHEN t1.UNIQUEID = 'RSRL' THEN 180
        WHEN t1.UNIQUEID = 'RSSL' THEN 190
		WHEN t1.UNIQUEID = 'RSFL' THEN 200
        WHEN t1.UNIQUEID = 'RSOP' THEN 210
		WHEN t1.UNIQUEID = 'RSRY' THEN 220
        WHEN t1.UNIQUEID = 'RSSY' THEN 230
		WHEN t1.UNIQUEID = 'RSFY' THEN 240
        WHEN t1.UNIQUEID = 'RSOR' THEN 255
END AS ESSBASE_SUBLOB_KEY
,CASE WHEN t1.UNIQUEID = 'CMRL' THEN 'Commercial Rearload'
        WHEN t1.UNIQUEID = 'CMSL' THEN 'Commercial Side Load'
        WHEN t1.UNIQUEID = 'CMFL' THEN 'Commercial Front Load'
        WHEN t1.UNIQUEID = 'CMRY' THEN 'Commercial Rearload Recycling'
		WHEN t1.UNIQUEID = 'CMFY' THEN 'Commercial Front Load Recyclng'
        WHEN t1.UNIQUEID = 'CMOR' THEN 'Commercial Organics'
		WHEN t1.UNIQUEID = 'RSRL' THEN 'Residential Rearload'
        WHEN t1.UNIQUEID = 'RSSL' THEN 'Residential Side Load'
		WHEN t1.UNIQUEID = 'RSFL' THEN 'Residential Front Load'
        WHEN t1.UNIQUEID = 'RSOP' THEN 'Residential One Pass'
		WHEN t1.UNIQUEID = 'RSRY' THEN 'Residential Rearload Recycling'
        WHEN t1.UNIQUEID = 'RSSY' THEN 'Residential Side Load Recyclng'
		WHEN t1.UNIQUEID = 'RSFY' THEN 'Residential Front Load Recylng'
        WHEN t1.UNIQUEID = 'RSOR' THEN 'Residential Organics'
END AS ESSBASE_SUBLOB_DESC
,t3.INFERRED_WASTETYPE
from DEV_OCS.ODS.TP_SUBLOB t1 
join  DEV_OCS.ODS.TP_LOB t2 on t1.FK_LOB = t2.pkey
left join DEV_ONEWM.MART.comres_wastetype_mapping t3
on t1.uniqueid = t3.SUBLOB where t2.NAME in ('COMMERCIAL','RESIDENTIAL')
) AS "v_0000017686_0000143797");

-- ************************************** COMM_TRAVEL_TO_DISPOSAL_VW
CREATE VIEW COMM_TRAVEL_TO_DISPOSAL_VW as 

SELECT LANDFILL_PKEY, 

TIMESTAMPDIFF(MINUTE, EVENT_BEFORE_LANDFILL, ARRIVE) TRAVEL_TO_DSPSL_MINUTE, 

TIMESTAMPDIFF(MINUTE, DOWNSTART,DOWNEND) DOWN_TIME,

TIMESTAMPDIFF(MINUTE, LUNCHSTART,LUNCHEND) MEAL_TIME,

CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)

     THEN MEAL_TIME - NVL(DOWN_TIME, 0)

     ELSE MEAL_TIME 

END NET_MEAL_TIME,

CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)

	 THEN DOWN_TIME - NVL(MEAL_TIME,0) 

	 ELSE DOWN_TIME

END NET_DOWN_TIME,

TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0) NET_TRAVEL_TO_DSPS

              

FROM 

MART.COMM_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT T1



LEFT JOIN STG.TP_RO_DOWNTIME ROD

ON ROD.FK_ROUTEORDER = T1.FK_ROUTEORDER 

AND ROD.FK_VEHICLE IS NULL 

AND ROD.DOWNSTART  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE

AND ROD.DOWNEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE 

LEFT JOIN STG.TP_RO_LUNCH RLUNCH

ON RLUNCH.FK_ROUTEORDER = T1.FK_ROUTEORDER 

AND RLUNCH.LUNCHSTART BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE 

AND RLUNCH.LUNCHEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE

AND RLUNCH.FK_VEHICLE IS NULL 



;

-- ************************************** COMM_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT
CREATE VIEW COMM_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT as

SELECT * FROM

(SELECT FK_ROUTEORDER, LANDFILL_PKEY, ARRIVE, EVENT_BEFORE_LANDFILL, ROW_NUMBER () OVER(PARTITION BY LANDFILL_PKEY ORDER BY ARRIVE asc) RN 

FROM

(

SELECT ROL.FK_ROUTEORDER, ROL.PKEY LANDFILL_PKEY , ROL.ARRIVE  , max(EVENT_BEFORE_LANDFILL) EVENT_BEFORE_LANDFILL

FROM STG.TP_RO_LANDFILL  ROL

JOIN MART.COMM_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL EVNTS_BFR

ON EVNTS_BFR.fk_routeorder = ROL.FK_ROUTEORDER 

AND ROL.FK_VEHICLE IS NULL 

AND ROL.ARRIVE >= EVNTS_BFR.EVENT_BEFORE_LANDFILL

GROUP BY ROL.FK_ROUTEORDER, ROL.PKEY  , ROL.ARRIVE

) A

) A1

WHERE A1.RN=1 

;

-- ************************************** COMM_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL
CREATE VIEW COMM_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL as

select FROMYARD EVENT_BEFORE_LANDFILL, fk_routeorder 

from STG.tp_ro_result ros

join STG.tp_routeorder ro

on ro.pkey = ros.fk_routeorder 

AND ROS.FK_VEHICLE IS NULL 

AND ROS.FROMYARD IS NOT NULL

AND RO.ORDERDATE >='2019-01-01'

AND RO.STATUSCODE='CONFIRMED'

join STG.tp_rouTe r 

on r.pkey = ro.fk_route

join STG.tp_lob lob

on lob.pkey = r.fk_lob 

and lob."NAME" ='COMMERCIAL'



UNION  ALL 



SELECT COR.DEPARTCUSTOMER , CO.FK_ROUTEORDER 

FROM STG.TP_CUSTOMERORDER CO

JOIN STG.TP_ROUTEORDER RO

ON RO.PKEY = CO.FK_ROUTEORDER 

AND RO.ORDERDATE >='2019-01-01'

AND RO.STATUSCODE='CONFIRMED'

JOIN STG.TP_CO_RESULT  COR 

ON COR.FK_VEHICLE IS NULL 

AND COR.FK_CUSTOMERORDER = CO.PKEY 

JOIN STG.TP_ROUTE R 

ON R.PKEY = RO.FK_ROUTE 

JOIN STG.TP_LOB L 

ON L.PKEY =R.FK_LOB

AND L."NAME" ='COMMERCIAL'



UNION ALL 



SELECT COR.STOPTICKET , CO.FK_ROUTEORDER 

FROM 

STG.TP_CUSTOMERORDER CO

JOIN STG.TP_ROUTEORDER RO

ON RO.PKEY = CO.FK_ROUTEORDER 

AND RO.ORDERDATE >='2019-01-01'

AND RO.STATUSCODE='CONFIRMED'

JOIN STG.TP_CO_RESULT  COR 

ON COR.FK_VEHICLE IS NULL 

AND COR.STOPTICKET IS NOT NULL

AND COR.FK_CUSTOMERORDER = CO.PKEY 

JOIN STG.TP_ROUTE R 

ON R.PKEY = RO.FK_ROUTE 

JOIN STG.TP_LOB L 

ON L.PKEY =R.FK_LOB

AND L."NAME" ='COMMERCIAL'

;

-- ************************************** COM_RESI_VOLUMES_LOAD_SEGMENT
CREATE VIEW COM_RESI_VOLUMES_LOAD_SEGMENT as (SELECT 
  "LANDFILL_PKEY", 
  "TOTAL_CUBIC_YD_VOL", 
  "HOME_CNT" 
FROM (--
--	OCS code to calculate Yards and Hones
--
WITH  TEMP_COM_RESI_VOLUMES as (
  --- Table to hold calculated cuqic yards for commercial and Homes for Residential routes
  --- When commercial customer on commercial route yards are sum of yards from TN_CUSTOMERSERVICE
  --- When Residential customer on commercial route yards are CEIL((OCD.QUANTITY)/3.0)*0.5
  --- Home counts are calculated by YARDS /0.5 from TN_CUSTOMERSERVICE
SELECT
  OCD.FK_CUSTOMERORDER,
  OCD.CODE,
  LOB.UNIQUEID LOB_UNIQUEID,
  ORL.UNIQUEID RTE_UNIQUEID,
  CASE WHEN ORL.UNIQUEID = 'C'
  AND LOB.UNIQUEID = 'R' THEN SUM(
    CEIL(
      (OCD.QUANTITY)/ 3.0
    )* 0.5
  ) ELSE CASE WHEN ORL.UNIQUEID in ('C', 'R')
  AND LOB.UNIQUEID = 'C' THEN SUM(OCD.YARDS) ELSE NULL END END TOTAL_CUBIC_YD_VOL,
  SUM(
    CASE WHEN ORL.UNIQUEID = 'C'
    AND LOB.UNIQUEID = 'R'
    AND OCD.ROW_NUM = 1 THEN 1 WHEN ORL.UNIQUEID = 'C'
    AND LOB.UNIQUEID = 'R'
    AND OCD.ROW_NUM <> 1 THEN 0 ELSE CASE WHEN ORL.UNIQUEID = 'C'
    AND LOB.UNIQUEID = 'C' THEN OCD.QUANTITY ELSE NULL END END
  ) CNTNR_CNT,
  CASE WHEN ORL.UNIQUEID = 'R'
  AND LOB.UNIQUEID = 'C' THEN SUM(OCD.YARDS / 0.5) ELSE CASE WHEN ORL.UNIQUEID = 'R'
  AND LOB.UNIQUEID = 'R' THEN SUM(OCD.QUANTITY) ELSE NULL END END HOME_CNT
FROM
  (
    SELECT
      A.*,
      ROW_NUMBER() OVER(
        PARTITION BY FK_CUSTOMERORDER
        ORDER BY
          ID ASC
      ) ROW_NUM
    FROM
      DEV_OCS.ODS.TN_CUSTOMERSERVICE A
  ) OCD
  INNER JOIN  DEV_OCS.ODS.TP_CUSTOMERORDER CO ON CO.PKEY = OCD.FK_CUSTOMERORDER
  INNER JOIN  DEV_OCS.ODS.TP_LOB LOB ON CO.FK_LOB = LOB.PKEY
  JOIN  DEV_OCS.ODS.TP_ROUTEORDER RO ON(
    RO.PKEY = CO.FK_ROUTEORDER
    and RO.STATUS_CODE = 'CONFIRMED'
  )
  JOIN  DEV_OCS.ODS.TP_ROUTE ORTE ON(RO.FK_ROUTE = ORTE.PKEY)
  JOIN  DEV_OCS.ODS.TP_LOB ORL ON(ORL.PKEY = ORTE.FK_LOB)
GROUP BY
  OCD.FK_CUSTOMERORDER,
  OCD.CODE,
  LOB.UNIQUEID,
  ORL.UNIQUEID),
CUST_ORDER_SUPPRESS AS 
(
SELECT PKEY
FROM
(select c.pkey , FK_ROUTEORDER, FK_CUSTOMER, CODE, QUANTITY ,count(s.pkey) over (partition by FK_CUSTOMERORDER  order by FK_CUSTOMERORDER asc) rn
 from
DEV_OCS.ODS.TP_CUSTOMERORDER c
join DEV_OCS.ODS.TN_CUSTOMERSERVICE s
on c.pkey =s.fk_customerorder
and TICKETNUMBER is null
) stop
join
(select FK_ROUTEORDER, FK_CUSTOMER, CODE, QUANTITY,count(s.pkey) over (partition by FK_CUSTOMERORDER  order by FK_CUSTOMERORDER asc) rn
from
DEV_OCS.ODS.TP_CUSTOMERORDER c
join DEV_OCS.ODS.TN_CUSTOMERSERVICE s
on c.pkey =s.fk_customerorder
and TICKETNUMBER is not null
and REASONCODE in ('TKT','RES')
)tkt
on   stop.FK_ROUTEORDER=tkt.FK_ROUTEORDER
and stop.FK_CUSTOMER=tkt.FK_CUSTOMER
and stop.CODE=tkt.CODE
and stop.QUANTITY=tkt.QUANTITY
and stop.rn=tkt.rn

union all

select c.pkey
from
DEV_OCS.ODS.TP_CUSTOMERORDER c
where TICKETNUMBER is not null
and REASONCODE in ('NEW','NOT','ETA')

union all

select distinct FK_CUSTOMERORDER
from
(
        select FK_CUSTOMERORDER, sum(TOTAL_CUBIC_YD_VOL) TOTAL_CUBIC_YD_VOL from TEMP_COM_RESI_VOLUMES
        where LOB_UNIQUEID in ('C')
        group by FK_CUSTOMERORDER
)a
where  nvl(TOTAL_CUBIC_YD_VOL,0)=0

union all

select a.pkey
from DEV_OCS.ODS.TP_CUSTOMERORDER A
join DEV_OCS.ODS.TP_CO_RESULT b
        on a.pkey =b.FK_CUSTOMERORDER
        and b.FK_VEHICLE is null
        and CONFIRMATIONSTATUS ='CONFIRMEDNEG'
        and( a.CUSTOMER_CANCELED ='X' or a.CUSTOMER_CUTOFF='X')
JOIN DEV_OCS.ODS.TP_LOB LOB
        ON A.FK_LOB  = LOB.PKEY and LOB.UNIQUEID <> 'O'
),
CUST_SERVICES_BEFORE_LANDFILL as (
  --- Table to hold all serviced customers before disposal trip, that includes stopped customers.
  --- customers before disposal trip are find by comparing ARRIVECUSTOMER and RESTARTTICKET less than disposal trip
  --- start.
select
  cust_pkey,
  landfill_key
from
  (
    select
      cust.pkey cust_pkey,
      rol.pkey landfill_key,
      rol.ARRIVE,
      row_number() over(
        partition by cust.pkey
        order by
          ARRIVE asc
      ) rn
    from
      (
        select
          fk_routeorder,
          co.pkey,
          DEPARTCUSTOMER
        from
           DEV_OCS.ODS.TP_customerorder co
          join  DEV_OCS.ODS.TP_co_result cor on co.pkey = cor.fk_customerorder
          and cor.fk_vehicle is null
          LEFT JOIN CUST_ORDER_SUPPRESS sp 
          ON sp.pkey = Co.pkey 
          WHERE sp.pkey IS null
        union all
        select
          fk_routeorder,
          co.pkey,
          RESTARTTICKET
        from
           DEV_OCS.ODS.TP_customerorder co
          join  DEV_OCS.ODS.TP_co_result cor on co.pkey = cor.fk_customerorder
          and cor.fk_vehicle is null
          and STOPTICKET is not null
          LEFT JOIN CUST_ORDER_SUPPRESS sp 
          ON sp.pkey = Co.pkey 
          WHERE sp.pkey IS null
      ) cust
      join  DEV_OCS.ODS.TP_ro_landfill rol on rol.fk_routeorder = cust.fk_routeorder
      and rol.fk_vehicle is null
      and rol.ARRIVE > DEPARTCUSTOMER
  )
where
  rn = 1)
select
  dspsl.landfill_key AS LANDFILL_PKEY,
  sum(TOTAL_CUBIC_YD_VOL) TOTAL_CUBIC_YD_VOL,
  sum(home_cnt) home_cnt
from
  (
    select
      FK_CUSTOMERORDER,
      sum (TOTAL_CUBIC_YD_VOL) TOTAL_CUBIC_YD_VOL,
      sum (home_cnt) home_cnt
    from
      temp_com_resi_volumes a
    group by
      FK_CUSTOMERORDER
  ) vol
  join cust_services_before_landfill dspsl on dspsl.cust_pkey = fk_customerorder
group by
  dspsl.landfill_key
) AS "v_0000017686_0000143733");

-- ************************************** COLLECTION_POINTS_WASTE_TYPES
CREATE VIEW COLLECTION_POINTS_WASTE_TYPES as 

  select    t1.DispFacId, waste_type from MART.COMRES_FACT t1 

            where  waste_Type in ('MSW','C&D','SPW') 

            and dispfacid is not null

            union 

  select    t1.DispFacId, waste_type from MART.ROLLOFF_FACT t1 

            where  waste_Type in ('MSW','C&D','SPW') 

            and dispfacid is not null;

-- ************************************** COLLECTION_POINTS_HAULING_SITES
CREATE VIEW COLLECTION_POINTS_HAULING_SITES as 

  select    t1.DepotFacID from MART.COMRES_FACT t1 

            where  waste_Type in ('MSW','C&D','SPW') 

            and dispfacid is not null

            union 

  select    t1.DepotFacID from MART.ROLLOFF_FACT t1 

            where  waste_Type in ('MSW','C&D','SPW') 

            and dispfacid is not null;

-- ************************************** COLLECTION_POINTS_DISPOSAL_SITES
CREATE VIEW COLLECTION_POINTS_DISPOSAL_SITES as 

  select    t1.DispFacId from MART.COMRES_FACT t1 

            where  waste_Type in ('MSW','C&D','SPW') 

            and dispfacid is not null

            union 

  select    t1.DispFacId from MART.ROLLOFF_FACT t1 

            where  waste_Type in ('MSW','C&D','SPW') 

            and dispfacid is not null;

-- ************************************** CENTROIDS_VW
CREATE VIEW CENTROIDS_VW AS 
--
-- Centroids fact at depot, route, lob grain - used to set defaults if value not available
--
select
DepotFacId
 	, routeid
   , lob 
  , avg(longitude) as longitude
  , avg(LATITUDe) as latitude
  , count(*)  as stop
from MART.CENTROIDS_FACT 
where service_dt between $start_date and $end_date
and (depotfacid in (select FAC_ID from MART.HAULING_SITE WHERE MARKET_AREA_CD = $MARKET_AREA))
group by  DepotFacId, routeid, lob;

-- ************************************** CENTROIDS_MASTER_VW
CREATE VIEW CENTROIDS_MASTER_VW as
--
-- Used to set defaults at the master route level if actual value not available
--
select
DepotFacId
 	, substr(ROUTEID,1,1)||'_'||substr(ROUTEID,3,2) as Group_Id
  , avg(longitude) as longitude
  , avg(LATITUDe) as latitude
  , count(*)  as stop
from MART.CENTROIDS_FACT
where service_dt between $start_date and $end_date
and (depotfacid in (select FAC_ID from MART.HAULING_SITE WHERE MARKET_AREA_CD = $MARKET_AREA))
group by  DepotFacId, substr(ROUTEID,1,1)||'_'||substr(ROUTEID,3,2);

-- ************************************** CENTROIDS_HS_VW
CREATE VIEW CENTROIDS_HS_VW as
--
-- Centroids at the depot level - used to set defaults if original not available
--
select
DepotFacId
  , avg(longitude) as longitude
  , avg(LATITUDe) as latitude
  , count(*)  as stop
from MART.CENTROIDS_FACT 
where service_dt between $start_date and $end_date
and (depotfacid in (select FAC_ID from MART.HAULING_SITE WHERE MARKET_AREA_CD = $MARKET_AREA))
group by  DepotFacId;

-- ************************************** CENTROIDS_FACT
CREATE VIEW CENTROIDS_FACT as select * from CORP_CENTROIDS_FACT;

-- ************************************** BMT_WASTE_TYPE_CONSTRAINTS
CREATE VIEW BMT_WASTE_TYPE_CONSTRAINTS as
select * from
(select
PKEY,
FAC_ID ||'_' ||case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_ID,
               	case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_TYPE,
WASTE_TYPE,
MIN_TONS,
MAX_TONS,
VOLUME_CONSTRAINT_TYPE,
VOLUME_TIME_UNIT,
NOTES,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
DATA_COLLCTION_ADD_DELETE_UPDATE,
row_number() over (partition by PKEY order by last_updated_dtm desc nulls last) as rnk
 from stg.FACILITY_WASTE_TYPE_CONSTRAINTS_BMT_DATA_COLLCTN
where FAC_TYPE != 'Collection')  where rnk=1;

-- ************************************** BMT_WASTE_TYPE_ACCEPTANCE
CREATE VIEW BMT_WASTE_TYPE_ACCEPTANCE as
--
-- NETOPT-2103:DA - remove unnecessary fields 
--
select * from
(select
FAC_ID ||'_' ||case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_ID,
               case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_TYPE,
WASTE_TYPE,
ACCEPTED_FLAG,
UNIT_COST_PER_TON ,
UNIT_PRICE_PER_TON ,
UNIT_REVENUE_PER_TON,
SOURCE ,
LAST_UPDATED_DTM ,
LAST_UPDATED_USER ,
DATA_COLLCTION_ADD_DELETE_UPDATE ,
row_number() over (partition by fac_id, fac_type, waste_type order by last_updated_dtm desc nulls last) as rnk
 from STG.FACILITY_WASTE_TYPE_BMT_DATA_COLLCTN
 )  where rnk=1;

-- ************************************** BMT_TRANSFER_LANE_WASTE_TYPE
CREATE VIEW BMT_TRANSFER_LANE_WASTE_TYPE as

select * from

(select

LANE_ORIGIN_FAC_ID ||'_' ||case when LANE_ORIGIN_FAC_TYPE = 'Transfer Station' then 'TS'

                when LANE_ORIGIN_FAC_TYPE = 'MRF Recycling' then 'MRF'

                else LANE_ORIGIN_FAC_TYPE end as LANE_ORIGIN_FAC_ID,

WASTE_TYPE,

LANE_DESTINATION_FAC_ID ||'_' ||case when LANE_DESTINATION_FAC_TYPE = 'Transfer Station' then 'TS'

                when LANE_DESTINATION_FAC_TYPE = 'MRF Recycling' then 'MRF'

                else LANE_DESTINATION_FAC_TYPE end as LANE_DESTINATION_FAC_ID, LANE_NAME,

LONG_HAUL_COST_PER_TON ,

LONG_HAUL_COST_PER_LOAD ,

AVERAGE_LOAD_SIZE_TONS ,

STATUS_IND,

SOURCE ,

LAST_UPDATED_DTM ,

LAST_UPDATED_USER ,

DATA_COLLCTION_ADD_DELETE_UPDATE ,

MIN_TONS,

MAX_TONS,

volume_constraint_type,

volume_time_unit,

row_number() over (partition by lane_origin_fac_id, lane_origin_fac_type, waste_type,

                                lane_destination_fac_id, lane_destination_fac_type order by last_updated_dtm desc nulls last) as rnk

 from STG.FACILITY_TRANSFER_LANES_BMT_DATA_COLLCTN

 )  where rnk=1;

-- ************************************** BMT_LOCATION_MATCHING
CREATE VIEW BMT_LOCATION_MATCHING as

select * from

(select

HAULING_SITE_ID,

OCS_DISPOSAL_CD,

OCS_DISPOSAL_NM,

DISPOSAL_SITE_ID ||'_' ||case when DISPOSAL_SITE_TYPE = 'Transfer Station' then 'TS'

                when DISPOSAL_SITE_TYPE = 'MRF Recycling' then 'MRF'

                else DISPOSAL_SITE_TYPE end as MATCHED_LOCATIONID_TYPE,

LAST_UPDATED_DTM ,

LAST_UPDATED_USER ,

DATA_COLLCTION_ADD_DELETE_UPDATE ,

row_number() over (partition by HAULING_SITE_ID, OCS_DISPOSAL_CD order by last_updated_dtm desc nulls last) as rnk,

CASE WHEN DISPOSAL_SITE_ID IS NULL OR DISPOSAL_SITE_ID ='' THEN 'N' ELSE 'Y' END AS OCS_CD_ASSIGNED

 from STG.FACILITY_MATCHING_DATA_BMT_DATA_COLLCTN

 )  where rnk=1 AND OCS_CD_ASSIGNED ='Y';

-- ************************************** BMT_HAULING_SITE_CAPACITY
CREATE VIEW BMT_HAULING_SITE_CAPACITY as
select * from
(select
FAC_ID ,
FAC_TYPE ,
LOB,
SUBLOB ,
TRUCK_CNT,
TRUCK_CAPACITY_CNT,
LAST_UPDATED_DTM ,
LAST_UPDATED_USER ,
DATA_COLLCTION_ADD_DELETE_UPDATE ,
row_number() over (partition by FAC_ID, SUBLOB order by last_updated_dtm desc nulls last) as rnk,
HOURS_PER_TRUCK,
PERCENTAGE_HOURS_ON_SAT AS PERCENTAGE_HOURS_ON_SAT,  -- values from the field are coming in as integers
VEHICLE_COST_PER_HOUR
 from STG.FACILITY_CAPACITY_BMT_DATA_COLLCTN
 )  where rnk=1;

-- ************************************** BMT_HAULING_SITE
CREATE VIEW BMT_HAULING_SITE as
select * from
(select
FAC_ID ,
FAC_TYPE,
WM_OWNED_FLAG,
FAC_NAME,
FAC_SHORT_NM,
ACTIVE_FLAG,
MARKET_AREA_NM,
MARKET_AREA_CD,
LATITUDE,
LONGITUDE,
ADDRESS_1,
ADDRESS_2,
CITY_NM,
STATE_CD,
ZIP_CD,
COUNTRY,
COUNTY_NM,
FIXED_COST,
UNIT_COST,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
DATA_COLLCTION_ADD_DELETE_UPDATE,
row_number() over (partition by fac_id, fac_type order by last_updated_dtm desc nulls last) as rnk,
GEO_CITY_NM,
GEO_COUNTY_NM,
GEO_STATE_CD,
GEO_ZIP_CD
 from stg.FACILITY_LOCATION_DATA_BMT_DATA_COLLCTN
 where fac_type = 'Collection')  where rnk=1;

-- ************************************** BMT_FLOW_CONTROL
CREATE VIEW BMT_FLOW_CONTROL as

select * from

(select

 PKEY ,

 RULE_TYPE ,

 LOB ,

 WASTE_TYPE ,

 METHOD_TYPE ,

 TIME_HORIZON_NM ,

 NOTES ,

 SRC_HAULING_SITE_ID ,

 SRC_COUNTY_NM ,

 SRC_CITY_NM ,

 SRC_CUSTOMER_NM ,

 SRC_MARKET_AREA_CD ,

 CASE WHEN DEST_DISPOSAL_SITE_ID = '' THEN ''

 ELSE DEST_DISPOSAL_SITE_ID ||'_' ||

    case when DEST_DISPOSAL_SITE_TYPE = 'Transfer Station' then 'TS'

        when DEST_DISPOSAL_SITE_TYPE = 'MRF Recycling' then 'MRF'

        else DEST_DISPOSAL_SITE_TYPE

    end

 END as DEST_DISPOSAL_SITE_ID,

 case when DEST_DISPOSAL_SITE_TYPE = 'Transfer Station' then 'TS'

     when DEST_DISPOSAL_SITE_TYPE = 'MRF Recycling' then 'MRF'

     else DEST_DISPOSAL_SITE_TYPE

 end as DEST_DISPOSAL_SITE_TYPE,

 DEST_COUNTY_NM ,

 DEST_CITY_NM     ,

 DEST_MARKET_AREA_CD ,

 CUSTOMER_NM ,

 MIN_TONS ,

 MAX_TONS ,

 SPECIAL_RATE_AMT ,

 LAST_UPDATED_DTM ,

 LAST_UPDATED_USER,

 DATA_COLLCTION_ADD_DELETE_UPDATE ,

row_number() over (partition by PKEY order by last_updated_dtm desc nulls last) as rnk,

 ACTIVE_FLAG,

 SRC_STATE_CD,

 DEST_STATE_CD,

 SRC_HAULING_SITE_NM,

 DEST_DISPOSAL_SITE_NM,

 SRC_OCS_DISPOSAL_CD,             --Added New column

 SRC_STATE_NM,

 DEST_STATE_NM,

 SRC_OCS_DISPOSAL_NM

 from STG.FACILITY_FLOW_CONTROL_BMT_DATA_COLLCTN

 )  where rnk=1;

-- ************************************** BMT_FACILITY_OPERATING_HOURS_VW
CREATE VIEW BMT_FACILITY_OPERATING_HOURS_VW as

select

FAC_ID 				,

FAC_NAME 			,

FAC_TYPE            ,

Monday_OPEN_AT 		,

Monday_CLOSE_AT 	,

Tuesday_OPEN_AT 	,

Tuesday_CLOSE_AT 	,

Wednesday_OPEN_AT 	,

Wednesday_CLOSE_AT  ,

Thursday_OPEN_AT 	,

Thursday_CLOSE_AT 	,

Friday_OPEN_AT 		,

Friday_CLOSE_AT 	,

Saturday_OPEN_AT 	,

Saturday_CLOSE_AT 	,

Sunday_OPEN_AT 		,

Sunday_CLOSE_AT



from

(

select

FAC_ID ||'_' ||case when FAC_TYPE = 'Transfer Station' then 'TS'

                when FAC_TYPE = 'MRF Recycling' then 'MRF'

                else FAC_TYPE end as FAC_ID,

               case when FAC_TYPE = 'Transfer Station' then 'TS'

                when FAC_TYPE = 'MRF Recycling' then 'MRF'

                else FAC_TYPE end as FAC_TYPE,

FAC_NAME,

Monday_OPEN_AT 		,

Monday_CLOSE_AT 	,

Tuesday_OPEN_AT 	,

Tuesday_CLOSE_AT 	,

Wednesday_OPEN_AT 	,

Wednesday_CLOSE_AT  ,

Thursday_OPEN_AT 	,

Thursday_CLOSE_AT 	,

Friday_OPEN_AT 		,

Friday_CLOSE_AT 	,

Saturday_OPEN_AT 	,

Saturday_CLOSE_AT 	,

Sunday_OPEN_AT 		,

Sunday_CLOSE_AT 	,

DATA_COLLCTION_ADD_DELETE_UPDATE,

row_number() over (partition by fac_id, fac_type order by last_updated_dtm desc nulls last) as rnk

from stg.FACILITY_OPERATING_HOURS_BMT_DATA_COLLCTN

)  where rnk=1

;

-- ************************************** BMT_FACILITY_CLOSED_DAYS_VW
CREATE VIEW BMT_FACILITY_CLOSED_DAYS_VW as
select FAC_ID, FAC_TYPE, 'Monday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where MONDAY_OPEN_AT='Closed'

union all 

select  FAC_ID, FAC_TYPE,'Tuesday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where Tuesday_OPEN_AT='Closed'

union all 

select FAC_ID, FAC_TYPE, 'Wednesday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where Wednesday_OPEN_AT='Closed'

union all 

select FAC_ID, FAC_TYPE,'Thursday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where Thursday_OPEN_AT='Closed'

union all 

select FAC_ID, FAC_TYPE,'Friday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where Friday_OPEN_AT='Closed'

union all 

select FAC_ID, FAC_TYPE,'Saturday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where Saturday_OPEN_AT='Closed'

union all 

select FAC_ID, FAC_TYPE,'Sunday' Closed_day
from 
DEV_ONEWM.MART.BMT_FACILITY_OPERATING_HOURS_VW
where Sunday_OPEN_AT='Closed';

-- ************************************** BMT_DISPOSAL_SITE_LOB
CREATE VIEW BMT_DISPOSAL_SITE_LOB as

select * from

(select

	FAC_ID ||'_' ||case when FAC_TYPE = 'Transfer Station' then 'TS'

	                when FAC_TYPE = 'MRF Recycling' then 'MRF'

	                else FAC_TYPE end as FAC_ID,

	LOB_CD,

	CYCLE_MINUTE_CNT,

	LAST_UPDATED_DTM,

	LAST_UPDATED_USER,

	DATA_COLLCTION_ADD_DELETE_UPDATE,

	row_number() over (partition by fac_id, fac_type, lob_cd order by last_updated_dtm desc nulls last) as rnk

	 from stg.FACILITY_DISPOSAL_SITE_LOB_BMT_DATA_COLLCTN

 where fac_type != 'Collection')  where rnk=1;

-- ************************************** BMT_DISPOSAL_SITE_CONSTRAINTS
CREATE VIEW BMT_DISPOSAL_SITE_CONSTRAINTS as
select * from
(select
PKEY,
FAC_ID ||'_' ||case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_ID,
               	case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_TYPE,
MIN_TONS,
MAX_TONS,
VOLUME_CONSTRAINT_TYPE,
VOLUME_TIME_UNIT,
NOTES,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
DATA_COLLCTION_ADD_DELETE_UPDATE,
row_number() over (partition by PKEY order by last_updated_dtm desc nulls last) as rnk
 from stg.FACILITY_LOCATION_CONSTRAINTS_DATA_BMT_DATA_COLLCTN
where FAC_TYPE != 'Collection')  where rnk=1;

-- ************************************** BMT_DISPOSAL_SITE
CREATE VIEW BMT_DISPOSAL_SITE as
select * from
(select
FAC_ID ||'_' ||case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_ID,
               case when FAC_TYPE = 'Transfer Station' then 'TS'
                when FAC_TYPE = 'MRF Recycling' then 'MRF'
                else FAC_TYPE end as FAC_TYPE,
WM_OWNED_FLAG,
FAC_NAME,
FAC_SHORT_NM,
ACTIVE_FLAG,
case when MARKET_AREA_NM = ' ' then null else MARKET_AREA_NM end as MARKET_AREA_NM,
case when MARKET_AREA_CD = ' ' then null else MARKET_AREA_CD end as MARKET_AREA_CD,
LATITUDE,
LONGITUDE,
ADDRESS_1,
ADDRESS_2,
CITY_NM,
STATE_CD,
ZIP_CD,
COUNTRY,
COUNTY_NM,
FIXED_COST,
UNIT_COST,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
DATA_COLLCTION_ADD_DELETE_UPDATE,
row_number() over (partition by fac_id, fac_type order by last_updated_dtm desc nulls last) as rnk,
GEO_CITY_NM,
GEO_COUNTY_NM,
GEO_STATE_CD,
GEO_ZIP_CD
 from stg.FACILITY_LOCATION_DATA_BMT_DATA_COLLCTN
 where fac_type != 'Collection')  where rnk=1;

-- ************************************** ACTIVE_WM_HAULING_SITES
CREATE VIEW ACTIVE_WM_HAULING_SITES as

select FAC_IDU as FAC_ID FROM STG.RDN2_FAC_LOB1 where LOB1_NM = 'Collection';

-- ************************************** ACTIVE_WM_DISPOSAL_SITES
CREATE VIEW ACTIVE_WM_DISPOSAL_SITES as (SELECT 
  "FAC_ID" 
FROM (--
-- Get all the active sites from both the PMT tables (latest quarter) and the Field Inqury and union them together
-- Note if a facility is marked as inactive in the Field Unquiry but has PMT volume then it is still considered active for our purposes
-- remove field logic
-- See assumptions aobut location type and how diosposal = landfill
--
with 
S0_PMT as (
select FAC_IDU,       'TS' as location_type
      from DEV_PMT.ODS.PMT_TRANSFER_ROLLUP
      where (DATA_DT  > '2019-07-01' ) and ROLLUP_TYPE='M' and TOT_TONS > 0      -- arbitrary date range - should likely be parameters
      group by FAC_IDU
      UNION ALL          
      select FAC_IDU, 'MRF' as location_type
      from DEV_PMT.ODS.PMT_RECYCLING_ROLLUP
      where (DATA_DT  > '2019-07-01'  ) and ROLLUP_TYPE='M' and TOT_TONS > 0
      group by FAC_IDU
      UNION ALL        
      select FAC_IDU, 'LF' as location_type
      from DEV_PMT.ODS.PMT_DISPOSAL_ROLLUP
      where (DATA_DT  > '2019-07-01'  ) and ROLLUP_TYPE='M' and TOT_TONS > 0
      group by FAC_IDU ) 
select  FAC_ID from
(
select FAC_IDU||'_'||location_type as FAC_ID from S0_PMT 
)      
) AS "v_0000017686_0000143946");

-- ************************************** ACTIVE_HAULING_SITES
CREATE VIEW ACTIVE_HAULING_SITES as (SELECT 
  "FAC_ID" 
FROM (--
--  Use CorpDB as the master list of which sites are active
--
select FAC_IDU as FAC_ID
FROM DEV_CORPDB.ODS.RDN2_FAC_LOB1 
where LOB1_NM = 'Collection'
and ACTIVE_LOB_BOOL = 1
) AS "v_0000017686_0000143761");

-- ************************************** ACTIVE_DISPOSAL_SITES
CREATE VIEW ACTIVE_DISPOSAL_SITES as

with 

S0_PMT as (

select FAC_IDU,       'TS' as location_type

      from STG.PMT_TRANSFER_ROLLUP

      where (DATA_DT  between $start_date and $end_date ) and ROLLUP_TYPE='M' and TOT_TONS > 0            group by FAC_IDU

      UNION ALL          

      select FAC_IDU, 'MRF' as location_type

      from STG.PMT_RECYCLING_ROLLUP

      where (DATA_DT  between $start_date and $end_date ) and ROLLUP_TYPE='M' and TOT_TONS > 0

      group by FAC_IDU

      UNION ALL        

      select FAC_IDU, 'LF' as location_type

      from STG.PMT_DISPOSAL_ROLLUP

      where (DATA_DT  between $start_date and $end_date ) and ROLLUP_TYPE='M' and TOT_TONS > 0

      group by FAC_IDU ) 

select  FAC_ID from

(

select FAC_IDU||'-'||location_type as FAC_ID from S0_PMT 

);

-- ************************************** WASTE_TYPE_CONSTRAINTS
CREATE VIEW WASTE_TYPE_CONSTRAINTS AS SELECT * FROM BMT_WASTE_TYPE_CONSTRAINTS 
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** WASTE_TYPE_ACCEPTANCE2
CREATE VIEW WASTE_TYPE_ACCEPTANCE2 as
WITH lf_and_ts_costs as
(
  --Get ESSBASE costs that are greater than $1.00 per ton; credible threshold for computed costs per ton
SELECT fac_id, AVG(dcpt) AS UNIT_COST_PER_TON FROM LF_DISPOSAL_COSTS lf GROUP BY FAC_ID HAVING AVG(DCPT) > 1.00
UNION ALL
SELECT FAC_ID, AVG(DCPT) AS UNIT_COST_PER_TON FROM TS_DISPOSAL_COSTS ts GROUP BY FAC_ID HAVING AVG(DCPT) > 1.00
)
select
    coalesce(t1.FAC_ID, t2.FAC_ID) as FAC_ID,
    coalesce(t1.WASTE_TYPE, t2.WASTE_TYPE) as WASTE_TYPE,
    coalesce(t1.ACCEPTED_FLAG, T2.ACCEPTED_FLAG) as ACCEPTED_FLAG,
    COALESCE(t1.UNIT_COST_PER_TON, essbase.UNIT_COST_PER_TON) as UNIT_COST_PER_TON,
    coalesce(t1.UNIT_PRICE_PER_TON, t2.UNIT_PRICE) as UNIT_PRICE_PER_TON,
    UNIT_REVENUE_PER_TON,
    MIN_TONS,
    MAX_TONS,
    case
        when t1.FAC_ID is not null then t1.SOURCE
        else 'MART'
    end as SOURCE,
    LAST_UPDATED_DTM,
    LAST_UPDATED_USER,
    volume_constraint_type,
    volume_time_unit
from
    BMT_WASTE_TYPE_ACCEPTANCE t1
    full outer join CORP_WASTE_TYPE_ACCEPTANCE t2 on t1.fac_Id = t2.fac_Id and t1.waste_type = t2.waste_Type
    left join lf_and_ts_costs essbase on T1.FAC_ID=essbase.FAC_ID or T2.FAC_ID=essbase.FAC_ID
    where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** WASTE_TYPE_ACCEPTANCE
CREATE VIEW WASTE_TYPE_ACCEPTANCE as
WITH lf_and_ts_costs as
(
  --Get ESSBASE costs that are greater than $1.00 per ton; credible threshold for computed costs per ton
--
-- NETOPT-2103:DA - remove unnecessary fields 
--
SELECT fac_id, DCPT AS UNIT_COST_PER_TON FROM LF_DISPOSAL_COSTS lf  WHERE DCPT>0
UNION ALL
SELECT fac_id, DCPT AS UNIT_COST_PER_TON FROM TS_DISPOSAL_COSTS lf  WHERE DCPT>0
)
select
    coalesce(t1.FAC_ID, t2.FAC_ID) as FAC_ID,
    coalesce(t1.WASTE_TYPE, t2.WASTE_TYPE) as WASTE_TYPE,
    coalesce(t1.ACCEPTED_FLAG, T2.ACCEPTED_FLAG) as ACCEPTED_FLAG,
    COALESCE(t1.UNIT_COST_PER_TON, essbase.UNIT_COST_PER_TON) as UNIT_COST_PER_TON,
    coalesce(t1.UNIT_PRICE_PER_TON, t2.UNIT_PRICE) as UNIT_PRICE_PER_TON,
    UNIT_REVENUE_PER_TON,
    case
        when t1.FAC_ID is not null then t1.SOURCE
        else 'MART'
    end as SOURCE,
    LAST_UPDATED_DTM,
    LAST_UPDATED_USER
from
    BMT_WASTE_TYPE_ACCEPTANCE t1
    full outer join CORP_WASTE_TYPE_ACCEPTANCE t2 on t1.fac_Id = t2.fac_Id and t1.waste_type = t2.waste_Type
    left join lf_and_ts_costs essbase on T1.FAC_ID=essbase.FAC_ID or T2.FAC_ID=essbase.FAC_ID
    where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** TURN_TIME_DEFAULTS
CREATE VIEW TURN_TIME_DEFAULTS AS WITH CORP_DEFAULTS_MA AS 

(

--

-- Calculate the Market Area defaults

--

   SELECT

      FAC_TYPE,

      MARKET_AREA_CD,

      AVG(t1.CYCLE_MINUTE_CNT) AS CYCLE_MINUTE_CNT 

   FROM

      CORP_DISPOSAL_LOB t1,

      DISPOSAL_SITE t2 

   WHERE

      t1.FAC_ID = t2.FAC_ID 

      AND MARKET_AREA_CD IS NOT NULL AND MARKET_AREA_CD != '' -- Filter out bad market areas

   GROUP BY

      FAC_TYPE,

      MARKET_AREA_CD 

),

CORP_DEFAULTS_FAC_ID AS 

(

--

-- Calculate the Facility defaults - this is for facilities which have COMM and RES but not RO for example

-- It may create some unecessary defaults

--

   SELECT

      FAC_ID,

      AVG(CYCLE_MINUTE_CNT) AS CYCLE_MINUTE_CNT 

   FROM

      CORP_DISPOSAL_LOB

   GROUP BY

   	  FAC_ID

)

SELECT

   t1.FAC_ID,

   t3.LOB_CD,

   nvl(t4.CYCLE_MINUTE_CNT, t2.CYCLE_MINUTE_CNT) AS CYCLE_MINUTE_CNT , t4.CYCLE_MINUTE_CNT as c1, t2.CYCLE_MINUTE_CNT AS c2

FROM

   DISPOSAL_SITE t1 

   LEFT JOIN

      CORP_DEFAULTS_MA T2 

      ON T1.FAC_TYPE = T2.FAC_TYPE 

      AND T1.MARKET_AREA_CD = T2.MARKET_AREA_CD 

   LEFT JOIN 

   	  CORP_DEFAULTS_FAC_ID T4 

   	  ON T1.FAC_ID = T4.FAC_ID

   CROSS JOIN

      (

         SELECT 'COMMERCIAL' AS LOB_CD UNION SELECT 'RESIDENTIAL'  UNION SELECT 'ROLLOFF'

      )

      t3

WHERE t4.CYCLE_MINUTE_CNT IS NOT NULL OR t2.CYCLE_MINUTE_CNT IS NOT NULL;

-- ************************************** TST_FLOW_CONTROL
CREATE VIEW TST_FLOW_CONTROL as select * from TST_BMT_FLOW_CONTROL
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** TRASFER_LANES_MIN_MAX_VOLUME_TO_MODEL
CREATE VIEW TRASFER_LANES_MIN_MAX_VOLUME_TO_MODEL AS 
select volume_day_lvl.LANE_DESTINATION_FAC_ID,
       volume_day_lvl.LANE_DESTINATION_FAC_TYPE,
	   volume_day_lvl.WASTE_TYPE,
       MIN_TONS * nvl(FACILITY_OPERATIONAL_DAYS_IN_SCOPE,1) MIN_TONS, 
       MAX_TONS * nvl(FACILITY_OPERATIONAL_DAYS_IN_SCOPE,1) MAX_TONS
from                    
(select
TSFRLN.LANE_DESTINATION_FAC_ID, 
TSFRLN.LANE_DESTINATION_FAC_TYPE,
TSFRLN.WASTE_TYPE,
MIN_TONS/volume_adjust_factor MIN_TONS, 
MAX_TONS/volume_adjust_factor MAX_TONS
from mart.LH_TRANSFER_LANE_WASTE_TYPE TSFRLN
left join mart.FACILITY_VOLUME_CONSTRAINT_ADJUST_FACTOR adj 
on adj.FAC_ID =TSFRLN.LANE_DESTINATION_FAC_ID
and adj.FAC_TYPE=TSFRLN.LANE_DESTINATION_FAC_TYPE
) volume_day_lvl
left join FACILITY_OPERATION_DAYS_IN_SCOPE oprntl_days
on volume_day_lvl.LANE_DESTINATION_FAC_ID = oprntl_days.FAC_ID
and volume_day_lvl.LANE_DESTINATION_FAC_TYPE = oprntl_days.FAC_TYPE;

-- ************************************** TRANSFER_LANES
CREATE VIEW TRANSFER_LANES as 

 select distinct  lane_origin_code||'_TS' as lane_origin_fac_id,  LANE_NAME,

                  lane_destination_code ||'_' ||case  when LANE_DESTINATION_TYPE = 'MRF Recycling'   then 'MRF' 

                                                 else LANE_DESTINATION_TYPE end as lane_destination_fac_id

  from TMS_CONTRACT_RATES_VW;

-- ************************************** TRANSFER_LANE_WASTE_TYPE
CREATE VIEW TRANSFER_LANE_WASTE_TYPE as
select
coalesce( t1.LANE_ORIGIN_FAC_ID, t2.LANE_ORIGIN_FAC_ID) as LANE_ORIGIN_FAC_ID,
coalesce( t1.WASTE_TYPE, t2.WASTE_TYPE) as WASTE_TYPE,
coalesce( t1.LANE_DESTINATION_FAC_ID, t2.LANE_DESTINATION_FAC_ID) as LANE_DESTINATION_FAC_ID,
coalesce(t1.LANE_NAME, t2.LANE_NAME) as LANE_NAME,
--BMT data as preference
CASE WHEN t1.LANE_ORIGIN_FAC_ID is not null then t1.LONG_HAUL_COST_PER_TON else t2.LONG_HAUL_COST end AS LONG_HAUL_COST_PER_TON,
LONG_HAUL_COST_PER_LOAD ,
--BMT data as preference
CASE WHEN t1.LANE_ORIGIN_FAC_ID is not null then t1.AVERAGE_LOAD_SIZE_TONS else t2.AVERAGE_LOAD_SIZE_TONS end as AVERAGE_LOAD_SIZE_TONS,
case when t1.STATUS_IND is null then 'A' else t1.STATUS_IND end as STATUS_IND ,
case when t1.LANE_ORIGIN_FAC_ID is not null then t1.SOURCE else 'MART' end as SOURCE,
LAST_UPDATED_DTM ,
LAST_UPDATED_USER ,
DATA_COLLCTION_ADD_DELETE_UPDATE ,
MIN_TONS,
MAX_TONS,
volume_constraint_type,
volume_time_unit
from BMT_TRANSFER_LANE_WASTE_TYPE t1 full outer join CORP_TRANSFER_LANE_WASTE_TYPE t2
on  t1.LANE_ORIGIN_FAC_ID = t2.LANE_ORIGIN_FAC_ID and t1.WASTE_TYPE = T2.waste_type and
t1.LANE_DESTINATION_FAC_ID = t2.LANE_DESTINATION_FAC_ID
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** THIRD_PARTY_CPS
CREATE VIEW THIRD_PARTY_CPS AS

WITH AVERAGE_DAILY_3P_FLOWS AS (

SELECT

    fac_id, waste_type, AVG(avg_third_party) * (COUNTDAYS($start_Date, $end_Date, 1) + COUNTDAYS($start_Date, $end_Date, 0)) AS tons  -- Counts the days and multiply it by the average

    FROM PMT_DISPOSAL_3P

    GROUP BY fac_Id, waste_type

    HAVING AVG(avg_third_party)  > 0

UNION ALL

    SELECT fac_id, waste_type, AVG(avg_third_party) * (COUNTDAYS($start_Date, $end_Date, 1) + COUNTDAYS($start_Date, $end_Date, 0)) AS tons

    FROM pmt_transfer_3p

    GROUP BY fac_id, waste_type

    HAVING AVG(avg_third_party)  > 0)

SELECT

    '3PGROUP' AS group_id

    , NULL AS route_id

    , '3PDEPOT' AS depotfacid

    , FAC_ID AS dispfacid

    , 0 AS wm_collection_flag

    , '3PLOB' AS lob

    , '3PLOB' AS sublob

    , waste_type

    , tons

    , 1 AS nbr_loads

    , 0 AS stemlegs

    , 0 AS disposallegs

    , -98.5696 AS longitude

    , 39.828 AS latitude

    , 1 AS load_seq

    , NULL AS house

    , NULL AS street_name

    , NULL AS city

    , NULL AS zip

    , 1 AS LAST_LOAD_FLAG

    , null AS GEO_COUNTY_NM

    , null AS GEO_CITY_NM

    , null AS GEO_STATE_CD

    , null AS GEO_ZIP_CD

    , NULL AS customer_name

    , NULL AS ocs_disposal_cd

    , NULL AS ocs_disposal_description

    , 0 AS return_legs

            , NULL AS DISPOSAL_TRIP_TYPE

        , 1 AS dco_frozen_flag

FROM AVERAGE_DAILY_3P_FLOWS

WHERE waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)

;

-- ************************************** test_kp
CREATE VIEW test_kp as
WITH temp_time_increment AS (
    -- a version of the CO_EVENTS_TIME_INCREMENT view, but not dependent on UI_PARMS
    SELECT
      co.HAULING_SITE
      , co.sublob
      , co.ro_key
      , co.event_type
      , co.event_start
      , co.event_end
    -- Here we are looking for the best version of the previous event's end time and the next
    -- event's start time
      , MIN(co.event_end) OVER (PARTITION BY co.HAULING_SITE, co.ro_key ORDER BY event_start ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS previous_end
      , MAX(co.event_start) OVER (PARTITION BY co.HAULING_SITE, co.ro_key ORDER BY event_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS next_start
      , TIMESTAMPDIFF(second, previous_end, event_start)/3600 AS travel_time_to_hrs
      , TIMESTAMPDIFF(second, event_end, next_start)/3600 AS travel_time_from_hrs
      , TIMESTAMPDIFF(second, event_start, event_end)/3600 AS event_hrs
    FROM co_events co
    INNER JOIN good_routes_for_timing rec
        ON co.HAULING_SITE=rec.HAULING_SITE
        AND co.ro_key=rec.ro_key
        AND co.service_dt=rec.service_dt
),
good_route_stem_disp_return AS (
    -- For good routes, we can calculate disposal return times simply
	SELECT 
		HAULING_SITE
		, sublob
		, ro_key
		, SUM(COALESCE(travel_time_to_hrs, 0) + COALESCE(travel_time_from_hrs,0) + COALESCE(event_hrs,0)) AS stem_disp_return
		, TIMESTAMPDIFF(seconds, MIN(event_start), MAX(event_end))/3600 AS route_time
		, CASE WHEN route_time = 0 THEN 0 ELSE stem_disp_return/route_time END AS pct_stem
	FROM temp_time_increment
	WHERE UPPER(event_type) IN ('LANDFILL','LEAVE YARD', 'ARRIVE YARD')
	GROUP BY HAULING_SITE, sublob, ro_key
)
SELECT
	sublob
	, COUNT(ro_key) AS record_count
	, SUM(stem_disp_return) AS stem_disp_return
	, SUM(route_time) AS route_time
	, case when SUBLOB = 'ROOT' then 0.5 ELSE AVG(pct_stem) END AS avg_pct_stem 
FROM good_route_stem_disp_return
GROUP BY sublob;

-- ************************************** SCALE_CONSTRAINTS_FACILITIES
CREATE VIEW SCALE_CONSTRAINTS_FACILITIES AS

SELECT

FAC_ID,

CASE WHEN MONDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Monday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Monday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Monday_CLOSE_AT,2))  - TRY_TO_NUMBER(RIGHT(Monday_OPEN_AT,2)))/60,8) END AS MONDAY_OPERATING_HOURS,

CASE WHEN TUESDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Tuesday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Tuesday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Tuesday_CLOSE_AT,2))  - TRY_TO_NUMBER(RIGHT(Tuesday_OPEN_AT,2)))/60,8) END AS TUESDAY_OPERATING_HOURS,

CASE WHEN WEDNESDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Wednesday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Wednesday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Wednesday_CLOSE_AT,2))  - TRY_TO_NUMBER(RIGHT(Wednesday_OPEN_AT,2)))/60,8) END AS WEDNESDAY_OPERATING_HOURS,

CASE WHEN THURSDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Thursday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Thursday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Thursday_CLOSE_AT,2))  - TRY_TO_NUMBER(RIGHT(Thursday_OPEN_AT,2)))/60,8) END AS THURSDAY_OPERATING_HOURS,

CASE WHEN FRIDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Friday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Friday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Friday_CLOSE_AT,2)) - TRY_TO_NUMBER(RIGHT(Friday_OPEN_AT,2)))/60,8) END AS FRIDAY_OPERATING_HOURS,

CASE WHEN SATURDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Saturday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Saturday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Saturday_CLOSE_AT,2)) - TRY_TO_NUMBER(RIGHT(Saturday_OPEN_AT,2)))/60,4) END AS SATURDAY_OPERATING_HOURS,

CASE WHEN SUNDAY_OPEN_AT='Closed' THEN 0 ELSE

    COALESCE(TRY_TO_NUMBER(LEFT(Sunday_CLOSE_AT,2)) -TRY_TO_NUMBER(LEFT(Sunday_OPEN_AT,2)) + (TRY_TO_NUMBER(RIGHT(Sunday_CLOSE_AT,2)) - TRY_TO_NUMBER(RIGHT(Sunday_OPEN_AT,2)))/60,0) END AS SUNDAY_OPERATING_HOURS,

MODEL_MONDAYS,

MODEL_TUESDAYS,

MODEL_WEDNESDAYS,

MODEL_THURSDAYS,

MODEL_FRIDAYS,

MODEL_SATURDAYS,

MODEL_SUNDAYS,

(MODEL_MONDAYS*MONDAY_OPERATING_HOURS +

 MODEL_TUESDAYS*TUESDAY_OPERATING_HOURS +

 MODEL_WEDNESDAYS*WEDNESDAY_OPERATING_HOURS +

 MODEL_THURSDAYS*THURSDAY_OPERATING_HOURS +

 MODEL_FRIDAYS*FRIDAY_OPERATING_HOURS +

 MODEL_SATURDAYS*SATURDAY_OPERATING_HOURS +

 MODEL_SUNDAYS*SUNDAY_OPERATING_HOURS) AS HOURLY_FACTOR --Number to multiply the hourly capacity rate by

FROM DISPOSAL_SITE n

LEFT JOIN SCALE_CONSTRAINTS SC;

-- ************************************** RESIDENTIAL_DISPOSAL_LEG_TIME
CREATE VIEW RESIDENTIAL_DISPOSAL_LEG_TIME as (SELECT 
  "LANDFILL_PKEY", 
  "NET_TRAVEL_TO_DSPS" 
FROM (WITH RESI_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL AS
(
SELECT event_start EVENT_BEFORE_LANDFILL, ro_key FK_ROUTEORDER
FROM DEV_ONEWM.MART.co_events
WHERE event_type= 'Leave Yard' AND lob='RESIDENTIAL'

UNION ALL

SELECT event_end , ro_key
FROM DEV_ONEWM.MART.co_events
WHERE event_type= 'CUSTOMER' AND lob='RESIDENTIAL'

UNION ALL

SELECT event_stop , ro_key
FROM DEV_ONEWM.MART.co_events
WHERE event_type= 'CUSTOMER' AND lob='RESIDENTIAL' AND event_stop IS NOT null
),
RESI_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT AS
(SELECT * FROM
(SELECT FK_ROUTEORDER, LANDFILL_PKEY, ARRIVE, EVENT_BEFORE_LANDFILL, ROW_NUMBER () OVER(PARTITION BY LANDFILL_PKEY ORDER BY ARRIVE asc) RN
FROM
(
SELECT ROL.FK_ROUTEORDER, ROL.PKEY LANDFILL_PKEY , ROL.ARRIVE  , max(EVENT_BEFORE_LANDFILL) EVENT_BEFORE_LANDFILL
FROM DEV_OCS.ODS.TP_RO_LANDFILL  ROL
JOIN RESI_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL EVNTS_BFR
ON EVNTS_BFR.fk_routeorder = ROL.FK_ROUTEORDER
AND ROL.FK_VEHICLE IS NULL
AND ROL.ARRIVE >= EVNTS_BFR.EVENT_BEFORE_LANDFILL
GROUP BY ROL.FK_ROUTEORDER, ROL.PKEY  , ROL.ARRIVE
) A
) A1
WHERE A1.RN=1
)

select LANDFILL_PKEY, 
case when (TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0)) >= 120
     then null
     else  (TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0))
     end NET_TRAVEL_TO_DSPS
from
(select LANDFILL_PKEY, max(TRAVEL_TO_DSPSL_MINUTE) TRAVEL_TO_DSPSL_MINUTE, sum(NET_MEAL_TIME) NET_MEAL_TIME, sum(NET_DOWN_TIME) NET_DOWN_TIME
FROM
(

SELECT LANDFILL_PKEY,
TIMESTAMPDIFF(MINUTE, EVENT_BEFORE_LANDFILL, ARRIVE) TRAVEL_TO_DSPSL_MINUTE,
TIMESTAMPDIFF(MINUTE, DOWNSTART,DOWNEND) DOWN_TIME,
TIMESTAMPDIFF(MINUTE, LUNCHSTART,LUNCHEND) MEAL_TIME,
CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)
     THEN MEAL_TIME - NVL(DOWN_TIME, 0)
     ELSE MEAL_TIME
END NET_MEAL_TIME,
CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)
	 THEN DOWN_TIME - NVL(MEAL_TIME,0)
	 ELSE DOWN_TIME
END NET_DOWN_TIME,
case when (TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0)) >=120
     then null
     else (TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0))
end NET_TRAVEL_TO_DSPS

FROM
RESI_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT T1

LEFT JOIN DEV_OCS.ODS.TP_RO_DOWNTIME ROD
ON ROD.FK_ROUTEORDER = T1.FK_ROUTEORDER
AND ROD.FK_VEHICLE IS NULL
AND ROD.DOWNSTART  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
AND ROD.DOWNEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
LEFT JOIN DEV_OCS.ODS.TP_RO_LUNCH RLUNCH
ON RLUNCH.FK_ROUTEORDER = T1.FK_ROUTEORDER
AND RLUNCH.LUNCHSTART BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
AND RLUNCH.LUNCHEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
AND RLUNCH.FK_VEHICLE IS NULL
)b GROUP by LANDFILL_PKEY
)b1
) AS "v_0000017686_0000143721");

-- ************************************** MA_ASSIGNMENT
CREATE VIEW MA_ASSIGNMENT as (SELECT 
  "FAC_ID", 
  "FAC_MA_NM", 
  "FAC_MA_IDU" 
FROM (    with TONNAGE_BASED as (
      select * from
          ( select MATCHED_LOCATION_CODE as FAC_ID, FAC_MA_NM, FAC_MA_IDU,
            sum(TONNAGE) as TONNAGE,
            row_number() over (partition by MATCHED_LOCATION_CODE order by SUM(TONNAGE) desc nulls last) as rnk    -- break the tie if facility in multiple MAs
                                                                                                      -- Choose one with highest tonnage
            from DEV_ONEWM.MART.LOCATION_MATCHING_SAS t1,
                DEV_CORPDB.ODS.RDN2_FAC_FULL t2
            where  t1.HAULING_SITE_CD = t2.FAC_IDU  and MATCHED_LOCATION_CODE not like 'S0%'          -- not only S0
                                                    and MATCHED_LOCATION_CODE not like 'S1%'
                                                    and MATCHED_LOCATION_CODE not like 'S5%'
            group by MATCHED_LOCATION_CODE, FAC_MA_NM, FAC_MA_IDU )
      where rnk=1)
    select FAC_ID, FAC_MA_NM, FAC_MA_IDU from TONNAGE_BASED
    union all
    select FAC_ID, FAC_MA_NM, FAC_MA_IDU 
    from DEV_ONEWM.MART.TMS_MARKET_AREAS WHERE NOT EXISTS 
    (select 1 from TONNAGE_BASED where TONNAGE_BASED.FAC_ID = TMS_MARKET_AREAS.FAC_ID)
) AS "v_0000017686_0000143792");

-- ************************************** LOCATION_MATCHING
CREATE VIEW LOCATION_MATCHING as select * from BMT_LOCATION_MATCHING

where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** LH_SITE
CREATE VIEW LH_SITE AS
--
-- NETOPT-2103:DA - remove unnecessary fields 
--
  select 
  substring(FAC_ID,1,6) as FAC_ID,
  CASE when substring(FAC_ID,8) = 'TS' then 'Transfer Station'
       when substring(FAC_ID,8) = 'MRF' then 'MRF Recycling' else
                  substring(FAC_ID,8) end  as FAC_TYPE,
  WM_OWNED_FLAG,
  FAC_NAME,
  FAC_SHORT_NM,
  case when ACTIVE_FLAG = 'Y' then 'A' when ACTIVE_FLAG = 'N' then 'I' else ACTIVE_FLAG end as ACTIVE_FLAG,  
  MARKET_AREA_NM,
  MARKET_AREA_CD,
  LATITUDE,
  LONGITUDE,
  ADDRESS_1,
  ADDRESS_2,
  CITY_NM,
  STATE_CD,
  ZIP_CD,
  COUNTRY_CD,
  COUNTY_NM,
  FIXED_COST,          
  UNIT_COST,
  SOURCE,
  LAST_UPDATED_DTM,
  LAST_UPDATED_USER,
  Monday_OPEN_AT,
  Monday_CLOSE_AT,
  Tuesday_OPEN_AT,
  Tuesday_CLOSE_AT,
  Wednesday_OPEN_AT,
  Wednesday_CLOSE_AT,
  Thursday_OPEN_AT,
  Thursday_CLOSE_AT,
  Friday_OPEN_AT,
  Friday_CLOSE_AT,
  Saturday_OPEN_AT,
  Saturday_CLOSE_AT,
  Sunday_OPEN_AT,
  Sunday_CLOSE_AT,
  GEO_CITY_NM,
  GEO_COUNTY_NM,
  GEO_STATE_CD,
  GEO_ZIP_CD
  from DISPOSAL_SITE 


  union all

  select
  FAC_ID,
  'Collection' as FAC_TYPE,
  WM_OWNED_FLAG,
  FAC_NAME,
  FAC_SHORT_NM,
  ACTIVE_FLAG,
  MARKET_AREA_NM,
  MARKET_AREA_CD,
  LATITUDE,
  LONGITUDE,
  ADDRESS_1,
  ADDRESS_2,
  CITY_NM,
  STATE_CD,
  ZIP_CD,
  COUNTRY_CD,
  COUNTY_NM, 
  NULL, 
  NULL,
  SOURCE,
  LAST_UPDATED_DTM,
  LAST_UPDATED_USER,
  Monday_OPEN_AT,
  Monday_CLOSE_AT,
  Tuesday_OPEN_AT,
  Tuesday_CLOSE_AT,
  Wednesday_OPEN_AT,
  Wednesday_CLOSE_AT,
  Thursday_OPEN_AT,
  Thursday_CLOSE_AT,
  Friday_OPEN_AT,
  Friday_CLOSE_AT,
  Saturday_OPEN_AT,
  Saturday_CLOSE_AT,
  Sunday_OPEN_AT,
  Sunday_CLOSE_AT,
  GEO_CITY_NM,
  GEO_COUNTY_NM,
  GEO_STATE_CD,
  GEO_ZIP_CD
  from HAULING_SITE;

-- ************************************** LH_LIST_WASTE_TYPE_ALL
CREATE VIEW LH_LIST_WASTE_TYPE_ALL

as select * from LH_LIST_WASTE_TYPE 

union all select 'ALL','All Waste Types';

-- ************************************** LH_LIST_LOB_ALL
CREATE VIEW LH_LIST_LOB_ALL as

select  * from LH_LIST_LOB 

union all select 'All LOBs';

-- ************************************** LH_LIST_HAULING_SITE_MA
CREATE VIEW LH_LIST_HAULING_SITE_MA as

select

FAC_ID,FAC_NAME,FAC_TYPE, MARKET_AREA_CD, MARKET_AREA_NM from HAULING_SITE;

-- ************************************** LH_LIST_FLOW_CONTROL_RULE
CREATE VIEW LH_LIST_FLOW_CONTROL_RULE 

as

SELECT SRC || ' - ' || DEST as RULE_TYPE

FROM LH_LIST_FLOW_CONTROL_RULE_SRC cross join LH_LIST_FLOW_CONTROL_RULE_DEST;

-- ************************************** LH_LIST_DISPOSAL_SITE_MA
CREATE VIEW LH_LIST_DISPOSAL_SITE_MA AS

select 

substring(FAC_ID,1,6) as FAC_ID,

FAC_NAME,

CASE when substring(FAC_ID,8) = 'TS' then 'Transfer Station'

     when substring(FAC_ID,8) = 'MRF' then 'MRF Recycling' else

                substring(FAC_ID,8) end  as FAC_TYPE,MARKET_AREA_CD, MARKET_AREA_NM

                 from DISPOSAL_SITE;

-- ************************************** LH_LIST_COUNTY
CREATE VIEW LH_LIST_COUNTY AS

select COUNTY_NM, MARKET_AREA_CD, MARKET_AREA_NM from DISPOSAL_SITE where COUNTY_NM is not null and market_area_cd is not null

union 

select COUNTY_NM, MARKET_AREA_CD, MARKET_AREA_NM from HAULING_SITE  where COUNTY_NM is not null  and market_area_cd is not null;

-- ************************************** LH_LIST_CITY
CREATE VIEW LH_LIST_CITY AS

select CITY_NM, MARKET_AREA_CD, MARKET_AREA_NM from DISPOSAL_SITE where CITY_NM is not null and market_area_cd is not null

union 

select CITY_NM, MARKET_AREA_CD, MARKET_AREA_NM from HAULING_SITE  where CITY_NM is not null  and market_area_cd is not null;

-- ************************************** HAULING_SITE_CAPACITY
CREATE VIEW HAULING_SITE_CAPACITY as
select
coalesce( t1.FAC_ID, t2.FAC_ID) as FAC_ID,
coalesce( t1.SUBLOB, t2.SUBLOB) as SUBLOB,
coalesce( t1.LOB, t2.LOB) as LOB,
coalesce( t1.TRUCK_CNT , t2.TRUCK_CNT) as TRUCK_CNT, --   Corporate Truck count versus BMT
TRUCK_CAPACITY_CNT,
LAST_UPDATED_DTM,
LAST_UPDATED_USER,
HOURS_PER_TRUCK ,
coalesce( t1.PERCENTAGE_HOURS_ON_SAT, t2.PERCENTAGE_HOURS_ON_SAT) as PERCENTAGE_HOURS_ON_SAT,
t2.LCPH AS LABOR_COST_PER_HOUR ,     
t2.MCPH AS MAINTENANCE_COST_PER_HOUR,     
t2.FCPH AS FUEL_COST_PER_HOUR,
coalesce(t1.VEHICLE_COST_PER_HOUR , t2.VCPH) AS VEHICLE_COST_PER_HOUR      -- Essbase truck count versus BMT.
from BMT_HAULING_SITE_CAPACITY t1 full outer join
     ( SELECT coalesce(t1.FAC_ID, t2.FAC_ID) as FAC_ID,                     -- Full outer join the 2 corporate tables to get all the VCPH and Truck Count
              coalesce(t1.SUBLOB, t2.SUBLOB) as SUBLOB,
              coalesce(t1.LOB, t2.LOB) as LOB, TRUCK_CNT, PERCENTAGE_HOURS_ON_SAT,LCPH,MCPH,FCPH,VCPH from
        ( SELECT FAC_ID, t1.SUBLOB, LOB, TRUCK_CNT, PERCENTAGE_HOURS_ON_SAT from
          CORP_HAULING_SITE_CAPACITY t1, SUBLOB_HIERARCHY t2 where t1.sublob = t2.sublob) t1 full outer join    -- get LOB given SUBLOB
            (
              SELECT FAC_ID
               ,SUBLOB_CD as SUBLOB
               ,LOB_CD as LOB         
               ,lcph
               ,mcph
               ,fcph
               ,vcph
             FROM CORP_HAULING_SITE_COSTS  -- Already exploded from LOB to SUBLOB
            ) t2
            on t1.fac_id = t2.fac_id and t1.sublob = t2.sublob
      ) t2
      on t1.fac_id = t2.fac_id and t1.sublob = t2.sublob
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** GEOCODE_INCOMPLETE
CREATE VIEW GEOCODE_INCOMPLETE as
WITH ALL_LAT_LONG AS
(SELECT
    RFACT.LATITUDE,
    RFACT.LONGITUDE,
	HS.MARKET_AREA_CD
FROM MART.CORP_COMRES_FACT RFACT
JOIN MART.HAULING_SITE HS
ON HS.FAC_ID =RFACT.DEPOTFACID

UNION

SELECT
    
    RFACT.LATITUDE,
    RFACT.LONGITUDE,
	HS.MARKET_AREA_CD
FROM MART.CORP_ROLLOFF_FACT RFACT
JOIN MART.HAULING_SITE HS
ON HS.FAC_ID =RFACT.DEPOTFACID
)
SELECT DISTINCT
    truncate(corp.LATITUDE,6) as LATITUDE,                          truncate(corp.LONGITUDE,6) as LONGITUDE , MARKET_AREA_CD
FROM ALL_LAT_LONG corp
LEFT JOIN GEOCODE_RESULTS geo
    ON
        TRUNCATE(corp.LATITUDE,6)=TRUNCATE(geo.LATITUDE,6) AND            TRUNCATE(corp.LONGITUDE,6)=TRUNCATE(geo.LONGITUDE,6)
WHERE geo.LONGITUDE IS NULL OR geo.LATITUDE IS NULL;

-- ************************************** GEOCODE_ALL_VW
CREATE VIEW GEOCODE_ALL_VW AS   
 WITH ALL_LAT_LONG AS
(SELECT distinct
    truncate(LATITUDE,6) as LATITUDE,                          
    truncate(LONGITUDE,6) as LONGITUDE
FROM MART.CORP_COMRES_FACT WHERE DEPOTFACID in (Select FAC_ID from HAULING_SITE where MARKET_AREA_CD='K00113' and 
                                                MARKET_AREA_NM = 'WM of New England')
UNION
SELECT distinct
   truncate(LATITUDE,6) as LATITUDE,                          
   truncate(LONGITUDE,6) as LONGITUDE
FROM MART.CORP_ROLLOFF_FACT WHERE DEPOTFACID in (Select FAC_ID from HAULING_SITE where MARKET_AREA_CD='K00113' and 
                                                MARKET_AREA_NM = 'WM of New England')
 )
 select row_number() over(order by LATITUDE,LONGITUDE) IDENTIFIER,
  LATITUDE,                          
  LONGITUDE
    from ALL_LAT_LONG;

-- ************************************** FLOW_CONTROL
CREATE VIEW FLOW_CONTROL as select * from BMT_FLOW_CONTROL
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** FACILITY_WASTE_TYPE_ACCEPTANCE_MIN_MAX_VOLUME_TO_MODEL
CREATE VIEW FACILITY_WASTE_TYPE_ACCEPTANCE_MIN_MAX_VOLUME_TO_MODEL AS 
select volume_day_lvl.FAC_ID,
       volume_day_lvl.FAC_TYPE,
	   volume_day_lvl.WASTE_TYPE,
       MIN_TONS * nvl(FACILITY_OPERATIONAL_DAYS_IN_SCOPE,1) MIN_TONS, 
       MAX_TONS * nvl(FACILITY_OPERATIONAL_DAYS_IN_SCOPE,1) MAX_TONS
from                    
(select
lhswa.FAC_ID, 
lhswa.FAC_TYPE,
lhswa.WASTE_TYPE,
MIN_TONS/volume_adjust_factor MIN_TONS, 
MAX_TONS/volume_adjust_factor MAX_TONS
from mart.LH_WASTE_TYPE_ACCEPTANCE lhswa
left join mart.FACILITY_VOLUME_CONSTRAINT_ADJUST_FACTOR adj 
on adj.FAC_ID =lhswa.FAC_ID
and adj.FAC_TYPE=lhswa.FAC_TYPE
) volume_day_lvl
left join FACILITY_OPERATION_DAYS_IN_SCOPE oprntl_days
on volume_day_lvl.FAC_ID = oprntl_days.FAC_ID
and volume_day_lvl.FAC_TYPE = oprntl_days.FAC_TYPE;

-- ************************************** FACILITY_MIN_MAX_VOLUME_TO_MODEL
CREATE VIEW FACILITY_MIN_MAX_VOLUME_TO_MODEL AS 
select volume_day_lvl.FAC_ID,
       volume_day_lvl.FAC_TYPE,
       MIN_TONS * nvl(FACILITY_OPERATIONAL_DAYS_IN_SCOPE,1) MIN_TONS, 
       MAX_TONS * nvl(FACILITY_OPERATIONAL_DAYS_IN_SCOPE,1) MAX_TONS
from                    
(select
lhs.FAC_ID, 
lhs.FAC_TYPE,
MIN_TONS/volume_adjust_factor MIN_TONS, 
MAX_TONS/volume_adjust_factor MAX_TONS
from mart.LH_SITE lhs
left join mart.FACILITY_VOLUME_CONSTRAINT_ADJUST_FACTOR adj 
on adj.FAC_ID =lhs.FAC_ID
and adj.FAC_TYPE=lhs.FAC_TYPE
) volume_day_lvl
left join FACILITY_OPERATION_DAYS_IN_SCOPE oprntl_days
on volume_day_lvl.FAC_ID = oprntl_days.FAC_ID
and volume_day_lvl.FAC_TYPE = oprntl_days.FAC_TYPE;

-- ************************************** FACILITY_DISPOSAL_COST
CREATE VIEW FACILITY_DISPOSAL_COST AS

(

  SELECT FAC_ID, WASTE_TYPE, ROUND(DISPOSAL_COST,2) AS PRICE, 'OCS' AS SRC  FROM OCS_DISPOSAL_COST ODC 



  UNION



  SELECT FAC_ID,  WASTE_TYPE, ROUND(DISPOSAL_COST,2) AS PRICE, 'MBP' AS SRC FROM MBP_DISPOSAL_COST MDC



  UNION 



  SELECT FAC_ID, WASTE_TYPE, ROUND(DISPOSAL_COST,2) AS PRICE,'WBJ' AS SRC FROM WBJ_DISPOSAL_COST WDC

);

-- ************************************** ENO_GREENFLOW_SOLUTION_RESULTS_VW
CREATE VIEW ENO_GREENFLOW_SOLUTION_RESULTS_VW AS
SELECT
     BASE.ENO_ID
    ,CAST(BASE.COLLECTION_POINT_ID AS BIGINT) AS COLLECTION_POINT_ID
    ,CASE WHEN BASE.SUBLOB = '3PLOB' THEN '3PLOB' ELSE BASE.LOB END AS LOB
    ,BASE.SUBLOB
  	,BASE.WASTE_TYPE
--B_DEPOT
    ,BASE.DEPOT_FAC_ID B_DEPOT_FAC_ID
    ,MFP.FAC_TYPE AS B_DEPOT_FAC_TYPE
    ,MFP.FAC_NAME AS B_DEPOT_FAC_NAME
    ,NVL(MFP.FAC_SHORT_NM, MFP.FAC_NAME) AS B_DEPOT_FAC_SHORT_NM
    ,MFP.WM_OWNED_FLAG AS B_DEPOT_WM_OWNED_FLAG
    ,MFP.LATITUDE AS B_DEPOT_LATITUDE
    ,MFP.LONGITUDE AS B_DEPOT_LONGITUDE
    ,MFP.GEO_CITY_NM AS B_DEPOT_GEO_CITY_NM
    ,MFP.GEO_COUNTY_NM AS B_DEPOT_GEO_COUNTY_NM
    ,MFP.GEO_STATE_CD AS B_DEPOT_GEO_STATE_CD
    ,MFP.GEO_ZIP_CD AS B_DEPOT_GEO_ZIP_CD
--B_DISP
    ,BASE.DISP_FAC_ID B_DISP_FAC_ID
    ,MFP2.FAC_TYPE AS B_DISP_FAC_TYPE
    ,MFP2.FAC_NAME AS B_DISP_FAC_NAME
    ,NVL(MFP2.FAC_SHORT_NM, MFP2.FAC_NAME) AS B_DISP_FAC_SHORT_NM
    ,MFP2.WM_OWNED_FLAG AS B_DISP_WM_OWNED_FLAG
    ,MFP2.LATITUDE AS B_DISP_LATITUDE
    ,MFP2.LONGITUDE AS B_DISP_LONGITUDE
    ,MFP2.GEO_CITY_NM AS B_DISP_GEO_CITY_NM
    ,MFP2.GEO_COUNTY_NM AS B_DISP_GEO_COUNTY_NM
    ,MFP2.GEO_STATE_CD AS B_DISP_GEO_STATE_CD
    ,MFP2.GEO_ZIP_CD AS B_DISP_GEO_ZIP_CD
--S_DEPOT
    ,DCO.DEPOT_FAC_ID S_DEPOT_FAC_ID
    ,MFP3.FAC_TYPE AS S_DEPOT_FAC_TYPE
    ,MFP3.FAC_NAME AS S_DEPOT_FAC_NAME
    ,NVL(MFP3.FAC_SHORT_NM, MFP3.FAC_NAME)  AS S_DEPOT_FAC_SHORT_NM
    ,MFP3.WM_OWNED_FLAG AS S_DEPOT_WM_OWNED_FLAG
    ,MFP3.LATITUDE AS S_DEPOT_LATITUDE
    ,MFP3.LONGITUDE AS S_DEPOT_LONGITUDE
    ,MFP3.GEO_CITY_NM AS S_DEPOT_GEO_CITY_NM
    ,MFP3.GEO_COUNTY_NM AS S_DEPOT_GEO_COUNTY_NM
    ,MFP3.GEO_STATE_CD AS S_DEPOT_GEO_STATE_CD
    ,MFP3.GEO_ZIP_CD AS S_DEPOT_GEO_ZIP_CD
--S_DISP
    ,DCO.DISP_FAC_ID S_DISP_FAC_ID
    ,MFP4.FAC_TYPE AS S_DISP_FAC_TYPE
    ,MFP4.FAC_NAME AS S_DISP_FAC_NAME
    ,NVL(MFP4.FAC_SHORT_NM, MFP4.FAC_NAME)  AS S_DISP_FAC_SHORT_NM
    ,MFP4.WM_OWNED_FLAG AS S_DISP_WM_OWNED_FLAG
    ,MFP4.LATITUDE AS S_DISP_LATITUDE
    ,MFP4.LONGITUDE AS S_DISP_LONGITUDE
    ,MFP4.GEO_CITY_NM AS S_DISP_GEO_CITY_NM
    ,MFP4.GEO_COUNTY_NM AS S_DISP_GEO_COUNTY_NM
    ,MFP4.GEO_STATE_CD AS S_DISP_GEO_STATE_CD
    ,MFP4.GEO_ZIP_CD AS S_DISP_GEO_ZIP_CD
  	,BASE.TONS
  	,BASE.LOADS
    ,BASE.ROUTE_ID
    ,BASE.LOAD_SEQ
  	,BASE.LOAD_TYPE
  	,BASE.ACCOUNT_NBR
  	,BASE.CUSTOMER_NAME
--CP
    ,MCP.LATITUDE AS CP_LATITUDE
    ,MCP.LONGITUDE AS CP_LONGITUDE
    ,MCP.GEO_CITY_NM AS CP_GEO_CITY_NM
    ,MCP.GEO_COUNTY_NM AS CP_GEO_COUNTY_NM
    ,MCP.GEO_STATE_CD AS CP_GEO_STATE_CD
    ,MCP.GEO_ZIP_CD AS CP_GEO_ZIP_CD
--LEGS
    ,MCP.STEMLEGS AS STEM_LEGS
    ,MCP.RETURN_LEGS AS RETURN_LEGS
    ,MCP.DISPOSALLEGS AS DISPOSAL_LEGS
--BASE/DCO
  	,BASE.ADDRESS
  	,BASE.TRIP_HRS B_TRIP_HRS
  	,DCO.TRIP_HRS S_TRIP_HRS
  	,BASE.TRIP_RATE B_TRIP_RATE
  	,DCO.TRIP_RATE S_TRIP_RATE
  	,BASE.TRIP_COST B_TRIP_COST
  	,DCO.TRIP_COST S_TRIP_COST
  	,BASE.DISP_RATE B_DISP_RATE
  	,DCO.DISP_RATE S_DISP_RATE
  	,BASE.DISP_COST B_DISP_COST
  	,DCO.DISP_COST S_DISP_COST
  	,BASE.TRATE B_TS_RATE
  	,DCO.TRATE S_TS_RATE
  	,BASE.TCOST B_TS_COST
  	,DCO.TCOST S_TS_COST
  	,BASE.XFER_RATE B_XFER_RATE
  	,DCO.XFER_RATE S_XFER_RATE
  	,BASE.XFER_COST B_XFER_COST
  	,DCO.XFER_COST S_XFER_COST
  	,BASE.PENALTY_COST B_PENALTY_COST
  	,DCO.PENALTY_COST S_PENALTY_COST
  	,BASE.TOTAL_COST B_TOTAL_COST
  	,DCO.TOTAL_COST S_TOTAL_COST
    ,BASE.TOTAL_COST - DCO.TOTAL_COST SAVINGS
  	,BASE.DCO_FROZEN_FLAG
--MODEL_RUN_PARAMETERS_FLAT
    ,MRP.MARKET_AREA PARAMETER_MARKET_AREA
    ,MRP.START_DATE PARAMETER_START_DATE
    ,MRP.END_DATE PARAMETER_END_DATE
    ,MRP.RANGE PARAMETER_RANGE
    ,MRP.USERID PARMAETER_USERID
    ,MRP.OPTIMIZE_EANDR_ONLY PARAMETER_OPTIMIZE_EANDR_ONLY
    ,MRP.RUN_DTM AS MODEL_RUN_DTM
FROM STG.ENO_GREENFLOW_SOLUTION_RESULTS BASE
JOIN STG.ENO_GREENFLOW_SOLUTION_RESULTS DCO
ON BASE.COLLECTION_POINT_ID = DCO.COLLECTION_POINT_ID
  AND BASE.ENO_ID =DCO.ENO_ID
  AND BASE.ENO_RESULTSOURCE = 'BASELINE'
  AND DCO.ENO_RESULTSOURCE = 'DCO'
LEFT JOIN MART.MODEL_RUN_PARAMETERS_FLAT MRP ON BASE.ENO_ID= MRP.ENO_ID
LEFT JOIN MART.MODEL_COLLECTION_POINTS_PERSISTENT MCP
ON MCP.ENO_ID = BASE.ENO_ID
  AND MCP.ROWNUMBER = BASE.COLLECTION_POINT_ID::BIGINT
LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP
ON MFP.ENO_ID = BASE.ENO_ID
  AND MFP.FAC_ID = BASE.DEPOT_FAC_ID
LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP2
ON MFP2.ENO_ID = BASE.ENO_ID
  AND MFP2.FAC_ID = BASE.DISP_FAC_ID
LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP3
ON MFP3.ENO_ID = DCO.ENO_ID
  AND MFP3.FAC_ID = DCO.DEPOT_FAC_ID
LEFT JOIN MART.MODEL_FACILITIES_PERSISTENT MFP4
ON MFP4.ENO_ID = DCO.ENO_ID
  AND MFP4.FAC_ID = DCO.DISP_FAC_ID
;

-- ************************************** ENO_GREENFLOW_ALL_CAPACITY
CREATE VIEW ENO_GREENFLOW_ALL_CAPACITY AS
SELECT * FROM
(
	SELECT
		'DISPOSAL SITE CAPACITY' AS RULE_TYPE
		,EGS.ENO_ID
		,EGS.ENO_RESULTSOURCE
		,EGS.DISP_FAC_ID
		,EGS.DISP_FAC_TYPE
		,EGS.DISP_FAC_SHORT_NM
		,NULL AS WASTE_TYPE
		,EGS.VOLUME_CONSTRAINT_TYPE
		,EGS.VOLUME_TIME_UNIT
		,EGS.GOVERNING_MAX_IND
		,EGS.GOVERNING_MIN_IND
		,NULL AS FLOW_CONTROL_RULE_ID
		,NULL AS FLOW_CONTROL_SOURCE
		,NULL AS FLOW_CONTROL_SOURCE_TYPE
		,NULL AS FLOW_CONTROL_DESTINATION
		,NULL AS FLOW_CONTROL_DESTINATION_TYPE
		,NULL AS LOB
		,EGS.MIN_TONS
		,EGS.MAX_TONS
		,EGS.MIN_TONS_EXCL_3P
		,EGS.MAX_TONS_EXCL_3P
		,EGS.SOLUTION_TOTAL_TONS
		,EGS.SOLUTION_WM_TONS
		,EGS.REMAINING_CAPACITY
		,EGS.OVER_USE
		,EGS.UNDERUSE
	FROM MART.ENO_GREENFLOW_FACILITIES_CAPACITY EGS

	UNION ALL

	SELECT
		'DISPOSAL SITE WASTE TYPE' AS RULE_TYPE
		,EGF.ENO_ID
		,EGF.ENO_RESULTSOURCE
		,EGF.DISP_FAC_ID
		,EGF.DISP_FAC_TYPE
		,EGF.DISP_FAC_SHORT_NM
		,EGF.WASTE_TYPE
		,EGF.VOLUME_CONSTRAINT_TYPE
		,EGF.VOLUME_TIME_UNIT
		,EGF.GOVERNING_MAX_IND
		,EGF.GOVERNING_MIN_IND
		,NULL AS FLOW_CONTROL_RULE_ID
		,NULL AS FLOW_CONTROL_SOURCE
		,NULL AS FLOW_CONTROL_SOURCE_TYPE
		,NULL AS FLOW_CONTROL_DESTINATION
		,NULL AS FLOW_CONTROL_DESTINATION_TYPE
		,NULL AS LOB
		,EGF.MIN_TONS
		,EGF.MAX_TONS
		,EGF.MIN_TONS_EXCL_3P
		,EGF.MAX_TONS_EXCL_3P
		,EGF.SOLUTION_TOTAL_TONS
		,EGF.SOLUTION_WM_TONS
		,EGF.REMAINING_CAPACITY
		,EGF.OVER_USE
		,EGF.UNDERUSE
	FROM ENO_GREENFLOW_FACILITY_MATERIAL_CAPACITY EGF

	UNION ALL

	SELECT
		'FLOW CONTROL' AS RULE_TYPE
		,EGFC.ENO_ID
		,EGFC.ENO_RESULTSOURCE
		,NULL AS DISP_FAC_ID
		,NULL AS DISP_FAC_TYPE
		,NULL AS DISP_FAC_SHORT_NM
		,EGFC.WASTE_TYPE
		,NULL AS VOLUME_CONSTRAINT_TYPE
		,NULL AS VOLUME_TIME_UNIT
		,NULL AS GOVERNING_MAX_IND
		,NULL AS GOVERNING_MIN_IND
		,EGFC.FLOW_CONTROL_RULE_ID
		,EGFC.FLOW_CONTROL_SOURCE
		,EGFC.FLOW_CONTROL_SOURCE_TYPE
		,EGFC.FLOW_CONTROL_DESTINATION
		,EGFC.FLOW_CONTROL_DESTINATION_TYPE
		,EGFC.LOB
		,EGFC.MIN_TONS
		,EGFC.MAX_TONS
		,EGFC.MIN_TONS_EXCL_3P
		,EGFC.MAX_TONS_EXCL_3P
		,EGFC.SOLUTION_TOTAL_TONS
		,EGFC.SOLUTION_WM_TONS
		,EGFC.REMAINING_CAPACITY
		,EGFC.OVER_USE
		,EGFC.UNDERUSE
	FROM ENO_GREENFLOW_FLOW_CONTROL_CAPACITY EGFC
)
;

-- ************************************** DISPOSAL_SITE_CONSTRAINTS
CREATE VIEW DISPOSAL_SITE_CONSTRAINTS AS SELECT * FROM BMT_DISPOSAL_SITE_CONSTRAINTS 
where nvl(DATA_COLLCTION_ADD_DELETE_UPDATE,'A') != 'D';

-- ************************************** COMMERCIAL_DISPOSAL_LEG_TIME
CREATE VIEW COMMERCIAL_DISPOSAL_LEG_TIME as (SELECT 
  "LANDFILL_PKEY", 
  "NET_TRAVEL_TO_DSPS" 
FROM (WITH
COMM_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL AS (
SELECT event_start EVENT_BEFORE_LANDFILL, ro_key FK_ROUTEORDER
FROM DEV_ONEWM.MART.co_events
WHERE event_type= 'Leave Yard' AND lob='COMMERCIAL'

UNION ALL

SELECT event_end , ro_key
FROM DEV_ONEWM.MART.co_events
WHERE event_type= 'CUSTOMER' AND lob='COMMERCIAL'

UNION ALL

SELECT event_stop , ro_key
FROM DEV_ONEWM.MART.co_events
WHERE event_type= 'CUSTOMER' AND lob='COMMERCIAL'
AND event_stop IS NOT null
),
COMM_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT as
(SELECT * FROM
(SELECT FK_ROUTEORDER, LANDFILL_PKEY, ARRIVE, EVENT_BEFORE_LANDFILL, ROW_NUMBER () OVER(PARTITION BY LANDFILL_PKEY ORDER BY ARRIVE asc) RN
FROM
(
SELECT ROL.FK_ROUTEORDER, ROL.PKEY LANDFILL_PKEY , ROL.ARRIVE  , max(EVENT_BEFORE_LANDFILL) EVENT_BEFORE_LANDFILL
FROM DEV_OCS.ODS.TP_RO_LANDFILL  ROL
JOIN COMM_POSSIBLE_ROUTE_EVENTS_BEFORE_LANDFILL EVNTS_BFR
ON EVNTS_BFR.fk_routeorder = ROL.FK_ROUTEORDER
AND ROL.FK_VEHICLE IS NULL
AND ROL.ARRIVE >= EVNTS_BFR.EVENT_BEFORE_LANDFILL
GROUP BY ROL.FK_ROUTEORDER, ROL.PKEY  , ROL.ARRIVE
) A
) A1
WHERE A1.RN=1
)

select LANDFILL_PKEY, 
case when (TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0)) >= 120
     then null
     else  (TRAVEL_TO_DSPSL_MINUTE - NVL(NET_MEAL_TIME,0) - NVL(NET_DOWN_TIME,0))
     end NET_TRAVEL_TO_DSPS
from
(select LANDFILL_PKEY, max(TRAVEL_TO_DSPSL_MINUTE) TRAVEL_TO_DSPSL_MINUTE, sum(NET_MEAL_TIME) NET_MEAL_TIME, sum(NET_DOWN_TIME) NET_DOWN_TIME
FROM
(
SELECT LANDFILL_PKEY,
TIMESTAMPDIFF(MINUTE, EVENT_BEFORE_LANDFILL, ARRIVE) TRAVEL_TO_DSPSL_MINUTE,
TIMESTAMPDIFF(MINUTE, DOWNSTART,DOWNEND) DOWN_TIME,
TIMESTAMPDIFF(MINUTE, LUNCHSTART,LUNCHEND) MEAL_TIME,
CASE WHEN (DOWNSTART BETWEEN LUNCHSTART AND LUNCHEND) AND (DOWNEND BETWEEN LUNCHSTART AND LUNCHEND)
     THEN MEAL_TIME - NVL(DOWN_TIME, 0)
     ELSE MEAL_TIME
END NET_MEAL_TIME,
CASE WHEN (LUNCHSTART BETWEEN DOWNSTART AND DOWNEND) AND (LUNCHEND BETWEEN DOWNSTART AND DOWNEND)
	 THEN DOWN_TIME - NVL(MEAL_TIME,0)
	 ELSE DOWN_TIME
END NET_DOWN_TIME


FROM
COMM_TRAVEL_TO_DISPOSAL_MOST_RECENT_EVENT T1

LEFT JOIN DEV_OCS.ODS.TP_RO_DOWNTIME ROD
ON ROD.FK_ROUTEORDER = T1.FK_ROUTEORDER
AND ROD.FK_VEHICLE IS NULL
AND ROD.DOWNSTART  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
AND ROD.DOWNEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
LEFT JOIN DEV_OCS.ODS.TP_RO_LUNCH RLUNCH
ON RLUNCH.FK_ROUTEORDER = T1.FK_ROUTEORDER
AND RLUNCH.LUNCHSTART BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
AND RLUNCH.LUNCHEND  BETWEEN T1.EVENT_BEFORE_LANDFILL AND T1.ARRIVE
AND RLUNCH.FK_VEHICLE IS NULL

)b  GROUP by LANDFILL_PKEY

)b1
) AS "v_0000017686_0000143780");

-- ************************************** VALIDATION_AGGREGATE_MP
CREATE VIEW VALIDATION_AGGREGATE_MP AS
SELECT * FROM (
  SELECT 10 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'FACILITIES WITH NO LAT/LONG' AS test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME = 'FACILITIES WITH NO LAT/LONG' 
  UNION ALL

  SELECT 20 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'COLLECTION POINTS WITH NO DISPOSAL FACILITY' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME = 'COLLECTION POINTS WITH NO DISPOSAL FACILITY' 

  UNION ALL

  SELECT 22 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'DISPOSAL FACILITY WITH EMPTY WASTE ACCEPTANCE' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='DISPOSAL FACILITY WITH EMPTY WASTE ACCEPTANCE' 

  UNION ALL

   SELECT 25 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'COLLECTION POINTS DISPOSAL FACILITY NOT IN MODEL FACILITIES' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='COLLECTION POINTS DISPOSAL FACILITY NOT IN MODEL FACILITIES'

  UNION ALL

  SELECT 30 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'HOURS CAPACITY WITH BAD MIN_HRS OR MAX_HRS' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='HOURS CAPACITY WITH BAD MIN_HRS OR MAX_HRS'

  UNION ALL

  SELECT 35 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'TRUCK HOURS PER DAY EXCEEDS 15' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='TRUCK HOURS PER DAY EXCEEDS 15'

  UNION ALL

  SELECT 40 AS SORT_ORDER
        ,'SHOWSTOPPER' AS test_TYPE
        ,'CP USES SUBLOB THAT DOES NOT HAVE FLEET CAPACITY AT THAT HAULING STATION' AS test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='CP USES SUBLOB THAT DOES NOT HAVE FLEET CAPACITY AT THAT HAULING STATION'

  UNION ALL

    SELECT 60 AS SORT_ORDER
           ,'SHOWSTOPPER' AS test_TYPE
           ,'NULLS IN TRANSFER LANE AVERAGE LOAD SIZE' AS test_NAME
           ,count(*)=0 AS PASS 
           ,count(*) AS ROW_COUNT
     FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='NULLS IN TRANSFER LANE AVERAGE LOAD SIZE'

 UNION ALL

   SELECT 70 AS SORT_ORDER
          ,'SHOWSTOPPER' AS test_TYPE
          ,'NO VALID DISPOSAL LOCATION FOR FLOW-CONTROLLED COLLECTION POINT' AS test_NAME
          ,count(*)=0 AS PASS 
          ,count(*) AS ROW_COUNT
    FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='NO VALID DISPOSAL LOCATION FOR FLOW-CONTROLLED COLLECTION POINT'

 UNION ALL

      SELECT 90 AS SORT_ORDER
             ,'WARNING' AS test_TYPE
             ,'TRANSFER STATION HAS ACTIVE LANE FOR WASTE TYPE WHICH IS NOT ACCEPTED AT DESTINATION' AS test_NAME
             ,count(*)=0 AS PASS 
             ,count(*) AS ROW_COUNT
       FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='TRANSFER STATION HAS ACTIVE LANE FOR WASTE TYPE WHICH IS NOT ACCEPTED AT DESTINATION'

 UNION ALL

      SELECT 80 AS SORT_ORDER
             ,'SHOWSTOPPER' AS test_TYPE
             ,'WM TRANSFER STATION HAS NO ACTIVE OUTGOING LANE FOR WASTE TYPE' AS test_NAME
             ,count(*)=0 AS PASS 
             ,count(*) AS ROW_COUNT
       FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='WM TRANSFER STATION HAS NO ACTIVE OUTGOING LANE FOR WASTE TYPE'

  UNION ALL

  select 105 as SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'LOCATION_MATCHING TABLE HAS SUSPICIOUS RECORDS' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='LOCATION_MATCHING TABLE HAS SUSPICIOUS RECORDS'

  UNION ALL

  SELECT 110 as SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'HRS CAP TABLE HAS LEGAL HAULING SITE FACILITIES'
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='HRS CAP TABLE HAS LEGAL HAULING SITE FACILITIES'

  UNION ALL

  SELECT 120 AS SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'TRANSFER LANES HAVE LEGAL TRANSFER-STATION AND LANDFILL FACILITIES' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='TRANSFER LANES HAVE LEGAL TRANSFER-STATION AND LANDFILL FACILITIES'

  UNION ALL

  SELECT 130 AS SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'PRE_MODEL TABLES HAD NULLS THAT WERE DEFAULTED TO OTHER VALUES' AS test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='PRE_MODEL TABLES HAD NULLS THAT WERE DEFAULTED TO OTHER VALUES'

  UNION ALL

  SELECT 140 AS SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'COLL. PTS HAVE A DISPOSAL/WASTE TYPE WITH UNKNOWN ACCEPTABILITY IN FACILITIES MATERIAL' AS test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='COLL. PTS HAVE A DISPOSAL/WASTE TYPE WITH UNKNOWN ACCEPTABILITY IN FACILITIES MATERIAL'

  UNION ALL

    SELECT 100 AS SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'CP SENT WASTE_TYPE TO FACILITY WASTE ACCEPTED FLAG=*NO*' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='CP SENT WASTE_TYPE TO FACILITY WASTE ACCEPTED FLAG=*NO*'

    UNION ALL

    SELECT 145 AS SORT_ORDER
        ,'WARNING' AS test_TYPE
        ,'TONNAGE FLOWS TO INACTIVE FACILITIES IN THE OPTIMIZED' as test_NAME
        ,count(*)=0 AS PASS 
        ,count(*) AS ROW_COUNT
  FROM MODEL_RUN_VALIDATION_DETAIL WHERE test_NAME ='TONNAGE FLOWS TO INACTIVE FACILITIES IN THE OPTIMIZED'
)
ORDER BY SORT_ORDER
;

-- ************************************** validate_truck_cnt
CREATE VIEW validate_truck_cnt AS (

SELECT

    hsc.fac_id

    , hsc.sublob

    , hsc.truck_cnt

    , vh.true_truck_cnt

    , last_updated_dtm

    , last_updated_user

FROM HAULING_SITE_capacity hsc

INNER JOIN

  (SELECT HAULING_SITE, sublob, service_dt, COUNT(DISTINCT vehicle_id) AS true_truck_cnt

      FROM co_events

      WHERE service_dt BETWEEN $start_date AND $end_date

      GROUP BY HAULING_SITE, sublob, service_dt

   ) vh

    ON hsc.fac_id = vh.HAULING_SITE AND hsc.sublob = vh.sublob

WHERE truck_cnt < true_truck_cnt

);

-- ************************************** TST_LH_FLOW_CONTROL
CREATE VIEW TST_LH_FLOW_CONTROL as
 select 
 PKEY ,
 RULE_TYPE ,
 LOB ,
 WASTE_TYPE ,
 METHOD_TYPE ,
 TIME_HORIZON_NM ,
 NOTES ,
 SRC_HAULING_SITE_ID ,
 SRC_COUNTY_NM ,
 SRC_CITY_NM ,
 SRC_CUSTOMER_NM ,
 SRC_MARKET_AREA_CD ,
 substring(DEST_DISPOSAL_SITE_ID,1,6) as DEST_DISPOSAL_SITE_ID,
CASE when substring(DEST_DISPOSAL_SITE_ID,8) = 'TS' then 'Transfer Station'
     when substring(DEST_DISPOSAL_SITE_ID,8) = 'MRF' then 'MRF Recycling' else
                substring(DEST_DISPOSAL_SITE_ID,8) end  as DEST_DISPOSAL_SITE_TYPE,
 DEST_COUNTY_NM ,
 DEST_CITY_NM     ,
 DEST_MARKET_AREA_CD ,
 CUSTOMER_NM ,
 MIN_TONS ,
 MAX_TONS ,
 SPECIAL_RATE_AMT ,
 LAST_UPDATED_DTM ,
 LAST_UPDATED_USER,
 ACTIVE_FLAG,
 SRC_STATE_CD,
 DEST_STATE_CD,
 SRC_HAULING_SITE_NM,
 DEST_DISPOSAL_SITE_NM,
 SRC_OCS_DISPOSAL_CD,             --Added New column
 SRC_STATE_NM,       --Added New column
 DEST_STATE_NM,        --Added New column
 SRC_OCS_DISPOSAL_NM
 from TST_FLOW_CONTROL;

-- ************************************** ROLLOFF_FACT
CREATE VIEW ROLLOFF_FACT as

select

LOAD_SEQ

,LAST_LOAD_FLAG

,TONS

,NBRLOADS

,COST

,GROUP_ID

,ACCOUNTNBR

,t1.LONGITUDE

,t1.LATITUDE

,t1.DEPOTFACID

,SUBLOB

,CUSTOMER_NAME

,WASTE_TYPE

,t1.OCS_DISPOSAL_NM

,t1.OCS_DISPOSAL_CD

,INTERCOMPANY

,INACTIVE

,STATE

,t2.MATCHED_LOCATIONID_TYPE as DispFacId

,WM_COLLECTION_FLAG

,LOB

,DISPOSALLEGS

,RETURNLEGS

,SERVICE_DT

,VEHICLE_ID

, GEO_COUNTY_NM

, GEO_CITY_NM

, GEO_STATE_CD

, GEO_ZIP_CD

, actl_trvl_to_dspsl_tm

, service_type_cd	

, DISPOSAL_TRIP_TYPE_cd

from

CORP_ROLLOFF_FACT t1

LEFT JOIN LOCATION_MATCHING t2 on t1.DEPOTFACID = t2.HAULING_SITE_ID and t1.OCS_DISPOSAL_CD = t2.OCS_DISPOSAL_CD

LEFT JOIN GEOCODE_RESULTS t3 on truncate(t1.longitude,6) = t3.longitude and truncate(t1.latitude,6) = t3.latitude

WHERE T1.TONS > 0;

-- ************************************** MODEL_FLOW_CONTROL_RULES
CREATE VIEW MODEL_FLOW_CONTROL_RULES AS
--Aggregate "common" flow control rules, excluding 'All collected waste has a special rate'
WITH CONSOLIDATED_FLOW_CONTROL AS
(SELECT
    PKEY
    ,TRIM(GET(SPLIT(RULE_TYPE,'-'),0)) AS RULE_SOURCE --County, City, Site, or Customer
    ,TRIM(GET(SPLIT(RULE_TYPE,'-'),1)) AS RULE_DEST --County, City, Site, or Customer
    ,CASE
        WHEN UPPER(RULE_SOURCE)='COUNTY' THEN UPPER(SRC_STATE_CD||'-'||SRC_COUNTY_NM)	-- county is always attached to state
        WHEN UPPER(RULE_SOURCE)='CITY'   THEN UPPER(SRC_STATE_CD||'-'||SRC_CITY_NM)		-- city is always attached to state
        WHEN UPPER(RULE_SOURCE)='HAULING SITE' THEN UPPER(SRC_HAULING_SITE_ID)
        WHEN UPPER(RULE_SOURCE)='CUSTOMER' THEN UPPER(SRC_CUSTOMER_NM)
        WHEN UPPER(RULE_SOURCE)='STATE' THEN UPPER(SRC_STATE_CD)   -- fix conflict bug
        WHEN UPPER(RULE_SOURCE)='OCS CODE' THEN UPPER(SRC_HAULING_SITE_ID||'-'||SRC_OCS_DISPOSAL_CD)
        ELSE 'ERROR' END AS COLLECTION_ENTITY
     ,CASE
        WHEN UPPER(RULE_DEST)='COUNTY' THEN UPPER(DEST_STATE_CD||'-'||DEST_COUNTY_NM)	-- county is always attached to state
        WHEN UPPER(RULE_DEST)='CITY' THEN   UPPER(DEST_STATE_CD||'-'||DEST_CITY_NM)		-- city is always attached to state
        WHEN UPPER(RULE_DEST)='DISPOSAL SITE' THEN UPPER(DEST_DISPOSAL_SITE_ID)
        WHEN UPPER(RULE_DEST)='STATE' THEN UPPER(DEST_STATE_CD)
        ELSE 'ERROR' END AS DISPOSAL_ENTITY
    ,METHOD_TYPE AS METHOD_TYPE_DESC
    ,CASE WHEN UPPER(METHOD_TYPE_DESC)=UPPER('All collected waste must go') then 1
		  WHEN UPPER(METHOD_TYPE_DESC)=UPPER('Minimum collected waste must go (tons)') then 2
		  WHEN UPPER(METHOD_TYPE_DESC)=UPPER('Maximum collected waste limited to (tons)') then 3
		  WHEN UPPER(METHOD_TYPE_DESC)=UPPER('All collected waste must NOT go') then 4
		  WHEN UPPER(METHOD_TYPE_DESC)=UPPER('All collected waste has a special rate') then 5
		  WHEN UPPER(METHOD_TYPE_DESC)=UPPER('Destination may only accept') then 6

    END AS METHOD_TYPE
    ,LOB
    ,WASTE_TYPE
    ,MIN_TONS
    ,MAX_TONS
    ,TIME_HORIZON_NM
    ,SPECIAL_RATE_AMT
FROM FLOW_CONTROL
WHERE -- filter to active, relevant flow control rules
    ACTIVE_FLAG = 'A'
    AND (
        (src_market_area_cd = $market_area)
     OR (dest_market_area_cd = $market_area)
    )
ORDER BY PKEY),

--Aggregate the non-special rate rules, and tack the special rate rules on at the end
AGGREGATED_RULES AS
(SELECT
    COUNT(*) AS CNT
    ,METHOD_TYPE
    ,METHOD_TYPE_DESC
    ,RULE_SOURCE
    ,COLLECTION_ENTITY
    ,MIN(PKEY) AS MIN_FC_PKEY
    ,TO_VARCHAR(LISTAGG(PKEY,',')) AS FC_PKEYS
    ,TO_VARCHAR(LISTAGG(DISPOSAL_ENTITY,',')) AS ALL_DISPOSAL_DEST
    ,LOB
    ,WASTE_TYPE
    ,MIN_TONS
    ,MAX_TONS
    ,TIME_HORIZON_NM
    ,0 AS SPECIAL_RATE_AMT
    ,DISPOSAL_ENTITY
FROM CONSOLIDATED_FLOW_CONTROL
WHERE METHOD_TYPE != 5 --Not a special rate rule
GROUP BY
    METHOD_TYPE
    ,METHOD_TYPE_DESC
    ,RULE_SOURCE
    ,COLLECTION_ENTITY
    ,LOB
    ,WASTE_TYPE
    ,MIN_TONS
    ,MAX_TONS
    ,TIME_HORIZON_NM
    ,DISPOSAL_ENTITY
),
SPECIAL_RATE_RULES AS
(SELECT
    1 AS CNT
    ,METHOD_TYPE
    ,METHOD_TYPE_DESC
    ,RULE_SOURCE
    ,COLLECTION_ENTITY
    ,PKEY AS MIN_FC_PKEY
    ,TO_VARCHAR(PKEY) AS FC_PKEYS
    ,DISPOSAL_ENTITY AS ALL_DISPOSAL_DEST
    ,LOB
    ,WASTE_TYPE
    ,0 AS MIN_TONS
    ,0 AS MAX_TONS
    , NULL AS TIME_HORIZON_NM
    ,SPECIAL_RATE_AMT
    ,DISPOSAL_ENTITY
 FROM CONSOLIDATED_FLOW_CONTROL
 WHERE METHOD_TYPE = 5
 ), --Special rate rules only
 TOTAL_RULES AS
 (SELECT * FROM AGGREGATED_RULES
 UNION
 SELECT * FROM SPECIAL_RATE_RULES)
--Create the final view
SELECT
    ROW_NUMBER() OVER (
        ORDER BY METHOD_TYPE, METHOD_TYPE_DESC, RULE_SOURCE, COLLECTION_ENTITY, LOB, WASTE_TYPE, MIN_TONS, MAX_TONS, CNT DESC
    ) AS FC_RULE_NUMBER
    ,CNT
    ,METHOD_TYPE
    ,METHOD_TYPE_DESC
    ,RULE_SOURCE
    ,COLLECTION_ENTITY
    ,MIN_FC_PKEY
    ,FC_PKEYS
    ,ALL_DISPOSAL_DEST
    ,LOB
    ,WASTE_TYPE
    ,MIN_TONS AS MIN_TONS_UNSCALED
    ,MAX_TONS AS MAX_TONS_UNSCALED
    ,MIN_TONS*(
        CASE
            --NB: Flow controls cannot have hourly-level constraints
            WHEN UPPER(TIME_HORIZON_NM)='DAILY' THEN sc.DAILY_FACTOR
            WHEN UPPER(TIME_HORIZON_NM)='MONTHLY' THEN sc.MONTHLY_FACTOR
            WHEN UPPER(TIME_HORIZON_NM)='QUARTERLY' THEN sc.QTR_FACTOR
            WHEN UPPER(TIME_HORIZON_NM)='YEARLY' THEN sc.YEARLY_FACTOR
        ELSE 1 END) as min_tons
    ,MAX_TONS*(
        CASE
            --NB: Flow controls cannot have hourly-level constraints
            WHEN UPPER(TIME_HORIZON_NM)='DAILY' THEN sc.DAILY_FACTOR
            WHEN UPPER(TIME_HORIZON_NM)='MONTHLY' THEN sc.MONTHLY_FACTOR
            WHEN UPPER(TIME_HORIZON_NM)='QUARTERLY' THEN sc.QTR_FACTOR
            WHEN UPPER(TIME_HORIZON_NM)='YEARLY' THEN sc.YEARLY_FACTOR
        ELSE 1 END) as max_tons
    ,SPECIAL_RATE_AMT
    ,DISPOSAL_ENTITY
 FROM TOTAL_RULES
 LEFT JOIN SCALE_CONSTRAINTS sc
 ORDER BY FC_RULE_NUMBER
;

-- ************************************** MODEL_FACILITY_LIST
CREATE VIEW MODEL_FACILITY_LIST AS

with historical_HAULING_SITE  as (select distinct depotfacid as fac_id from MART.MODEL_COLLECTION_POINTS),

     historical_disposal  as (select distinct dispfacid as fac_id from MART.MODEL_COLLECTION_POINTS),

     proximity_disposal as (select DISPOSAL_FAC_ID as fac_id from MART.MARKET_AREA_SITE_PROXIMITY),

     FLOW_CONTROL_disposal as (select DEST_DISPOSAL_SITE_ID as FAC_ID from MART.FLOW_CONTROL

                               WHERE ACTIVE_FLAG='A'

                               AND SRC_MARKET_AREA_CD=$MARKET_AREA

                               AND DEST_DISPOSAL_SITE_ID IS NOT NULL

                               AND DEST_DISPOSAL_SITE_ID != ''),

     total_disposal as (select fac_id from historical_disposal

                       union all

                       select fac_id from proximity_disposal

                        union all

                       select fac_id from FLOW_CONTROL_disposal),

      transfer_station_dest as (

       SELECT DISTINCT lane_destination_fac_id AS fac_id

       FROM TRANSFER_LANE_WASTE_TYPE WHERE lane_origin_fac_id in (SELECT DISTINCT fac_id FROM total_disposal)

       AND UPPER(STATUS_IND)='A'

     )

select distinct fac_id from

(select * from historical_HAULING_SITE

union all

select * from total_disposal

union all

select * from transfer_station_dest

)

;

-- ************************************** LH_WASTE_TYPE_CONSTRAINTS
CREATE VIEW LH_WASTE_TYPE_CONSTRAINTS AS
select
PKEY,
substring(FAC_ID,1,6) as FAC_ID,
CASE when substring(FAC_ID,8) = 'TS' then 'Transfer Station'
     when substring(FAC_ID,8) = 'MRF' then 'MRF Recycling' else
                substring(FAC_ID,8) end  as FAC_TYPE,
WASTE_TYPE,
MIN_TONS,
MAX_TONS,
VOLUME_CONSTRAINT_TYPE,
VOLUME_TIME_UNIT,
NOTES,
LAST_UPDATED_DTM,
LAST_UPDATED_USER
from WASTE_TYPE_CONSTRAINTS;

-- ************************************** LH_WASTE_TYPE_ACCEPTANCE
CREATE VIEW LH_WASTE_TYPE_ACCEPTANCE as
--
-- NETOPT-2103:DA - remove unnecessary fields 
--
select
substring(FAC_ID,1,6) as FAC_ID,
CASE when substring(FAC_ID,8) = 'TS' then 'Transfer Station'
     when substring(FAC_ID,8) = 'MRF' then 'MRF Recycling' else
                substring(FAC_ID,8) end  as FAC_TYPE,
WASTE_TYPE,
ACCEPTED_FLAG,
UNIT_COST_PER_TON,
UNIT_PRICE_PER_TON ,
UNIT_REVENUE_PER_TON,
SOURCE,
LAST_UPDATED_DTM,
LAST_UPDATED_USER
from WASTE_TYPE_ACCEPTANCE;

-- ************************************** LH_TRANSFER_LANE_WASTE_TYPE
CREATE VIEW LH_TRANSFER_LANE_WASTE_TYPE
as
select
substring(LANE_ORIGIN_FAC_ID,1,6) as LANE_ORIGIN_FAC_ID,
CASE when substring(LANE_ORIGIN_FAC_ID,8) = 'TS' then 'Transfer Station'
     when substring(LANE_ORIGIN_FAC_ID,8) = 'MRF' then 'MRF Recycling' else
                substring(LANE_ORIGIN_FAC_ID,8) end  as LANE_ORIGIN_FAC_TYPE,
WASTE_TYPE,
substring(LANE_DESTINATION_FAC_ID,1,6) as LANE_DESTINATION_FAC_ID,
FAC_NAME as LANE_DESTINATIION_FAC_NAME,
CASE when substring(LANE_DESTINATION_FAC_ID,8) = 'TS' then 'Transfer Station'
     when substring(LANE_DESTINATION_FAC_ID,8) = 'MRF' then 'MRF Recycling' else
                substring(LANE_DESTINATION_FAC_ID,8) end  as LANE_DESTINATION_FAC_TYPE, LANE_NAME,
LONG_HAUL_COST_PER_TON,
LONG_HAUL_COST_PER_LOAD ,
AVERAGE_LOAD_SIZE_TONS ,
STATUS_IND,
t1.SOURCE,
t1.LAST_UPDATED_DTM ,
t1.LAST_UPDATED_USER ,
t1.DATA_COLLCTION_ADD_DELETE_UPDATE,
t1.MIN_TONS,
t1.MAX_TONS,
t1.volume_constraint_type,
t1.volume_time_unit
from TRANSFER_LANE_WASTE_TYPE t1, DISPOSAL_SITE t2 where t1.LANE_DESTINATION_FAC_ID = t2.FAC_ID;

-- ************************************** LH_LIST_MA
CREATE VIEW LH_LIST_MA as

select * from LH_LIST_HAULING_SITE_MA

union

select * from MART.LH_LIST_DISPOSAL_SITE_MA;

-- ************************************** LH_LIST_ALL_SITES_MA
CREATE VIEW LH_LIST_ALL_SITES_MA as

select * from LH_LIST_HAULING_SITE_MA

union

select * from MART.LH_LIST_DISPOSAL_SITE_MA;

-- ************************************** LH_HAULING_SITE_CAPACITY
CREATE VIEW LH_HAULING_SITE_CAPACITY as
select t2.MARKET_AREA_CD, t2.MARKET_AREA_NM, t1.* from HAULING_SITE_CAPACITY t1 left join HAULING_SITE t2 on t1.FAC_ID = t2.FAC_ID;

-- ************************************** LH_FLOW_CONTROL
CREATE VIEW LH_FLOW_CONTROL as
 select 
 PKEY ,
 RULE_TYPE ,
 LOB ,
 WASTE_TYPE ,
 METHOD_TYPE ,
 TIME_HORIZON_NM ,
 NOTES ,
 SRC_HAULING_SITE_ID ,
 SRC_COUNTY_NM ,
 SRC_CITY_NM ,
 SRC_CUSTOMER_NM ,
 SRC_MARKET_AREA_CD ,
 substring(DEST_DISPOSAL_SITE_ID,1,6) as DEST_DISPOSAL_SITE_ID,
CASE when substring(DEST_DISPOSAL_SITE_ID,8) = 'TS' then 'Transfer Station'
     when substring(DEST_DISPOSAL_SITE_ID,8) = 'MRF' then 'MRF Recycling' else
                substring(DEST_DISPOSAL_SITE_ID,8) end  as DEST_DISPOSAL_SITE_TYPE,
 DEST_COUNTY_NM ,
 DEST_CITY_NM     ,
 DEST_MARKET_AREA_CD ,
 CUSTOMER_NM ,
 MIN_TONS ,
 MAX_TONS ,
 SPECIAL_RATE_AMT ,
 LAST_UPDATED_DTM ,
 LAST_UPDATED_USER,
 ACTIVE_FLAG,
 SRC_STATE_CD,
 DEST_STATE_CD,
 SRC_HAULING_SITE_NM,
 DEST_DISPOSAL_SITE_NM,
 SRC_OCS_DISPOSAL_CD,            
 SRC_STATE_NM,      
 DEST_STATE_NM,       
 SRC_OCS_DISPOSAL_NM
 from FLOW_CONTROL;

-- ************************************** LH_DISPOSAL_SITE_CONSTRAINTS
CREATE VIEW LH_DISPOSAL_SITE_CONSTRAINTS AS
select
PKEY,
substring(FAC_ID,1,6) as FAC_ID,
CASE when substring(FAC_ID,8) = 'TS' then 'Transfer Station'
   when substring(FAC_ID,8) = 'MRF' then 'MRF Recycling' else
              substring(FAC_ID,8) end  as FAC_TYPE,
MIN_TONS,
MAX_TONS,
VOLUME_CONSTRAINT_TYPE,
VOLUME_TIME_UNIT,
NOTES,
LAST_UPDATED_DTM,
LAST_UPDATED_USER
from DISPOSAL_SITE_CONSTRAINTS;

-- ************************************** FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW2
CREATE VIEW FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW2 as

select FAC_ID, FAC_NAME, FAC_TYPE, ACTIVE_FLAG, MARKET_AREA_NM, MARKET_AREA_CD, ADDRESS_1, ADDRESS_2, CITY_NM, STATE_CD, ZIP_CD, COUNTY_NM, COUNTRY_CD,

LATITUDE, LONGITUDE, CYCLE_MINUTE_CNT as TURN_TIME, MIN_VOLUME, MAX_VOLUME, UNIT_COST, FIXED_COST, WM_OWNED_FLAG, LAST_UPDATED_DTM, LAST_UPDATED_USER,

SOURCE AS DATA_SOURCE from LH_SITE;

-- ************************************** FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW
CREATE VIEW FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW as 
select 
  FAC_ID, 
  FAC_NAME, 
  FAC_SHORT_NM,
  FAC_TYPE, 
  ACTIVE_FLAG, 
  MARKET_AREA_NM, 
  MARKET_AREA_CD, 
  ADDRESS_1, 
  ADDRESS_2, 
  CITY_NM, 
  STATE_CD, 
  ZIP_CD, 
  COUNTY_NM, 
  COUNTRY_CD, 
  LATITUDE, 
  LONGITUDE, 
  UNIT_COST, 
  FIXED_COST, 
  WM_OWNED_FLAG, 
  LAST_UPDATED_DTM, 
  LAST_UPDATED_USER, 
  SOURCE AS DATA_SOURCE, 
  GEO_CITY_NM, 
  GEO_COUNTY_NM, 
  GEO_STATE_CD, 
  GEO_ZIP_CD, 
  Monday_OPEN_AT, 
  Monday_CLOSE_AT, 
  Tuesday_OPEN_AT, 
  Tuesday_CLOSE_AT, 
  Wednesday_OPEN_AT, 
  Wednesday_CLOSE_AT, 
  Thursday_OPEN_AT, 
  Thursday_CLOSE_AT, 
  Friday_OPEN_AT, 
  Friday_CLOSE_AT, 
  Saturday_OPEN_AT, 
  Saturday_CLOSE_AT, 
  Sunday_OPEN_AT, 
  Sunday_CLOSE_AT 
from 
  LH_SITE;

-- ************************************** DISPOSAL_SITE_lob
CREATE VIEW DISPOSAL_SITE_lob 

AS 

  SELECT Coalesce(t3.fac_id, t4.fac_id) AS FAC_ID, 

         Coalesce(t3.lob_cd, t4.lob_cd) AS LOB_CD, 

         CASE 

           WHEN t3.cycle_minute_cnt IS NULL 

                 OR t3.cycle_minute_cnt = 0 THEN T4.cycle_minute_cnt -- prefer CORP data to zeros or nulls

           ELSE t3.cycle_minute_cnt 

         END                            AS CYCLE_MINUTE_CNT,  

         last_updated_dtm, 

         last_updated_user, 

         data_collction_add_delete_update 

--

-- Coalesce the CORP data and the BMT data like what we normally do

-- Be sure to do the Delete check on the outside so that it applies to all the facilities including the defaults

--

  FROM   (SELECT Coalesce(t1.fac_id, t2.fac_id) AS FAC_ID, 

                 Coalesce(t1.lob_cd, t2.lob_cd) AS LOB_CD, 

                 CASE 

                   WHEN t1.cycle_minute_cnt IS NULL 

                         OR t1.cycle_minute_cnt = 0 THEN T2.cycle_minute_cnt 

                   ELSE t1.cycle_minute_cnt 

                 END                            AS CYCLE_MINUTE_CNT, 

                 last_updated_dtm, 

                 last_updated_user, 

                 data_collction_add_delete_update 

          FROM   BMT_DISPOSAL_SITE_LOB t1 

                 full outer join corp_disposal_lob t2 

                              ON T1.fac_id = T2.fac_id 

                                 AND T1.lob_cd = T2.lob_cd) t3 

--

--	Second full outer join to the defaults table

--

         full outer join TURN_TIME_DEFAULTS t4 

                      ON T3.fac_id = T4.fac_id 

                         AND T3.lob_cd = T4.lob_cd 

  WHERE  Nvl(data_collction_add_delete_update, 'A') != 'D';

-- ************************************** COMRES_FACT
CREATE VIEW COMRES_FACT as
select
      GROUP_ID
    , t2.MATCHED_LOCATIONID_TYPE as DispFacId
    , t1.DepotFacID
    , hs.FAC_NAME AS FAC_NM
    , t1.OCS_DISPOSAL_NM
    , t1.OCS_DISPOSAL_CD
    , INACTIVE
--    , loc_match.matched_location_code || '_' || loc_match.location_type as DISP_FAC_ID_HIST
    , sublob
    , service_dt
    , LoadSeq
    , LAST_LOAD_FLAG
    , Route_id AS ROUTEID
    , t1.LATITUDE
    , t1.LONGITUDE
    , tons
    , COST
    , yards
    , homes
    , WM_Collection_Flag
    , LOB
    , WASTE_TYPE
    , StemLegs
    , DisposalLegs
    , ReturnLegs
    , VEHICLE_ID
    , t3.GEO_COUNTY_NM
    , t3.GEO_CITY_NM
    , t3.GEO_STATE_CD
    , t3.GEO_ZIP_CD
    , actl_trvl_to_dspsl_tm
    , LANDFILL_PKEY
    , INTERCOMPANY
from MART.CORP_COMRES_FACT t1
LEFT JOIN HAULING_SITE hs on hs.FAC_ID = t1.DepotFacID
LEFT JOIN LOCATION_MATCHING t2 on t1.DEPOTFACID = t2.HAULING_SITE_ID and t1.OCS_DISPOSAL_CD = t2.OCS_DISPOSAL_CD
LEFT JOIN GEOCODE_RESULTS t3 on truncate(t1.LONGITUDE,6) = t3.longitude and truncate(t1.latitude,6) = t3.latitude
;

-- ************************************** ROLLOFF_FACT_ADJUSTED
CREATE VIEW ROLLOFF_FACT_ADJUSTED as 

select

LOAD_SEQ

,TONS

,NBRLOADS

,COST

,GROUP_ID

,ACCOUNTNBR

,HOUSE

,STREET_NAME

,CITY

,ZIP

,LONGITUDE

,LATITUDE

,t1.DEPOTFACID

,SUBLOB

,CUSTOMER_NAME

,WASTE_TYPE

,t1.OCS_DISPOSAL_NM

,t1.OCS_DISPOSAL_CD

,INTERCOMPANY

,INACTIVE

,STATE

,t2.MATCHED_LOCATIONID_TYPE as DispFacId

,WM_COLLECTION_FLAG

,LOB

,DISPOSALLEGS

,RETURNLEGS

,CP_ID

,SERVICE_DT

,VEHICLE_ID from 

ROLLOFF_FACT t1 LEFT JOIN LOCATION_MATCHING t2 on t1.DEPOTFACID = t2.HAULING_SITE_ID and t1.OCS_DISPOSAL_CD = t2.OCS_DISPOSAL_CD and t1.OCS_DISPOSAL_NM = t2.OCS_DISPOSAL_NM;

-- ************************************** PRE_MODEL_TRANSFER_COSTS
CREATE VIEW PRE_MODEL_TRANSFER_COSTS AS
--
--Average load size of all active transfer lanes with the same destination facility type, waste type, and unit of cost
--
WITH AVERAGE_LOAD_SIZE_TONS_UNIT_PRICE as
(
  SELECT substr(UPPER(LANE_DESTINATION_FAC_ID),8) AS FAC_TYPE,
    WASTE_TYPE,
    CASE WHEN LONG_HAUL_COST_PER_TON IS NOT NULL THEN 'COST PER TON'
          WHEN LONG_HAUL_COST_PER_LOAD IS NOT NULL THEN 'COST PER LOAD'
     END AS UNIT_OF_MEASURE, --UNIT OF COST WHEN LONG_HAUL_COST_PER_TON IS NULL THEN 'COST PER TON' ELSE 'COST PER LOAD'
    AVG(AVERAGE_LOAD_SIZE_TONS)::NUMERIC(10,2) as AVERAGE_LOAD_SIZE_TONS
  FROM TRANSFER_LANE_WASTE_TYPE a
  WHERE STATUS_IND = 'A'
  --and MARKET_AREA_CD = $market_area
  GROUP BY 1,2,3
),
--
--Average load size of all active transfer lanes with the same destination facility type and waste type
--
AVERAGE_LOAD_SIZE_TONS_UNIT_PRICE_WASTE_TYPE as
(
  SELECT substr(UPPER(LANE_DESTINATION_FAC_ID),8) AS FAC_TYPE,
    WASTE_TYPE,
    AVG(AVERAGE_LOAD_SIZE_TONS)::NUMERIC(10,2) as AVERAGE_LOAD_SIZE_TONS
  FROM TRANSFER_LANE_WASTE_TYPE a
  WHERE STATUS_IND = 'A'
  GROUP BY 1,2
)
SELECT TL.LANE_ORIGIN_FAC_ID
	,TL.WASTE_TYPE
	,TL.LANE_DESTINATION_FAC_ID
	,TL.LONG_HAUL_COST_PER_TON
	,TL.LONG_HAUL_COST_PER_LOAD
	,COALESCE(TL.LONG_HAUL_COST_PER_TON, TL.LONG_HAUL_COST_PER_LOAD) AS LONG_HAUL_COST
	,CASE WHEN TL.LONG_HAUL_COST_PER_TON is NOT NULL then 1
				WHEN TL.LONG_HAUL_COST_PER_LOAD is NOT NULL
               THEN coalesce(TL.AVERAGE_LOAD_SIZE_TONS,A1.AVERAGE_LOAD_SIZE_TONS,A2.AVERAGE_LOAD_SIZE_TONS,25)
	 END AS LOAD_SIZE
	,TL.UNIT_OF_MEASURE
	,MIN_TONS * (
		 CASE
		    --NB: Transfer lanes do not have min/max specified hourly
            WHEN UPPER(VOLUME_TIME_UNIT)='DAILY' THEN sc.DAILY_FACTOR
            WHEN UPPER(VOLUME_TIME_UNIT)='MONTHLY' THEN sc.MONTHLY_FACTOR
            WHEN UPPER(VOLUME_TIME_UNIT)='QUARTERLY' THEN sc.QTR_FACTOR
            WHEN UPPER(VOLUME_TIME_UNIT)='YEARLY' THEN sc.YEARLY_FACTOR
        ELSE 1 END
		) AS MIN_TONS
	,MAX_TONS * (
		 CASE
		    --NB: Transfer lanes do not have min/max specified hourly
            WHEN UPPER(VOLUME_TIME_UNIT)='DAILY' THEN sc.DAILY_FACTOR
            WHEN UPPER(VOLUME_TIME_UNIT)='MONTHLY' THEN sc.MONTHLY_FACTOR
            WHEN UPPER(VOLUME_TIME_UNIT)='QUARTERLY' THEN sc.QTR_FACTOR
            WHEN UPPER(VOLUME_TIME_UNIT)='YEARLY' THEN sc.YEARLY_FACTOR
        ELSE 1 END
		) AS MAX_TONS
	,'WM' AS source
	,0 AS ADDL_UNIT_COST
	,STATUS_IND
FROM
(
  SELECT *
    ,substr(UPPER(LANE_DESTINATION_FAC_ID),8) AS FAC_TYPE
    ,CASE WHEN A.LONG_HAUL_COST_PER_TON IS NOT NULL THEN 'COST PER TON'
          WHEN A.LONG_HAUL_COST_PER_LOAD IS NOT NULL THEN 'COST PER LOAD'
    END AS UNIT_OF_MEASURE
  FROM TRANSFER_LANE_WASTE_TYPE A
)TL
LEFT JOIN AVERAGE_LOAD_SIZE_TONS_UNIT_PRICE A1
  ON TL.FAC_TYPE = A1.FAC_TYPE
  AND TL.WASTE_TYPE = A1.WASTE_TYPE
  AND TL.UNIT_OF_MEASURE = A1.UNIT_OF_MEASURE
LEFT JOIN AVERAGE_LOAD_SIZE_TONS_UNIT_PRICE_WASTE_TYPE A2
  ON TL.FAC_TYPE = A2.FAC_TYPE
  AND TL.WASTE_TYPE = A2.WASTE_TYPE
LEFT JOIN SCALE_CONSTRAINTS sc
WHERE STATUS_IND = 'A'
	AND LANE_ORIGIN_FAC_ID IN (
		SELECT FAC_ID
		FROM MODEL_FACILITY_LIST
		)
;

-- ************************************** OCS_TONNAGE
CREATE VIEW OCS_TONNAGE AS



SELECT DepotFacId AS HAULING_SITE_id

	,OCS_DISPOSAL_CD AS OCS_DISPOSAL_CD

	,MAX(OCS_DISPOSAL_NM) AS OCS_DISPOSAL_NM

	,SUM(TONS) AS TONS

	,MAX(SERVICE_DT) AS LAST_SERVICE_DT

FROM (

	SELECT DepotFacId

		,OCS_DISPOSAL_CD

		,OCS_DISPOSAL_NM

		,round(nvl(sum(TONS), 0), 2) AS TONS

		,MAX(SERVICE_DT) AS SERVICE_DT

	FROM COMRES_FACT

	GROUP BY DepotFacId

		,OCS_DISPOSAL_CD

		,OCS_DISPOSAL_NM



	UNION



	SELECT DepotFacId

		,OCS_DISPOSAL_CD

		,OCS_DISPOSAL_NM

		,round(nvl(sum(TONS), 0), 2) AS TONS,

		MAX(SERVICE_DT) AS SERVICE_DT

	FROM ROLLOFF_FACT

	GROUP BY DepotFacId

		,OCS_DISPOSAL_CD

		,OCS_DISPOSAL_NM

	)

GROUP BY DepotfacId

	,OCS_DISPOSAL_CD

;

-- ************************************** MODEL_ALL_CONSTRAINTS
CREATE VIEW MODEL_ALL_CONSTRAINTS AS

WITH UNIONED_CONSTRAINTS AS

(

--All global facility constraints (all waste types)

SELECT

    'GLOBAL_FACILITY_CONSTRAINT' AS SRC,

    FAC_ID,

    FAC_TYPE,

    'ALL' AS WASTE_TYPE,

    MIN_TONS,

    MAX_TONS,

    VOLUME_CONSTRAINT_TYPE,

    VOLUME_TIME_UNIT,

    NOTES

FROM DISPOSAL_SITE_CONSTRAINTS

UNION ALL

--All waste-type specific min / max tonnage constraints

SELECT

    'WASTE_TYPE' AS SRC,

    FAC_ID,

    FAC_TYPE,

    WASTE_TYPE,

    MIN_TONS,

    MAX_TONS,

    VOLUME_CONSTRAINT_TYPE,

    VOLUME_TIME_UNIT,

    NOTES

FROM WASTE_TYPE_CONSTRAINTS

),

UNIONED_SCALED_CONSTRAINTS AS (

SELECT

c.SRC,

c.FAC_ID,

c.WASTE_TYPE,

c.MIN_TONS,

c.MAX_TONS,

c.VOLUME_TIME_UNIT,

c.VOLUME_CONSTRAINT_TYPE,

c.NOTES,

c.MIN_TONS*(

    CASE

        WHEN UPPER(c.VOLUME_TIME_UNIT)='HOURLY' THEN sc_fac.HOURLY_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='DAILY' THEN sc.DAILY_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='MONTHLY' THEN sc.MONTHLY_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='QUARTERLY' THEN sc.QTR_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='YEARLY' THEN sc.YEARLY_FACTOR

    ELSE 1 END

) AS MIN_TONS_SCALED,

c.MAX_TONS*(

    CASE

        WHEN UPPER(c.VOLUME_TIME_UNIT)='HOURLY' THEN sc_fac.HOURLY_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='DAILY' THEN sc.DAILY_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='MONTHLY' THEN sc.MONTHLY_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='QUARTERLY' THEN sc.QTR_FACTOR

        WHEN UPPER(c.VOLUME_TIME_UNIT)='YEARLY' THEN sc.YEARLY_FACTOR

    ELSE 1 END

) AS MAX_TONS_SCALED

FROM UNIONED_CONSTRAINTS c

LEFT JOIN SCALE_CONSTRAINTS sc

LEFT JOIN SCALE_CONSTRAINTS_FACILITIES sc_fac on c.FAC_ID=SC_FAC.FAC_ID

WHERE c.FAC_ID IN (SELECT FAC_ID FROM MODEL_FACILITY_LIST))

SELECT

SRC,

FAC_ID,

WASTE_TYPE,

MIN_TONS,

MAX_TONS,

VOLUME_TIME_UNIT,

VOLUME_CONSTRAINT_TYPE,

NOTES,

MIN_TONS_SCALED,

MAX_TONS_SCALED,

MIN(MAX_TONS_SCALED) OVER (PARTITION BY SRC, FAC_ID, WASTE_TYPE) AS GOVERNING_MAX, --pick the smallest max - NB can be multiple

MAX(MIN_TONS_SCALED) OVER (PARTITION BY SRC, FAC_ID, WASTE_TYPE) AS GOVERNING_MIN, --pick the largest min - NB can be multiple

CASE WHEN MIN_TONS_SCALED = GOVERNING_MIN THEN 1 ELSE 0 END AS GOVERNING_MIN_FLAG,

CASE WHEN MAX_TONS_SCALED = GOVERNING_MAX THEN 1 ELSE 0 END AS GOVERNING_MAX_FLAG

FROM UNIONED_SCALED_CONSTRAINTS s

;

-- ************************************** LH_LIST_CUSTOMER
CREATE VIEW LH_LIST_CUSTOMER as

select distinct t1.CUSTOMER_NAME, t1.DepotFacId as HAULING_SITE_ID, T2.MARKET_AREA_CD, T2.MARKET_AREA_NM from ROLLOFF_FACT t1 

LEFT JOIN HAULING_SITE t2 on t1.DepotFacId = t2.FAC_ID

where CUSTOMER_NAME is not null and market_area_cd is not null;

-- ************************************** LH_DISPOSAL_SITE_LOB
CREATE VIEW LH_DISPOSAL_SITE_LOB as
 select 
	substring(FAC_ID,1,6) as FAC_ID,
	CASE when substring(FAC_ID,8) = 'TS' then 'Transfer Station'
    when substring(FAC_ID,8) = 'MRF' then 'MRF Recycling' else
    substring(FAC_ID,8) end  as FAC_TYPE,
	LOB_CD,
	CYCLE_MINUTE_CNT,
	LAST_UPDATED_DTM,
	LAST_UPDATED_USER,
	DATA_COLLCTION_ADD_DELETE_UPDATE
 from DISPOSAL_SITE_LOB;

-- ************************************** facility_location_data_MART_BMT_COMBINED_VALIDATION
CREATE VIEW facility_location_data_MART_BMT_COMBINED_VALIDATION AS 
select 
 MARKET_AREA_NM  
, count(1) TOTAL_ROWS
,sum(case when nvl(FAC_ID,'') = '' then 1 else 0 end)    		FAC_ID_NULL_CNT
,sum(case when nvl(FAC_NAME,'') = '' then 1 else 0 end)  		FAC_NAME_NULL_CNT
,sum(case when nvl(FAC_TYPE,'') = '' then 1 else 0 end)  		FAC_TYPE_NULL_CNT
,sum(case when nvl(MARKET_AREA_NM,'') = '' then 1 else 0 end) 	MARKET_AREA_NULL_CNT
,sum(case when nvl(ADDRESS_1,'') = '' then 1 else 0 end) 		ADDRESS_1_NULL_CNT
,sum(case when nvl(ADDRESS_2,'') = '' then 1 else 0 end) 		ADDRESS_2_NULL_CNT
,sum(case when nvl(CITY_NM,'') = '' then 1 else 0 end )	 		CITY_NM_NULL_CNT	
,sum(case when nvl(STATE_CD,'') = '' then 1 else 0 end)  		STATE_CD_NULL_CNT
,sum(case when nvl(ZIP_CD,'') = '' then 1 else 0 end)    		ZIP_CD_NULL_CNT
,sum(case when nvl(LATITUDE,0) = 0 then 1 else 0 end) 	 		LATITUDE_NULL_CNT
,sum(case when nvl(LONGITUDE,0) = 0 then 1 else 0 end)   		LONGITUDE_NULL_CNT
,sum(case when FAC_TYPE <>'HS' then case when nvl(TURN_TIME,0) = 0  then 1 else 0 end end) TURN_TIME_NULL_CNT
,sum(case when FAC_TYPE <>'HS' then case when nvl(MIN_TONS,0) = 0 then 1 else 0 end end) MIN_TONS_NULL_CNT
,sum(case when FAC_TYPE <>'HS' then case when nvl(MAX_TONS,0) = 0 then 1 else 0 end end)	MAX_TONS_NULL_CNT
,sum(case when FAC_TYPE <>'HS' then case when nvl(FIXED_COST,0) = 0 then 1 else 0 end end) FIXED_COST_NULL_CNT
,sum(case when nvl(WM_OWNED_FLAG,'') = '' then 1 else 0 end ) WM_OWNED_FLAG_NULL_CNT
from FACILITY_LOCATION_DATA_MART_BMT_COMBINED_VIEW
group by MARKET_AREA_NM;

-- ************************************** EXPLODED_FLOW_CONTROL
CREATE VIEW EXPLODED_FLOW_CONTROL AS
SELECT
    agg_fc.FC_RULE_NUMBER
    ,agg_fc.RULE_SOURCE
    ,agg_fc.METHOD_TYPE
    ,agg_fc.METHOD_TYPE_DESC
    ,agg_fc.LOB
    ,agg_fc.WASTE_TYPE
    ,agg_fc.COLLECTION_ENTITY
    ,agg_fc.MIN_TONS -- note scaled tons
    ,agg_fc.MAX_TONS -- note scaled tons
    ,detailed_fc.PKEY
    ,detailed_fc.DEST_COUNTY_NM
    ,detailed_fc.DEST_CITY_NM
    ,detailed_fc.DEST_DISPOSAL_SITE_ID
    ,detailed_fc.DEST_STATE_CD							-- add State as a destination
    ,detailed_fc.CUSTOMER_NM
    ,TRIM(GET(SPLIT(detailed_fc.RULE_TYPE,'-'),1)) AS RULE_DEST
    ,agg_fc.DISPOSAL_ENTITY as DISPOSAL_ENTITY
FROM MODEL_FLOW_CONTROL_RULES agg_fc
LEFT JOIN FLOW_CONTROL detailed_fc ON
    agg_fc.RULE_SOURCE = TRIM(GET(SPLIT(detailed_fc.RULE_TYPE,'-'),0)) AND
    agg_fc.METHOD_TYPE_DESC=detailed_fc.METHOD_TYPE AND --confusingly aliased METHOD_TYPE field in agg flow control
    agg_fc.LOB=detailed_fc.LOB AND
    agg_fc.WASTE_TYPE=detailed_fc.WASTE_TYPE AND
    COALESCE(agg_fc.MIN_TONS_UNSCALED,0) = COALESCE(detailed_fc.MIN_TONS,0) AND --join on unscaled tons
    COALESCE(agg_fc.MAX_TONS_UNSCALED,0) = COALESCE(detailed_fc.MAX_TONS,0) AND --join on unscaled tons
    (agg_fc.COLLECTION_ENTITY=UPPER(detailed_fc.SRC_STATE_CD||'-'||detailed_fc.SRC_CITY_NM) OR
    agg_fc.COLLECTION_ENTITY= UPPER(detailed_fc.SRC_STATE_CD||'-'||detailed_fc.SRC_COUNTY_NM) OR
    agg_fc.COLLECTION_ENTITY=UPPER(detailed_fc.SRC_HAULING_SITE_ID) OR
    agg_fc.COLLECTION_ENTITY=UPPER(detailed_fc.SRC_CUSTOMER_NM) OR
    agg_fc.COLLECTION_ENTITY=UPPER(detailed_fc.SRC_STATE_CD) OR
    agg_fc.COLLECTION_ENTITY=UPPER(detailed_fc.SRC_HAULING_SITE_ID||'-'||detailed_fc.SRC_OCS_DISPOSAL_CD))  -- OCS join
 WHERE agg_fc.METHOD_TYPE!=5 AND detailed_fc.ACTIVE_FLAG='A'
;

-- ************************************** COMRES_FACT_ADJUSTED
CREATE VIEW COMRES_FACT_ADJUSTED as

select

      GROUP_ID 

    , t2.MATCHED_LOCATIONID_TYPE as DispFacId

    , t1.DepotFacID

    , FAC_NM

    , t1.OCS_DISPOSAL_NM

    , t1.OCS_DISPOSAL_CD

    , INTERCOMPANY

    , INACTIVE

    , sublob

    , service_dt

    , LoadSeq

    , LoadCount

    , LAST_LOAD_FLAG 

    , Routeid

    , tons

    , COST

    , nbrloads

    , WM_Collection_Flag 

    , LOB 

    , WASTE_TYPE

    , StemLegs

    , DisposalLegs

    , ReturnLegs

    , CP_ID

    , VEHICLE_ID

from COMRES_FACT t1 LEFT JOIN LOCATION_MATCHING t2 on t1.DEPOTFACID = t2.HAULING_SITE_ID and t1.OCS_DISPOSAL_CD = t2.OCS_DISPOSAL_CD and t1.OCS_DISPOSAL_NM = t2.OCS_DISPOSAL_NM;

-- ************************************** COLLATED_CPS
CREATE VIEW COLLATED_CPS as

WITH eq_hauls AS (

    SELECT

        depotfacid

        , COUNT(*) AS eq_hauls

    FROM MART.ROLLOFF_FACT ro_fact

    WHERE

        waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)

        AND service_dt BETWEEN $start_date AND $end_date

        AND ( ro_fact.depotfacid IN (SELECT fac_id

                             FROM   mart.HAULING_SITE

                             WHERE  market_area_cd = $market_area) )

    GROUP BY depotfacid

)

SELECT

     group_id

   , NULL                          AS routeid

   , ro_fact.depotfacid||'_Depot'  AS depotfacid

   , dispfacid

   , MAX(wm_collection_flag)       AS wm_collection_flag

   , MAX(lob)                      AS lob

   , MIN(sublob)                   AS sublob

   , waste_type

   , SUM(tons)                     AS tons

   , COUNT(*)                      AS nbrloads

   , 2 / COALESCE(MAX(eq_hauls.eq_hauls), 1) AS stemlegs

   , MAX(disposallegs)             AS disposallegs

   , AVG(ro_fact.longitude)               AS longitude

   , AVG(ro_fact.latitude)                 AS latitude

   , 1                             AS load_seq

   , NULL AS house --TODO join in relevant customer information in ROLLOFF_FACT and choose any here

   , NULL AS street_name

   , NULL AS city

   , NULL AS zip

   , 1                             AS LAST_LOAD_FLAG

   , NULLIF(SPLIT_PART(max(nvl(ro_fact.GEO_COUNTY_NM,'AAA')||'~'||nvl(ro_fact.GEO_STATE_CD,'AAA')||'~'||nvl(ro_fact.GEO_CITY_NM,'AAA')||'~'||nvl(ro_fact.GEO_ZIP_CD,'AAA')) ,'~',1),'AAA') AS GEO_COUNTY_NM

  , NULLIF(SPLIT_PART(max(nvl(ro_fact.GEO_COUNTY_NM,'AAA')||'~'||nvl(ro_fact.GEO_STATE_CD,'AAA')||'~'||nvl(ro_fact.GEO_CITY_NM,'AAA')||'~'||nvl(ro_fact.GEO_ZIP_CD,'AAA')) ,'~',2),'AAA') AS GEO_STATE_CD

  , NULLIF(SPLIT_PART(max(nvl(ro_fact.GEO_COUNTY_NM,'AAA')||'~'||nvl(ro_fact.GEO_STATE_CD,'AAA')||'~'||nvl(ro_fact.GEO_CITY_NM,'AAA')||'~'||nvl(ro_fact.GEO_ZIP_CD,'AAA')) ,'~',3),'AAA') AS GEO_CITY_NM

  , NULLIF(SPLIT_PART(max(nvl(ro_fact.GEO_COUNTY_NM,'AAA')||'~'||nvl(ro_fact.GEO_STATE_CD,'AAA')||'~'||nvl(ro_fact.GEO_CITY_NM,'AAA')||'~'||nvl(ro_fact.GEO_ZIP_CD,'AAA')) ,'~',4),'AAA') AS GEO_ZIP_CD

   , MAX(customer_name)            AS customer_name

   , LISTAGG(DISTINCT ocs_disposal_cd,',')    WITHIN GROUP (ORDER BY ocs_disposal_cd)      AS ocs_disposal_cd

   , LISTAGG(DISTINCT ocs_disposal_nm,',')    WITHIN GROUP (ORDER BY ocs_disposal_nm)      AS ocs_disposal_description

   , MAX(returnlegs)               AS return_legs

   , DISPOSAL_TRIP_TYPE_cd

   , CASE WHEN DISPOSAL_TRIP_TYPE_cd != 'ER' AND DISPOSAL_TRIP_TYPE_cd IS NOT NULL -- comres is always null

       AND $optimize_eandr_only = 'Y' THEN 1 ELSE 0 END AS DCO_FROZEN_FLAG	-- Set as frozen if Optimize E&R only flag is set or 3P CP

  FROM   MART.ROLLOFF_FACT ro_fact

   LEFT JOIN eq_hauls ON eq_hauls.depotfacid = ro_fact.depotfacid

  WHERE

    waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)

    AND service_dt BETWEEN $start_date AND $end_date

    AND ( ro_fact.depotfacid IN (SELECT fac_id

                            FROM   MART.HAULING_SITE

                            WHERE  market_area_cd = $market_area) )

    GROUP  BY

        group_id

        , ro_fact.depotfacid

        , waste_type

        , dispfacid

        , DISPOSAL_TRIP_TYPE_cd

  UNION ALL

  SELECT

      comres.group_id

    , comres.routeid

    , comres.depotfacid||'_Depot'

    , comres.dispfacid

    , comres.wm_collection_flag

    , comres.lob

    , comres.sublob

    , comres.waste_type

    , SUM(comres.tons) AS tons

    , COUNT(comres.tons) AS nbrloads  -- there is only 1 non-null tons value per loadseq

    , comres.stemlegs

    , comres.disposallegs

    , AVG(comres.longitude) AS longitude

    , AVG(comres.latitude) AS latitude

    , comres.loadseq

    , NULL AS house

    , NULL AS street_name

    , NULL AS city

    , NULL AS zip

    , comres.LAST_LOAD_FLAG

    , NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',1),'AAA') AS GEO_COUNTY_NM

	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',2),'AAA') AS GEO_STATE_CD

	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',3),'AAA') AS GEO_CITY_NM

	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',4),'AAA') AS GEO_ZIP_CD

    , NULL AS customer_name

    , LISTAGG(DISTINCT ocs_disposal_cd,',')    WITHIN GROUP (ORDER BY ocs_disposal_cd)      AS ocs_disposal_cd

    , LISTAGG(DISTINCT ocs_disposal_nm,',')    WITHIN GROUP (ORDER BY ocs_disposal_nm)      AS ocs_disposal_description

    , comres.returnlegs AS return_legs

    , NULL AS DISPOSAL_TRIP_TYPE_cd

    , 0 AS dco_frozen_flag

  FROM MART.COMRES_FACT comres

  WHERE

     waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)

     AND service_dt BETWEEN $start_date AND $end_date

     AND comres.depotfacid IN

            (SELECT fac_id FROM mart.HAULING_SITE WHERE market_area_cd = $market_area)

  GROUP  BY

    comres.group_id

    , comres.routeid

    , comres.depotfacid

    , dispfacid

    , wm_collection_flag

    , comres.lob

    , comres.sublob

    , waste_type

    , stemlegs

    , disposallegs

    , loadseq

    , LAST_LOAD_FLAG

    , return_legs

;

-- ************************************** VALIDATION_DATA_TRANSFER_LANE_NULL_LOAD_SIZE
CREATE VIEW VALIDATION_DATA_TRANSFER_LANE_NULL_LOAD_SIZE AS
SELECT LANE_ORIGIN_FAC_ID,LANE_DESTINATION_FAC_ID,WASTE_TYPE,
 'Transfer lane with origin ' ||LANE_ORIGIN_FAC_ID||', destination '
 							  ||LANE_DESTINATION_FAC_ID||' and waste_type '
 							  ||WASTE_TYPE|| ' has a Cost Per Load but NULL Load Size' AS DETAIL
	  ,SUBSTR(LANE_ORIGIN_FAC_ID,1,6) AS LH_PARM_1
	  ,LH_FAC_TYPE(LANE_ORIGIN_FAC_ID)  AS LH_PARM_2
	  ,WASTE_TYPE AS LH_PARM_3
      ,SUBSTR(LANE_DESTINATION_FAC_ID,1,6) AS LH_PARM_4
	  ,LH_FAC_TYPE(LANE_DESTINATION_FAC_ID)  AS LH_PARM_5
  FROM PRE_MODEL_TRANSFER_COSTS --Use distinct? Or We want to get the total count with out distinct
  	WHERE LONG_HAUL_COST_PER_TON IS NULL
    AND LONG_HAUL_COST_PER_LOAD IS NOT NULL
  	AND LOAD_SIZE IS NULL
;

-- ************************************** MODEL_GOVERNING_CONSTRAINTS
CREATE VIEW MODEL_GOVERNING_CONSTRAINTS AS

SELECT

    SRC,

    FAC_ID,

    WASTE_TYPE,

    MIN(GOVERNING_MAX) AS MAX_TONS_GOVERNING_SCALED,

    MAX(GOVERNING_MIN) AS MIN_TONS_GOVERNING_SCALED

FROM MODEL_ALL_CONSTRAINTS

WHERE GOVERNING_MIN_FLAG=1 OR GOVERNING_MAX_FLAG=1

GROUP BY

    SRC,

    FAC_ID,

    WASTE_TYPE

;

-- ************************************** MODEL_COLLECTION_POINTS_BEFOREFIX_2232
CREATE VIEW MODEL_COLLECTION_POINTS_BEFOREFIX_2232 as 
WITH eq_hauls AS (
    SELECT
        depotfacid
        , COUNT(*) AS eq_hauls
    FROM QAT_ONEWM.MART.ROLLOFF_FACT ro_fact
    WHERE
        waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)
        AND service_dt BETWEEN $start_date AND $end_date
        AND ( ro_fact.depotfacid IN (SELECT fac_id
                             FROM   QAT_ONEWM.mart.HAULING_SITE
                             WHERE  market_area_cd = $market_area) )
    GROUP BY depotfacid
),
COLLATED_CPS AS
 (SELECT
      group_id
    , NULL                          AS routeid
    , ro_fact.depotfacid||'_Depot'  AS depotfacid
    , dispfacid
    , ANY_VALUE(wm_collection_flag)       AS wm_collection_flag
    , ANY_VALUE(lob)                      AS lob
    , ANY_VALUE(sublob)                   AS sublob
    , waste_type
    , SUM(tons)                     AS tons
    , COUNT(*)                      AS nbrloads
    , 2 / COALESCE(ANY_VALUE(eq_hauls.eq_hauls), 1) AS stemlegs
    , ANY_VALUE(disposallegs)             AS disposallegs
    , ANY_VALUE(longitude)                AS longitude
    , ANY_VALUE(latitude)                 AS latitude
    , 1                             AS load_seq
    , NULL AS house --TODO join in relevant customer information in ROLLOFF_FACT and choose any here
    , NULL AS street_name
    , NULL AS city
    , NULL AS zip
    , 1                             AS LAST_LOAD_FLAG
    , NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',1),'AAA') AS GEO_COUNTY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',2),'AAA') AS GEO_STATE_CD
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',3),'AAA') AS GEO_CITY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',4),'AAA') AS GEO_ZIP_CD
    , ANY_VALUE(customer_name)            AS customer_name
    , LISTAGG(DISTINCT ocs_disposal_cd,',')          AS ocs_disposal_cd
    , LISTAGG(DISTINCT ocs_disposal_nm,',')          AS ocs_disposal_description
    , MAX(returnlegs)               AS return_legs
    , DISPOSAL_TRIP_TYPE_cd
    , CASE WHEN DISPOSAL_TRIP_TYPE_cd != 'ER' AND DISPOSAL_TRIP_TYPE_cd IS NOT NULL -- comres is always null
    		AND $optimize_eandr_only = 'Y' THEN 1 ELSE 0 END AS DCO_FROZEN_FLAG	-- Set as frozen if Optimize E&R only flag is set or 3P CP
  FROM   QAT_ONEWM.MART.ROLLOFF_FACT ro_fact
    LEFT JOIN eq_hauls ON eq_hauls.depotfacid = ro_fact.depotfacid
  WHERE
     waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)
     AND service_dt BETWEEN $start_date AND $end_date
     AND ( ro_fact.depotfacid IN (SELECT fac_id
                             FROM   QAT_ONEWM.mart.HAULING_SITE
                             WHERE  market_area_cd = $market_area) )
     --AND (DISPOSAL_TRIP_TYPE_cd = 'EFO' AND dispfacid in (select fac_id from QAT_ONEWM.MART.DISPOSAL_SITE where active_flag='A'))
  GROUP  BY
        group_id
        , ro_fact.depotfacid
        , waste_type
        , dispfacid
        , DISPOSAL_TRIP_TYPE_cd
  UNION ALL
  SELECT
      comres.group_id
    , comres.routeid
    , comres.depotfacid||'_Depot'
    , comres.dispfacid
    , comres.wm_collection_flag
    , comres.lob
    , comres.sublob
    , comres.waste_type
    , SUM(comres.tons) AS tons
    , COUNT(comres.tons) AS nbrloads  -- there is only 1 non-null tons value per loadseq
    , comres.stemlegs
    , comres.disposallegs
    , AVG(comres.longitude) AS longitude
    , AVG(comres.latitude) AS latitude
    , comres.loadseq
    , NULL AS house
    , NULL AS street_name
    , NULL AS city
    , NULL AS zip
    , comres.LAST_LOAD_FLAG
    , NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',1),'AAA') AS GEO_COUNTY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',2),'AAA') AS GEO_STATE_CD
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',3),'AAA') AS GEO_CITY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',4),'AAA') AS GEO_ZIP_CD
    , NULL AS customer_name
    , LISTAGG(DISTINCT OCS_DISPOSAL_cd,',') as OCS_DISPOSAL_cd
    , LISTAGG(DISTINCT OCS_DISPOSAL_NM,',') as OCS_DISPOSAL_NM
    , comres.returnlegs AS return_legs
    , NULL AS DISPOSAL_TRIP_TYPE_cd
    , 0 AS dco_frozen_flag
  FROM QAT_ONEWM.MART.COMRES_FACT comres
  WHERE
     waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)
     AND service_dt BETWEEN $start_date AND $end_date
     AND comres.depotfacid IN
            (SELECT fac_id FROM QAT_ONEWM.mart.HAULING_SITE WHERE market_area_cd = $market_area)
  GROUP  BY
    comres.group_id
    , comres.routeid
    , comres.depotfacid
    , dispfacid
    , wm_collection_flag
    , comres.lob
    , comres.sublob
    , waste_type
    , stemlegs
    , disposallegs
    , loadseq
    , LAST_LOAD_FLAG
    , return_legs
)
SELECT
    ROW_NUMBER() OVER (ORDER BY --TODO: elaborate sort order to ensure consistent ROWNUMBER
    GROUP_ID,
    ROUTEID,
    DEPOTFACID,
    DISPFACID,
    WM_COLLECTION_FLAG,
    LOB,
    SUBLOB,
    WASTE_TYPE,
    TONS, --this should be sufficient2
    NBRLOADS,
    LOAD_SEQ) AS ROWNUMBER
    , *
 FROM (
        SELECT * FROM COLLATED_CPS
        UNION ALL
        SELECT * FROM THIRD_PARTY_CPS  -- filter 3rd party by the disposal facilities from the regular COLLATED_CPS
        WHERE dispfacid IN (SELECT DISTINCT dispfacid FROM COLLATED_CPS)
		AND dispfacid in (select fac_id from DISPOSAL_SITE where active_flag='A')
  );

-- ************************************** MODEL_COLLECTION_POINTS_AFTERFIX_2232
CREATE VIEW MODEL_COLLECTION_POINTS_AFTERFIX_2232 as 
WITH eq_hauls AS (
    SELECT
        depotfacid
        , COUNT(*) AS eq_hauls
    FROM QAT_ONEWM.MART.ROLLOFF_FACT ro_fact
    WHERE
        waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)
        AND service_dt BETWEEN $start_date AND $end_date
        AND ( ro_fact.depotfacid IN (SELECT fac_id
                             FROM   QAT_ONEWM.mart.HAULING_SITE
                             WHERE  market_area_cd = $market_area) )
    GROUP BY depotfacid
),
COLLATED_CPS AS
 (SELECT
      group_id
    , NULL                          AS routeid
    , ro_fact.depotfacid||'_Depot'  AS depotfacid
    , dispfacid
    , ANY_VALUE(wm_collection_flag)       AS wm_collection_flag
    , ANY_VALUE(lob)                      AS lob
    , ANY_VALUE(sublob)                   AS sublob
    , waste_type
    , SUM(tons)                     AS tons
    , COUNT(*)                      AS nbrloads
    , 2 / COALESCE(ANY_VALUE(eq_hauls.eq_hauls), 1) AS stemlegs
    , ANY_VALUE(disposallegs)             AS disposallegs
    , ANY_VALUE(longitude)                AS longitude
    , ANY_VALUE(latitude)                 AS latitude
    , 1                             AS load_seq
    , NULL AS house --TODO join in relevant customer information in ROLLOFF_FACT and choose any here
    , NULL AS street_name
    , NULL AS city
    , NULL AS zip
    , 1                             AS LAST_LOAD_FLAG
    , NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',1),'AAA') AS GEO_COUNTY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',2),'AAA') AS GEO_STATE_CD
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',3),'AAA') AS GEO_CITY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',4),'AAA') AS GEO_ZIP_CD
    , ANY_VALUE(customer_name)            AS customer_name
    , LISTAGG(DISTINCT ocs_disposal_cd,',')          AS ocs_disposal_cd
    , LISTAGG(DISTINCT ocs_disposal_nm,',')          AS ocs_disposal_description
    , MAX(returnlegs)               AS return_legs
    , DISPOSAL_TRIP_TYPE_cd
    , CASE WHEN DISPOSAL_TRIP_TYPE_cd != 'ER' AND DISPOSAL_TRIP_TYPE_cd IS NOT NULL -- comres is always null
    		AND $optimize_eandr_only = 'Y' THEN 1 ELSE 0 END AS DCO_FROZEN_FLAG	-- Set as frozen if Optimize E&R only flag is set or 3P CP
  FROM   QAT_ONEWM.MART.ROLLOFF_FACT ro_fact
    LEFT JOIN eq_hauls ON eq_hauls.depotfacid = ro_fact.depotfacid
  WHERE
     waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)
     AND service_dt BETWEEN $start_date AND $end_date
     AND ( ro_fact.depotfacid IN (SELECT fac_id
                             FROM   QAT_ONEWM.mart.HAULING_SITE
                             WHERE  market_area_cd = $market_area) )
     AND (DISPOSAL_TRIP_TYPE_CD != 'EFO' AND dispfacid in (select fac_id from DISPOSAL_SITE where active_flag='A'))
      GROUP  BY
        group_id
        , ro_fact.depotfacid
        , waste_type
        , dispfacid
        , DISPOSAL_TRIP_TYPE_cd
  UNION ALL
  SELECT
      comres.group_id
    , comres.routeid
    , comres.depotfacid||'_Depot'
    , comres.dispfacid
    , comres.wm_collection_flag
    , comres.lob
    , comres.sublob
    , comres.waste_type
    , SUM(comres.tons) AS tons
    , COUNT(comres.tons) AS nbrloads  -- there is only 1 non-null tons value per loadseq
    , comres.stemlegs
    , comres.disposallegs
    , AVG(comres.longitude) AS longitude
    , AVG(comres.latitude) AS latitude
    , comres.loadseq
    , NULL AS house
    , NULL AS street_name
    , NULL AS city
    , NULL AS zip
    , comres.LAST_LOAD_FLAG
    , NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',1),'AAA') AS GEO_COUNTY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',2),'AAA') AS GEO_STATE_CD
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',3),'AAA') AS GEO_CITY_NM
	, NULLIF(SPLIT_PART(max(nvl(GEO_COUNTY_NM,'AAA')||'~'||nvl(GEO_STATE_CD,'AAA')||'~'||nvl(GEO_CITY_NM,'AAA')||'~'||nvl(GEO_ZIP_CD,'AAA')) ,'~',4),'AAA') AS GEO_ZIP_CD
    , NULL AS customer_name
    , LISTAGG(DISTINCT OCS_DISPOSAL_cd,',') as OCS_DISPOSAL_cd
    , LISTAGG(DISTINCT OCS_DISPOSAL_NM,',') as OCS_DISPOSAL_NM
    , comres.returnlegs AS return_legs
    , NULL AS DISPOSAL_TRIP_TYPE_cd
    , 0 AS dco_frozen_flag
  FROM QAT_ONEWM.MART.COMRES_FACT comres
  WHERE
     waste_type IN ( 'MSW', 'C&D', 'SPW' )  -- TODO: move all WASTE_TYPE filtering to the most upstream table (CO_EVENTS)
     AND service_dt BETWEEN $start_date AND $end_date
     AND comres.depotfacid IN
            (SELECT fac_id FROM QAT_ONEWM.mart.HAULING_SITE WHERE market_area_cd = $market_area)
  GROUP  BY
    comres.group_id
    , comres.routeid
    , comres.depotfacid
    , dispfacid
    , wm_collection_flag
    , comres.lob
    , comres.sublob
    , waste_type
    , stemlegs
    , disposallegs
    , loadseq
    , LAST_LOAD_FLAG
    , return_legs
)
SELECT
    ROW_NUMBER() OVER (ORDER BY --TODO: elaborate sort order to ensure consistent ROWNUMBER
    GROUP_ID,
    ROUTEID,
    DEPOTFACID,
    DISPFACID,
    WM_COLLECTION_FLAG,
    LOB,
    SUBLOB,
    WASTE_TYPE,
    TONS, --this should be sufficient2
    NBRLOADS,
    LOAD_SEQ) AS ROWNUMBER
    , *
 FROM (
        SELECT * FROM COLLATED_CPS
   -- WHERE (DISPOSAL_TRIP_TYPE_cd != 'EFO' AND dispfacid in (select fac_id from QAT_ONEWM.MART.DISPOSAL_SITE where active_flag='A'))
 
        UNION ALL
        SELECT * FROM THIRD_PARTY_CPS  -- filter 3rd party by the disposal facilities from the regular COLLATED_CPS
        WHERE dispfacid IN (SELECT DISTINCT dispfacid FROM COLLATED_CPS)
		AND dispfacid in (select fac_id from DISPOSAL_SITE where active_flag='A')
  );

-- ************************************** MODEL_COLLECTION_POINTS
CREATE VIEW MODEL_COLLECTION_POINTS as

SELECT

    ROW_NUMBER() OVER (ORDER BY --TODO: elaborate sort order to ensure consistent ROWNUMBER

    GROUP_ID,

    ROUTEID,

    DEPOTFACID,

    DISPFACID,

    WM_COLLECTION_FLAG,

    LOB,

    SUBLOB,

    WASTE_TYPE,

    TONS, --this should be sufficient2

    NBRLOADS,

    LOAD_SEQ,

    OCS_DISPOSAL_CD,

    DISPOSAL_TRIP_TYPE_CD) AS ROWNUMBER

    , *

 FROM (

		SELECT CC.* FROM COLLATED_CPS CC

		LEFT JOIN DISPOSAL_SITE DS

			ON CC.DISPFACID = DS.FAC_ID AND CC.LOB = 'ROLLOFF'

		WHERE NOT (CC.DCO_FROZEN_FLAG = 1 AND DS.ACTIVE_FLAG ='I')



		UNION ALL



		SELECT * FROM THIRD_PARTY_CPS  -- filter 3rd party by the disposal facilities from the regular COLLATED_CPS

		WHERE dispfacid IN (SELECT DISTINCT dispfacid FROM COLLATED_CPS)

		AND dispfacid in (select fac_id from DISPOSAL_SITE where active_flag='A')

  );

-- ************************************** LH_LOCATION_MATCHING
CREATE VIEW LH_LOCATION_MATCHING as

select t1.HAULING_SITE_id, t3.fac_name as HAULING_SITE_name, t1.ocs_disposal_cd, t1.ocs_disposal_nm, 

substring(matched_locationid_type,1,6) as DISPOSAL_SITE_id, t4.fac_name as DISPOSAL_SITE_name,

CASE when substring(matched_locationid_type,8)  = 'TS' then 'Transfer Station'

     when substring(matched_locationid_type,8)  = 'MRF' then 'MRF Recycling' else

          substring(matched_locationid_type,8)  end  as DISPOSAL_SITE_type, TONS,

t1.last_updated_dtm, t1.last_updated_user 

    from LOCATION_MATCHING t1 join OCS_TONNAGE t2 on t1.HAULING_SITE_id = t2.HAULING_SITE_id and t1.ocs_disposal_cd = t2.ocs_disposal_cd 

    left join HAULING_SITE t3 on t1.HAULING_SITE_id = t3.fac_Id 

    left join DISPOSAL_SITE t4 on t1.matched_locationid_Type = t4.fac_Id

UNION 

select HAULING_SITE_id, fac_name, ocs_disposal_cd ,ocs_disposal_nm, null, null, null, TONS, null, null from OCS_TONNAGE  t1

    left join HAULING_SITE t3 on t1.HAULING_SITE_id = t3.fac_Id

where not exists (select 1 from LOCATION_MATCHING t2 where t1.HAULING_SITE_id = t2.HAULING_SITE_id and t1.ocs_disposal_cd = t2.ocs_disposal_cd );

-- ************************************** VALIDATION_DATA_NON_MATCHED_OCS
CREATE VIEW VALIDATION_DATA_NON_MATCHED_OCS AS

select

  LOB,

  WASTE_TYPE,

  DEPOTFACID,

  OCS_DISPOSAL_CD,

  OCS_DISPOSAL_NM,

  sum(TONS) AS TOTAL_TONS,

  'MODEL_COLLECTION_POINTS have records with OCS: ' || OCS_DISPOSAL_CD || ' (' || NVL(OCS_DISPOSAL_NM,'<no ocs name>') || ')' || ' that are not matched to any facilities.  Hauling site: ' || DEPOTFACID ||

    ', and total_tons: ' || CAST(CAST(TOTAL_TONS as decimal(15,1)) as string)

   as DETAIL

from

(select

  C.LOB,

  C.WASTE_TYPE,

  C.DEPOTFACID,

  C.OCS_DISPOSAL_CD,

  C.OCS_DISPOSAL_NM,

  C.TONS

from COMRES_FACT C

left join LOCATION_MATCHING LM on LM.HAULING_SITE_ID = C.DEPOTFACID and LM.OCS_DISPOSAL_CD = C.OCS_DISPOSAL_CD

WHERE

  LM.MATCHED_LOCATIONID_TYPE is null and

  (C.SERVICE_DT BETWEEN $start_date AND $end_date) and

  C.DEPOTFACID IN (SELECT FAC_ID FROM HAULING_SITE WHERE MARKET_AREA_CD=$market_area)

union all

select

  R.LOB,

  R.WASTE_TYPE,

  R.DEPOTFACID,

  R.OCS_DISPOSAL_CD,

  R.OCS_DISPOSAL_NM,

  R.TONS

from ROLLOFF_FACT R

left join LOCATION_MATCHING LM on LM.HAULING_SITE_ID = R.DEPOTFACID and LM.OCS_DISPOSAL_CD = R.OCS_DISPOSAL_CD

WHERE

  LM.MATCHED_LOCATIONID_TYPE is null and

  (R.SERVICE_DT BETWEEN $start_date AND $end_date) and

  R.DEPOTFACID IN (SELECT FAC_ID FROM HAULING_SITE WHERE MARKET_AREA_CD=$market_area)

)

group by

  LOB,

  WASTE_TYPE,

  DEPOTFACID,

  OCS_DISPOSAL_CD,

  OCS_DISPOSAL_NM

order by TOTAL_TONS DESC

;

-- ************************************** VALIDATION_DATA_FLEET_CAPACITY_EXISTS
CREATE VIEW VALIDATION_DATA_FLEET_CAPACITY_EXISTS AS
SELECT  DISTINCT
       CP.DEPOTFACID
      ,CP.SUBLOB
	  ,'Hauling site ' || SUBSTR(CP.DEPOTFACID,1,6) || ' sublob ' || CP.SUBLOB ||' has no truck capacity' AS DETAIL
	  ,SUBSTR(CP.DEPOTFACID,1,6) AS LH_PARM_1
	  ,'COLLECTION'  AS LH_PARM_2
      ,NULL AS LH_PARM_3
	  ,NULL AS LH_PARM_4
	  ,NULL AS LH_PARM_5 
FROM MODEL_COLLECTION_POINTS CP
LEFT JOIN HAULING_SITE_CAPACITY HSC ON HSC.FAC_ID = substring(CP.DEPOTFACID,1,6) AND HSC.SUBLOB = CP.SUBLOB
WHERE (HSC.TRUCK_CNT IS NULL or (HSC.TRUCK_CNT is NOT NULL and HSC.TRUCK_CNT = 0)) AND (CP.DEPOTFACID != '3PDEPOT')
;

-- ************************************** VALIDATION_DATA_COMPLETENESS_MODEL_COLLECTION_POINTS
CREATE VIEW VALIDATION_DATA_COMPLETENESS_MODEL_COLLECTION_POINTS AS
SELECT
   DEPOTFACID
  ,OCS_DISPOSAL_CD
  ,COUNT(*) AS TOTAL_RECORDS
  ,SUM(TONS) AS TOTAL_TONS
  ,'Hauling Site ' || DEPOTFACID || ' with OCS_Disposal_Code ' || NVL(OCS_DISPOSAL_CD, '') ||
    ' - ' || NVL(MAX(OCS_DISPOSAL_DESCRIPTION),'') ||
    ' - has no Disposal Facility mapped.  It accounts for '|| CAST(TOTAL_RECORDS AS STRING) ||
    ' collection points and ' || CAST(TOTAL_TONS AS STRING)||' Tons' AS DETAIL
  ,SUBSTR(DEPOTFACID,1,6) AS LH_PARM_1
  ,'COLLECTION'  AS LH_PARM_2
  ,OCS_DISPOSAL_CD AS LH_PARM_3
  ,NULL AS LH_PARM_4
  ,NULL AS LH_PARM_5
FROM MODEL_COLLECTION_POINTS
WHERE DISPFACID IS NULL
GROUP BY DEPOTFACID, OCS_DISPOSAL_CD;

-- ************************************** VALIDATION_DATA_COLLECTION_POINT_SUMMARY
CREATE VIEW VALIDATION_DATA_COLLECTION_POINT_SUMMARY AS

SELECT DISPFACID

      ,WASTE_TYPE

      ,COUNT(*) as NUMBER_OF_RECORDS

      ,SUM(TONS) as TOTAL_TONNAGE

FROM MODEL_COLLECTION_POINTS CP

GROUP BY CP.DISPFACID, CP.WASTE_TYPE

ORDER BY CP.DISPFACID, CP.WASTE_TYPE;

-- ************************************** SUB_LOB_TOTAL_ROUTE_DURATION
CREATE VIEW SUB_LOB_TOTAL_ROUTE_DURATION AS
SELECT
    r.HAULING_SITE,
    cp.SUBLOB,
    SUM(r.TOTAL_DURATION_HRS) AS TOTAL_ROUTE_DURATION_HRS
FROM ROUTE_DURATION r
INNER JOIN MODEL_COLLECTION_POINTS cp ON TO_VARCHAR(r.RO_KEY)=cp.ROUTEID AND r.HAULING_SITE=cp.DEPOTFACID
GROUP BY r.HAULING_SITE, cp.SUBLOB;

-- ************************************** PRE_MODEL_FACILITIES
CREATE VIEW PRE_MODEL_FACILITIES AS
select t1.fac_id,
        coalesce(t2.fac_name, t3.fac_name) as fac_name,
        case when t2.fac_id is not null then 'Collection' else substring(t3.fac_id,8) end as fac_type,
        coalesce (t2.address_1, t3.address_1) as address_1,
        coalesce (t2.address_2, t3.address_2) as address_2,
        coalesce (t2.GEO_CITY_NM, t3.GEO_CITY_NM) as GEO_CITY_NM,
        coalesce (t2.GEO_COUNTY_NM, t3.GEO_COUNTY_NM) as GEO_COUNTY_NM,
        coalesce (t2.GEO_STATE_CD, t3.GEO_STATE_CD) as GEO_STATE_CD,
        coalesce (t2.GEO_ZIP_CD, t3.GEO_ZIP_CD) as GEO_ZIP_CD,
        coalesce (t2.latitude, t3.latitude) as latitude,
        coalesce (t2.longitude, t3.longitude) as longitude,
        t4.cycle_minute_cnt as turn_time,
        gc.min_tons_governing_scaled as MIN_TONS,
        gc.max_tons_governing_scaled as MAX_TONS,
        fixed_cost as fixed_cost ,
        coalesce (t2.wm_owned_flag, t3.wm_owned_flag) as wm_owned_flag,
        coalesce (t2.active_flag, t3.active_flag) as status_ind,
        COALESCE(T2.FAC_SHORT_NM,T3.FAC_SHORT_NM) AS FAC_SHORT_NM
from MODEL_FACILITY_LIST t1 left join HAULING_SITE t2 on t1.fac_id = t2.fac_id||'_Depot'
                            left join DISPOSAL_SITE t3 on t1.fac_id = t3.fac_id
                            LEFT JOIN MODEL_GOVERNING_CONSTRAINTS gc ON t1.FAC_ID=gc.FAC_ID AND gc.SRC='GLOBAL_FACILITY_CONSTRAINT'
                            LEFT JOIN (SELECT FAC_ID, AVG(CYCLE_MINUTE_CNT) AS CYCLE_MINUTE_CNT FROM DISPOSAL_SITE_LOB GROUP BY FAC_ID) t4 ON t1.FAC_ID = t4.FAC_ID
WHERE t1.FAC_ID != '3PDEPOT'
UNION ALL
select '3PDEPOT' as fac_id,             -- Dummy depot for 3rd party
       '3rd Party Depot' as fac_name,
       'Collection' as fac_type,
       null as address_1,
       null as address_2,
       NULL AS GEO_CITY_NM,
       NULL AS GEO_COUNTY_NM,
       NULL AS GEO_STATE_CD,
       NULL AS GEO_ZIP_CD,
       39.828 as latitude,              -- Center of US
      -98.5696 as longitude,
       20 as turn_time,
       0   as min_tons,
       999999 as max_tons,
       0 as fixed_cost ,
       'N' as wm_owned_flag ,
       'A' as status_ind ,
       '3PDEPOT' AS FAC_SHORT_NM;

-- ************************************** MODEL_FLOW_CONTROL_COLLECTION
CREATE VIEW MODEL_FLOW_CONTROL_COLLECTION AS

--Get all non-special rate rules
WITH NON_SPECIAL_RATE_RULES AS
(SELECT * FROM MODEL_FLOW_CONTROL_RULES
WHERE METHOD_TYPE != 5),

-- GET all state-level rules (excluding special rate)
STATE_FLOW_CONTROL AS
(SELECT
    FC_RULE_NUMBER
    ,RULE_SOURCE
    ,METHOD_TYPE
    ,LOB
    ,WASTE_TYPE
    ,COLLECTION_ENTITY
    ,MIN_TONS
    ,MAX_TONS
FROM NON_SPECIAL_RATE_RULES where RULE_SOURCE='State'),

-- GET all county-level rules (excluding special rate)
COUNTY_FLOW_CONTROL AS
(SELECT
    FC_RULE_NUMBER
    ,RULE_SOURCE
    ,METHOD_TYPE
    ,LOB
    ,WASTE_TYPE
    ,COLLECTION_ENTITY
    ,MIN_TONS
    ,MAX_TONS
FROM NON_SPECIAL_RATE_RULES where RULE_SOURCE='County'),

-- GET all city-level rules (excluding special rate)
CITY_FLOW_CONTROL AS
(SELECT
    FC_RULE_NUMBER
    ,RULE_SOURCE
    ,METHOD_TYPE
    ,LOB
    ,WASTE_TYPE
    ,COLLECTION_ENTITY
    ,MIN_TONS
    ,MAX_TONS
FROM NON_SPECIAL_RATE_RULES where RULE_SOURCE='City'),

-- GET all site-level rules (excluding special rate)
HAULING_SITE_FLOW_CONTROL AS
(SELECT
    FC_RULE_NUMBER
    ,RULE_SOURCE
    ,METHOD_TYPE
    ,LOB
    ,WASTE_TYPE
    ,COLLECTION_ENTITY
    ,MIN_TONS
    ,MAX_TONS
FROM NON_SPECIAL_RATE_RULES where RULE_SOURCE='Hauling Site'),

-- GET all Hauling Site - OCS Rules rules (excluding special rate)
OCS_FLOW_CONTROL AS
(SELECT
    FC_RULE_NUMBER
    ,RULE_SOURCE
    ,METHOD_TYPE
    ,LOB
    ,WASTE_TYPE
    ,COLLECTION_ENTITY
    ,MIN_TONS
    ,MAX_TONS
FROM NON_SPECIAL_RATE_RULES where RULE_SOURCE='OCS Code'),

--Create the table for all state-sourced flow controls and associated collection points
FLOW_CONTROL_STATE_COLLECTION AS
(SELECT
    fc.FC_RULE_NUMBER
    ,fc.LOB AS FC_LOB
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
    ,cp.ROWNUMBER
    ,cp.LOB
    ,cp.WASTE_TYPE
FROM STATE_FLOW_CONTROL fc
INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.GEO_STATE_CD)=UPPER(fc.COLLECTION_ENTITY)
WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or
      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR
      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR
      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))),

--Create the table for all county-souced flow controls and associated collection points
FLOW_CONTROL_COUNTY_COLLECTION AS
(SELECT
    fc.FC_RULE_NUMBER
    ,fc.LOB AS FC_LOB
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
    ,cp.ROWNUMBER
    ,cp.LOB
    ,cp.WASTE_TYPE
FROM COUNTY_FLOW_CONTROL fc
INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.GEO_STATE_CD||'-'||cp.GEO_COUNTY_NM) = UPPER(fc.COLLECTION_ENTITY)
WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or
      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR
      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR
      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))),

--Create the table for all city-souced flow controls and associated collection points
FLOW_CONTROL_CITY_COLLECTION AS
(SELECT
    fc.FC_RULE_NUMBER
    ,fc.LOB AS FC_LOB
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
    ,cp.ROWNUMBER
    ,cp.LOB
    ,cp.WASTE_TYPE
FROM CITY_FLOW_CONTROL fc
INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.GEO_STATE_CD||'-'||cp.GEO_CITY_NM)=UPPER(fc.COLLECTION_ENTITY)
WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or
      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR
      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR
      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))),

--Create the table for all site-souced flow controls and associated collection points
FLOW_CONTROL_SITE_COLLECTION AS
(SELECT
    fc.FC_RULE_NUMBER
    ,fc.LOB AS FC_LOB
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
    ,cp.ROWNUMBER
    ,cp.LOB
    ,cp.WASTE_TYPE
FROM HAULING_SITE_FLOW_CONTROL fc
INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.DEPOTFACID)=UPPER(fc.COLLECTION_ENTITY||'_DEPOT')
WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or
      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR
      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR
      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))),

 -- Create the table for all Hauling Site OCS flow controls and associated collection points
 -- We are looking for a match on both the Depot and also checking to see if the OCS disposal code contains the OCS disposal code list in the flow control
 -- Some OCS Disposal codes have multiple - e.g ABC, DEF - the CONTAINS handles this scenario
 FLOW_CONTROL_OCS_COLLECTION AS
(SELECT
    fc.FC_RULE_NUMBER
    ,fc.LOB AS FC_LOB
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
    ,cp.ROWNUMBER
    ,cp.LOB
    ,cp.WASTE_TYPE
FROM OCS_FLOW_CONTROL fc
 INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.DEPOTFACID)=UPPER(GET(SPLIT(fc.COLLECTION_ENTITY,'-'),0)||'_DEPOT') AND
 										  CONTAINS( UPPER(CP.OCS_DISPOSAL_CD) , UPPER(GET(SPLIT(fc.COLLECTION_ENTITY,'-'),1) )) AND CP.OCS_DISPOSAL_CD IS NOT NULL
WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or
      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR
      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR
      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL')))



--Create table
SELECT
    FC_RULE_NUMBER
    ,ROWNUMBER
FROM FLOW_CONTROL_STATE_COLLECTION
UNION
SELECT
    FC_RULE_NUMBER
    ,ROWNUMBER
FROM FLOW_CONTROL_COUNTY_COLLECTION
UNION
SELECT
    FC_RULE_NUMBER
    ,ROWNUMBER
FROM FLOW_CONTROL_CITY_COLLECTION
UNION
SELECT
    FC_RULE_NUMBER
    ,ROWNUMBER
FROM FLOW_CONTROL_SITE_COLLECTION
UNION
SELECT
    FC_RULE_NUMBER
    ,ROWNUMBER
FROM FLOW_CONTROL_OCS_COLLECTION
;

-- ************************************** MODEL_DEPOT_LOB
CREATE VIEW MODEL_DEPOT_LOB as

select

  mcp.depotfacid as FAC_ID,

  mcp.SUBLOB,

  VEHICLE_COST_PER_HOUR as COSTS_PER_HOUR,

  5 as CUT_OFF_TIME_HOURS                     from

    (select distinct depotfacid, LOB, SUBLOB from MODEL_COLLECTION_POINTS ) mcp

    left join HAULING_SITE_CAPACITY hs

on substring(mcp.depotfacid,1,6) = hs.fac_id and mcp.SUBLOB = hs.SUBLOB;

-- ************************************** TOTAL_ROUTE_DURATION
CREATE VIEW TOTAL_ROUTE_DURATION as (

SELECT  -- Total duration can be consistently calculated as we always have start and end events

    HAULING_SITE,

    SUBLOB,

    RO_KEY,

    TOTAL_ROUTE_DURATION_HRS

FROM MART.TOTAL_ROUTE_DURATION_DETAILS

WHERE SERVICE_DT BETWEEN $start_date AND $end_date

AND (HAULING_SITE IN (SELECT DISTINCT REPLACE(FAC_ID,'_Depot') FROM MODEL_DEPOT_LOB))

);

-- ************************************** MODEL_FACILITIES
CREATE VIEW MODEL_FACILITIES as
with THIRD_PARTY_TOTAL_TONNAGE AS (
SELECT dispfacid, COALESCE(sum(tons),0) as tons_3p
FROM MODEL_COLLECTION_POINTS where depotfacid='3PDEPOT'
GROUP BY dispfacid
)
select  fac_id,
        fac_name,
        fac_type,
        address_1,
        address_2,
        GEO_CITY_NM,
        GEO_COUNTY_NM,
        GEO_STATE_CD,
        GEO_ZIP_CD,
        latitude,
        longitude,
        nvl(turn_time, 20)  as turn_time,
        nvl(min_tons, 0)      as min_tons,
        case when max_tons is null or max_tons = 0 then 999999999 else GREAtest(max_tons,COALESCE(third_party.tons_3p,0)) end as max_tons,
        nvl(fixed_cost, 0) as fixed_cost ,
        wm_owned_flag ,
        status_ind,
        FAC_SHORT_NM
from PRE_MODEL_FACILITIES
LEFT JOIN THIRD_PARTY_TOTAL_TONNAGE third_party ON PRE_MODEL_FACILITIES.FAC_ID=third_party.DISPFACID;

-- ************************************** VALIDATION_DATA_TRANSFER_STATION_HAS_OUTBOUND_TRANSFER_LANES
CREATE VIEW VALIDATION_DATA_TRANSFER_STATION_HAS_OUTBOUND_TRANSFER_LANES AS
SELECT DS.FAC_ID
      ,DS.WM_OWNED_FLAG
      ,'Transfer Station ' || DS.FAC_ID || ' has no Outbound Transfer Lanes' AS DETAIL
FROM DISPOSAL_SITE DS
INNER JOIN MODEL_FACILITIES FAC on FAC.FAC_ID = DS.FAC_ID
LEFT JOIN MODEL_TRANSFER_COSTS TC ON TC.LANE_ORIGIN_FAC_ID = DS.FAC_ID
WHERE DS.FAC_TYPE='TS' AND TC.LANE_ORIGIN_FAC_ID IS NULL AND UPPER(DS.WM_OWNED_FLAG) = 'Y';

-- ************************************** VALIDATION_DATA_TRANSFER_LANES_LEGAL
CREATE VIEW VALIDATION_DATA_TRANSFER_LANES_LEGAL AS
SELECT TC.LANE_ORIGIN_FAC_ID AS TS_FAC_ID, TOTAL_TONS
	   ,'Transfer Lane with origin '||TC.LANE_ORIGIN_FAC_ID||', destination '||TC.LANE_DESTINATION_FAC_ID || ' and waste type '||TC.WASTE_TYPE ||
	    case when DS_ORIGIN.STATUS_IND IS NULL then ' has origin nonexistent in model facilities.' else '' end ||
        case when DS_ORIGIN.STATUS_IND IS NOT NULL and DS_ORIGIN.STATUS_IND != 'A' then ' has inactive origin.'  else '' end ||
        case when DS_DEST.STATUS_IND IS NULL then ' has destination nonexistent in model facilities.' ELSE  '' end ||
        case when DS_DEST.STATUS_IND IS NOT NULL and DS_DEST.STATUS_IND != 'A' then ' has inactive destination.' else '' end ||
	    CASE WHEN TOTAL_RECORDS IS NULL THEN ' Transfer Lane Origin and waste type have no collection points  ' ELSE
        ' Transfer Lane origin and waste type accounts for '||TOTAL_RECORDS ||' Collection Points and '||round(TOTAL_TONS,2)||' Tons' END AS DETAIL
	  ,SUBSTR(TC.LANE_ORIGIN_FAC_ID,1,6) AS LH_PARM_1
	  ,LH_FAC_TYPE(TC.LANE_ORIGIN_FAC_ID)  AS LH_PARM_2
      ,NULL AS LH_PARM_3
	  ,NULL AS LH_PARM_4
	  ,NULL AS LH_PARM_5
FROM MODEL_TRANSFER_COSTS TC
LEFT JOIN MODEL_FACILITIES DS_ORIGIN ON TC.LANE_ORIGIN_FAC_ID=DS_ORIGIN.FAC_ID
LEFT JOIN MODEL_FACILITIES DS_DEST ON TC.LANE_DESTINATION_FAC_ID=DS_DEST.FAC_ID
LEFT JOIN
(
	SELECT DISPFACID, WASTE_TYPE
		  ,COUNT(*) AS TOTAL_RECORDS
		  ,SUM(TONS) AS TOTAL_TONS
	FROM MODEL_COLLECTION_POINTS
	GROUP BY DISPFACID, WASTE_TYPE
)MP ON TC.LANE_ORIGIN_FAC_ID = MP.DISPFACID  AND TC.WASTE_TYPE = MP.WASTE_TYPE
WHERE DS_ORIGIN.FAC_ID IS NULL OR UPPER(DS_ORIGIN.STATUS_IND) != 'A' OR
      DS_DEST.FAC_ID IS NULL OR UPPER(DS_DEST.STATUS_IND) != 'A'
;

-- ************************************** VALIDATION_DATA_SUSPICIOUS_LOC_MATCH
CREATE VIEW VALIDATION_DATA_SUSPICIOUS_LOC_MATCH AS
select
	HS.fac_id as HS_FAC_ID,
	LM.OCS_DISPOSAL_CD,
	HAVERSINE(HS.LATITUDE, HS.LONGITUDE, FAC.LATITUDE, FAC.LONGITUDE)*(0.62) AS GREAT_CIRCLE_MILES,
	'Hauling site '||HS.FAC_ID||' with disposal code '||LM.OCS_DISPOSAL_CD||' maps to disposal site '||FAC.FAC_ID||' which is '||CAST(GREAT_CIRCLE_MILES AS DECIMAL(8,2))||' miles away. Hauling Site Detals: '||
	HS.FAC_ID||', '||nvl(HS.FAC_NAME,'')||', '||nvl(HS.GEO_CITY_NM,'')||', '||nvl(HS.GEO_STATE_CD,'')||'. Disposal Site Details: '||
	FAC.FAC_ID||', '||nvl(FAC.FAC_NAME,'')||', '||nvl(FAC.GEO_CITY_NM,'')||', '||nvl(FAC.GEO_STATE_CD,'')||'. It accounts for '|| MCP.NUMBER_OF_RECORDS ||
    ' collection points and ' || MCP.TOTAL_TONNAGE||' Tons' AS DETAIL
	,SUBSTR(HS.FAC_ID,1,6) AS LH_PARM_1
	,'COLLECTION'  AS LH_PARM_2
    ,LM.OCS_DISPOSAL_CD AS LH_PARM_3
    ,NULL AS LH_PARM_4
	,NULL AS LH_PARM_5
from LOCATION_MATCHING LM
inner join HAULING_SITE HS on HS.fac_id = LM.HAULING_SITE_ID
inner join MODEL_FACILITIES FAC on FAC.fac_id = LM.matched_locationid_type
inner join (SELECT DEPOTFACID, OCS_DISPOSAL_CD, COUNT(*) AS NUMBER_OF_RECORDS, SUM(TONS) AS TOTAL_TONNAGE
       FROM MODEL_COLLECTION_POINTS
       GROUP BY DEPOTFACID, OCS_DISPOSAL_CD, DISPFACID) MCP
	   on (LM.HAULING_SITE_ID = SUBSTR(MCP.DEPOTFACID,1,6) and LM.OCS_DISPOSAL_CD = MCP.OCS_DISPOSAL_CD)
WHERE GREAT_CIRCLE_MILES > 100.0
;

-- ************************************** VALIDATION_DATA_PRE_MODEL_NO_TURN_TIME
CREATE VIEW VALIDATION_DATA_PRE_MODEL_NO_TURN_TIME AS
SELECT
     PMF.FAC_ID, TOTAL_TONS, PMF.TURN_TIME,
     'Turn time not supplied for Facility '||PMF.FAC_ID||'. A substitute turn time of '||round(MF.TURN_TIME,2)||' was applied.'||
     CASE WHEN TOTAL_RECORDS IS NULL THEN ' Facility and waste type have no collection points  ' ELSE
      ' Facility and waste type accounts for '||TOTAL_RECORDS ||' Collection Points and '||round(TOTAL_TONS,2)||' Tons' END AS DETAIL
	,SUBSTR(PMF.FAC_ID,1,6) AS LH_PARM_1
	,LH_FAC_TYPE(PMF.FAC_ID)  AS LH_PARM_2
	,NULL AS LH_PARM_3
	,NULL AS LH_PARM_4
	,NULL AS LH_PARM_5
FROM PRE_MODEL_FACILITIES PMF
LEFT JOIN (
  SELECT MCP.DISPFACID as DISPFACID
    	,COUNT(*) AS TOTAL_RECORDS
    	,SUM(TONS) AS TOTAL_TONS
  FROM MODEL_COLLECTION_POINTS MCP
  GROUP BY DISPFACID
) MP ON PMF.FAC_ID = MP.DISPFACID
INNER JOIN MODEL_FACILITIES MF ON MF.FAC_ID = PMF.FAC_ID
WHERE PMF.TURN_TIME IS NULL
;

-- ************************************** VALIDATION_DATA_PRE_MODEL_NO_LONG_HAUL_COST
CREATE VIEW VALIDATION_DATA_PRE_MODEL_NO_LONG_HAUL_COST AS
SELECT  TC.LANE_ORIGIN_FAC_ID,
		TC.LANE_DESTINATION_FAC_ID,
		TC.WASTE_TYPE AS WASTE_TYPE,
		MP.TOTAL_TONS AS TOTAL_TONS,
       'No long haul cost supplied for Origin '||TC.LANE_ORIGIN_FAC_ID||', destination '||TC.LANE_DESTINATION_FAC_ID||' and Waste type '||TC.WASTE_TYPE||
       '. A substitute cost of $'||MTC.LONG_HAUL_COST||' was applied.'||
     	CASE WHEN TOTAL_RECORDS IS NULL THEN ' Origin and waste type have no collection points  ' ELSE
        ' Origin and waste type accounts for '||TOTAL_RECORDS ||' Collection Points and '||TOTAL_TONS||' Tons' END AS DETAIL
		,SUBSTR(TC.LANE_ORIGIN_FAC_ID,1,6) AS LH_PARM_1
		,LH_FAC_TYPE(TC.LANE_ORIGIN_FAC_ID)  AS LH_PARM_2
		,TC.WASTE_TYPE AS LH_PARM_3
		,SUBSTR(TC.LANE_DESTINATION_FAC_ID,1,6) AS LH_PARM_4
		,LH_FAC_TYPE(TC.LANE_DESTINATION_FAC_ID)  AS LH_PARM_5
FROM PRE_MODEL_TRANSFER_COSTS TC
LEFT JOIN
(
  SELECT MCP.DISPFACID AS DISPFACID ,
          WASTE_TYPE ,
          COUNT(*) AS TOTAL_RECORDS ,
          SUM(TONS) AS TOTAL_TONS
   FROM MODEL_COLLECTION_POINTS MCP
   GROUP BY DISPFACID ,
            WASTE_TYPE
) MP ON TC.LANE_ORIGIN_FAC_ID = MP.DISPFACID
AND TC.WASTE_TYPE=MP.WASTE_TYPE
	INNER JOIN MODEL_TRANSFER_COSTS MTC ON 	MTC.LANE_ORIGIN_FAC_ID = TC.LANE_ORIGIN_FAC_ID AND
											MTC.LANE_DESTINATION_FAC_ID = TC.LANE_DESTINATION_FAC_ID AND
											MTC.WASTE_TYPE = TC.WASTE_TYPE
	WHERE TC.LONG_HAUL_COST IS NULL
;

-- ************************************** VALIDATION_DATA_PRE_MODEL_NO_LOAD_SIZE
CREATE VIEW VALIDATION_DATA_PRE_MODEL_NO_LOAD_SIZE AS
SELECT TC.LANE_ORIGIN_FAC_ID,
       TC.LANE_DESTINATION_FAC_ID,
       TC.WASTE_TYPE WASTE_TYPE,
	MP.TOTAL_TONS AS TOTAL_TONS,
       'No load size supplied for Origin '||TC.LANE_ORIGIN_FAC_ID||', destination '||TC.LANE_DESTINATION_FAC_ID||' and Waste type '||TC.WASTE_TYPE||
       '. A substitute load size of '||MTC.LOAD_SIZE||' was applied.'||
     	CASE WHEN TOTAL_RECORDS IS NULL THEN ' Origin and waste type have no collection points  ' ELSE
        ' Origin and waste type accounts for '||TOTAL_RECORDS ||' Collection Points and '||TOTAL_TONS||' Tons' END AS DETAIL
		,SUBSTR(TC.LANE_ORIGIN_FAC_ID,1,6) AS LH_PARM_1
		,LH_FAC_TYPE(TC.LANE_ORIGIN_FAC_ID)  AS LH_PARM_2
		,TC.WASTE_TYPE AS LH_PARM_3
		,SUBSTR(TC.LANE_DESTINATION_FAC_ID,1,6) AS LH_PARM_4
		,LH_FAC_TYPE(TC.LANE_DESTINATION_FAC_ID)  AS LH_PARM_5
FROM PRE_MODEL_TRANSFER_COSTS TC
LEFT JOIN
(
  SELECT MCP.DISPFACID AS DISPFACID ,
          WASTE_TYPE ,
          COUNT(*) AS TOTAL_RECORDS ,
          SUM(TONS) AS TOTAL_TONS
   FROM MODEL_COLLECTION_POINTS MCP
   GROUP BY DISPFACID ,
            WASTE_TYPE
) MP ON TC.LANE_ORIGIN_FAC_ID = MP.DISPFACID
AND TC.WASTE_TYPE=MP.WASTE_TYPE
INNER JOIN MODEL_TRANSFER_COSTS MTC ON 	MTC.LANE_ORIGIN_FAC_ID = TC.LANE_ORIGIN_FAC_ID AND
										MTC.LANE_DESTINATION_FAC_ID = TC.LANE_DESTINATION_FAC_ID AND
										MTC.WASTE_TYPE = TC.WASTE_TYPE
WHERE TC.LOAD_SIZE IS NULL
;

-- ************************************** VALIDATION_DATA_OMITTED_DCO_FROZEN_CPS
CREATE VIEW VALIDATION_DATA_OMITTED_DCO_FROZEN_CPS AS
SELECT
DEPOTFACID
,DISPFACID
,TONS
,'3P collection point of ' || TONS || ' tons to ' || DISPFACID || ' is omitted from the baseline because facility is inactive' as DETAIL
,SUBSTR(DISPFACID,1,6) AS LH_PARM_1
,LH_FAC_TYPE(DISPFACID)  AS LH_PARM_2
,NULL AS LH_PARM_3
,NULL AS LH_PARM_4
,NULL AS LH_PARM_5
FROM THIRD_PARTY_CPS
WHERE DISPFACID IN (select fac_id from MODEL_FACILITIES where status_ind!='A')

UNION ALL

SELECT
DEPOTFACID
,DISPFACID
,TONS
,'Non-3P collection point of ' || TONS || ' tons to ' || DISPFACID || ' is omitted from the baseline and optimized because facility is inactive' as DETAIL
,SUBSTR(DISPFACID,1,6) AS LH_PARM_1
,LH_FAC_TYPE(DISPFACID)  AS LH_PARM_2
,NULL AS LH_PARM_3
,NULL AS LH_PARM_4
,NULL AS LH_PARM_5
FROM COLLATED_CPS
WHERE DISPFACID IN (select fac_id from MODEL_FACILITIES where status_ind!='A')
 AND DCO_FROZEN_FLAG=1 AND LOB!='3PLOB'
;

-- ************************************** VALIDATION_DATA_MATCHED_LOC_NO_LAT_LONG
CREATE VIEW VALIDATION_DATA_MATCHED_LOC_NO_LAT_LONG as

select

  HS.fac_id as HS_FAC_ID,

  HS.FAC_NAME as HAULING_SITE_NAME,

  HS.CITY_NM as HAULING_SITE_CITY,

  HS.STATE_CD as HAULING_SITE_STATE,

  FAC.fac_id as DISPOSAL_FAC_ID,

  FAC.FAC_NAME as DISPOSAL_NAME,

  FAC.GEO_CITY_NM as DISPOSAL_CITY,

  FAC.GEO_STATE_CD as DISPOSAL_STATE,

  OCS_DISPOSAL_CD,

  OCS_DISPOSAL_NM,

  'No LAT/LONG for location matching, record with hauling site: ' || HS.FAC_ID || ' (' || HS.FAC_NAME || ',' || HS.CITY_NM || ',' || HS.STATE_CD ||

    ') and disposal facility: ' || FAC.FAC_ID || ' (' || NVL(FAC.FAC_NAME, '<no name>') || ',' || NVL(FAC.GEO_CITY_NM, '<no geo city>') || ',' ||

    NVL(FAC.GEO_STATE_CD, '<no geo state>') || ')'

    as DETAIL

from LOCATION_MATCHING LM

inner join HAULING_SITE HS on HS.fac_id = LM.HAULING_SITE_ID

--inner join MODEL_FACILITIES FAC_HS on FAC_HS.fac_id=HS.fac_id

inner join MODEL_FACILITIES FAC on FAC.fac_id = LM.matched_locationid_type

WHERE FAC.LATITUDE is null

;

-- ************************************** VALIDATION_DATA_COMPLETENESS_MODEL_FACILITIES
CREATE VIEW VALIDATION_DATA_COMPLETENESS_MODEL_FACILITIES AS
SELECT
  FAC_ID
  ,LATITUDE
  ,LONGITUDE
  ,('Facility ' || FAC_ID || ' - ' || NVL(FAC_NAME,'')||' - has null or zero lat/long') AS DETAIL
  ,SUBSTR(FAC_ID,1,6) AS LH_PARM_1
  ,LH_FAC_TYPE(FAC_ID) AS LH_PARM_2
  ,NULL AS LH_PARM_3
  ,NULL AS LH_PARM_4
  ,NULL AS LH_PARM_5
FROM MODEL_FACILITIES
WHERE
 ((LATITUDE IS NULL OR LATITUDE=0) OR
 (LONGITUDE IS NULL OR LONGITUDE=0));

-- ************************************** VALIDATION_DATA_COMPLETENESS_MODEL_COLL_PTS_BAD_FAC_ID
CREATE VIEW VALIDATION_DATA_COMPLETENESS_MODEL_COLL_PTS_BAD_FAC_ID AS
SELECT
    CP.OCS_DISPOSAL_CD
    ,CP.DEPOTFACID AS DEPOTFACID
    ,COUNT(*) AS TOTAL_RECORDS
    ,SUM(CP.TONS) AS TOTAL_TONS
    ,'Hauling site ' || CP.DEPOTFACID || ' with OCS_DISPOSAL_CODE ' || NVL(CP.OCS_DISPOSAL_CD, '') ||
        ' maps to ' || NVL(MAX(CP.DISPFACID),'') ||
        ' but that facility is not the facilities list.  It accounts for '|| CAST(TOTAL_RECORDS AS STRING) ||
        ' collection points and ' || CAST(TOTAL_TONS AS STRING)||' Tons' AS DETAIL
	,SUBSTR(CP.DEPOTFACID,1,6) AS LH_PARM_1
    ,'COLLECTION'  AS LH_PARM_2
    ,CP.OCS_DISPOSAL_CD AS LH_PARM_3
    ,NULL AS LH_PARM_4
    ,NULL AS LH_PARM_5  
FROM MODEL_COLLECTION_POINTS CP
LEFT JOIN MODEL_FACILITIES FAC
    on FAC.FAC_ID = CP.DISPFACID
WHERE CP.DISPFACID IS NOT NULL
    and FAC.FAC_ID IS NULL
GROUP BY CP.DEPOTFACID, CP.OCS_DISPOSAL_CD
;

-- ************************************** SUBLOB_TOTAL_ROUTE_DURATION_HRS
CREATE VIEW SUBLOB_TOTAL_ROUTE_DURATION_HRS AS

 SELECT

    HAULING_SITE,

    SUBLOB,

    SUM(TOTAL_ROUTE_DURATION_HRS) AS TOTAL_DURATION_HRS

 FROM TOTAL_ROUTE_DURATION

 GROUP BY HAULING_SITE, SUBLOB;

-- ************************************** PRE_MODEL_FACILITIES_MATERIAL
CREATE VIEW PRE_MODEL_FACILITIES_MATERIAL as

select

    t1.FAC_ID,

    t1.FAC_TYPE,

    t3.WASTE_TYPE,

    t3.ACCEPTED_FLAG,

    t3.UNIT_COST_PER_TON as UNIT_COST,

    t3.UNIT_PRICE_PER_TON as UNIT_PRICE,

    t3.UNIT_REVENUE_PER_TON as UNIT_REVENUE,

    gc.min_tons_governing_scaled as MIN_TONS,

    gc.max_tons_governing_scaled as MAX_TONS

FROM MODEL_FACILITIES t1

LEFT JOIN DISPOSAL_SITE t2 on t1.FAC_ID = T2.FAC_ID

LEFT JOIN WASTE_TYPE_ACCEPTANCE t3 on t1.FAC_ID = T3.FAC_ID

LEFT JOIN MODEL_GOVERNING_CONSTRAINTS gc ON t1.FAC_ID=gc.FAC_ID AND gc.WASTE_TYPE=t3.WASTE_TYPE AND gc.SRC='WASTE_TYPE'

WHERE t1.FAC_TYPE != 'Collection'

AND t3.ACCEPTED_FLAG IS NOT NULL

;

-- ************************************** MODEL_TRANSFER_COSTS
CREATE VIEW MODEL_TRANSFER_COSTS as

select

    MTC.LANE_ORIGIN_FAC_ID,

    MTC.WASTE_TYPE,

    MTC.LANE_DESTINATION_FAC_ID,

    nvl(LONG_HAUL_COST,0) as LONG_HAUL_COST,

    nvl(LOAD_SIZE,1) as LOAD_SIZE,

    UNIT_OF_MEASURE,

    nvl(MIN_TONS,0) as MIN_TONS,

    case when MAX_TONS is null or MAX_TONS = 0 then 99999999 else MAX_TONS end as MAX_TONS,

    SOURCE,

    ADDL_UNIT_COST   ,

    STATUS_IND,

--

-- Distribute the collection points based upon the TMS historicl percentage.

-- Is there collection point data to be distributed for this TS and Waste Type

--   Is there TMS historic tonnage for this TS and Waste Type

--		Redistribute the tonnage across the lanes

--	    if a specific lane has no historical tonnage then set the Baseline Actual Flow to 0 and the max to 0

--      - e.g. 2 out of 3 lane for a given TS and Waste Type have historical Tonnage but the 3rd may not.

--   Else

--		Set Baseline Actual Flow to 0 and Max to 999,999 - i.e. we don't have any historic tonnage on which to build a profile to

--	 End

-- Else

--	 Set Baseline Actual Flow to 0 and Max to 999,999  - i.e. we don't have any historic tonnage on which to build a profile to

-- End

--

--

	CASE WHEN cp.tons IS NOT NULL THEN

			CASE WHEN SUM(pct) OVER (PARTITION BY mtc.lane_origin_fac_id, mtc.waste_type) = 100 THEN

				CASE WHEN pct IS NOT NULL THEN tms_hist.pct/100 * cp.tons

					 ELSE 0

				END

				ELSE 0

			END

		ELSE 0

	END AS BASELINE_ACTUAL_FLOW_TONS,

	CASE WHEN cp.tons IS NOT NULL THEN

			CASE WHEN SUM(pct) OVER (PARTITION BY mtc.lane_origin_fac_id, mtc.waste_type) = 100 THEN

				CASE WHEN pct IS NOT NULL THEN 1.05 * tms_hist.pct/100 * cp.tons

					 ELSE 0

				END

				ELSE 99999999

			END

		ELSE 99999999

	END AS BASELINE_MAX_TONS,

	CP.TONS AS CP_TONS,

	TMS_HIST.PCT AS TMS_HIST_PCT,

	TMS_HIST.TONS AS TMS_TONS

FROM PRE_MODEL_TRANSFER_COSTS MTC

--

-- Aggregate the Collection Point Tonnage by Transfer Station and Waste Type

--

LEFT JOIN

(	SELECT DISPFACID, WASTE_TYPE, SUM(TONS) AS TONS

 	FROM MODEL_COLLECTION_POINTS

 	WHERE DISPFACID LIKE '%_TS'

 	GROUP BY DISPFACID, WASTE_TYPE

) CP  	ON MTC.LANE_ORIGIN_FAC_ID = CP.DISPFACID

		AND MTC.WASTE_TYPE = CP.WASTE_TYPE

--

-- Get the historic TMS profile

--

LEFT JOIN MODEL_TMS_HISTORY TMS_HIST 	ON 	mtc.lane_origin_fac_id = tms_hist.lane_origin_fac_id

										AND	mtc.waste_type = tms_hist.waste_type

										AND mtc.lane_destination_fac_id = tms_hist.lane_destination_fac_id

;

-- ************************************** MODEL_TMS_HISTORY
CREATE VIEW MODEL_TMS_HISTORY AS

SELECT ttwt.lane_origin_fac_Id, ttwt.waste_Type, ttwt.lane_destination_fac_Id, sum(tons) AS tons,

--

-- get this percentage of volume which this lane represents when compared with other

-- lanes with the same waste types from this transfer stations

-- filter against MODEL_COLLECTION_POINTS - so we are only calculating the percentages for available lanes

-- e.g. if we have historical traffic for a given lane but that lane is not active (i.e. not in MODEL_TRANSFER_COSTS

-- then the volume will be distributed across the remaining active lanes

--

	sum(tons) * 100 / sum(sum(tons)) OVER (PARTITION BY ttwt.lane_origin_fac_Id, ttwt.waste_Type) AS PCT

	FROM 	MART.TMS_TONS_WASTE_TYPE TTWT INNER JOIN

			MART.PRE_MODEL_TRANSFER_COSTS MTC

			ON 	mtc.lane_origin_fac_id = ttwt.lane_origin_fac_id

			AND	mtc.waste_type = ttwt.waste_type

			AND mtc.lane_destination_fac_id = ttwt.lane_destination_fac_id

	WHERE transfer_Date BETWEEN current_date-$tms_weeks*7-6 AND current_date-7  -- can take several days for data to arrive

	GROUP BY ttwt.lane_origin_fac_Id, ttwt.waste_Type, ttwt.lane_destination_fac_Id;

-- ************************************** MODEL_DISPOSAL_LOB
CREATE VIEW MODEL_DISPOSAL_LOB as
WITH DISTINCT_SUBLOBS AS
(SELECT DISTINCT SUBLOB FROM MODEL_COLLECTION_POINTS)
SELECT mfac.FAC_ID DISPFACID, mcp.SUBLOB, 0 as ADDL_UNIT_COSTS
from MODEL_FACILITIES mfac cross join DISTINCT_SUBLOBS mcp
WHERE UPPER(mfac.FAC_TYPE)!='COLLECTION'
order by 1, 2;

-- ************************************** VALIDATION_DATA_PRE_MODEL_DEFAULT_CHECKS
CREATE VIEW VALIDATION_DATA_PRE_MODEL_DEFAULT_CHECKS AS
WITH
 NO_LONG_HAUL_COST AS (SELECT LANE_ORIGIN_FAC_ID, LANE_DESTINATION_FAC_ID FROM PRE_MODEL_TRANSFER_COSTS WHERE LONG_HAUL_COST IS NULL)
,NO_LOAD_SIZE      AS (SELECT LANE_ORIGIN_FAC_ID, LANE_DESTINATION_FAC_ID FROM PRE_MODEL_TRANSFER_COSTS WHERE LOAD_SIZE IS NULL)
,NO_UNIT_COST      AS (SELECT FAC_ID, WASTE_TYPE FROM PRE_MODEL_FACILITIES_MATERIAL WHERE UNIT_COST IS NULL)
,NO_UNIT_PRICE     AS (SELECT FAC_ID, WASTE_TYPE FROM PRE_MODEL_FACILITIES_MATERIAL WHERE UNIT_PRICE IS NULL)
--,NO_UNIT_REVENUE   AS (SELECT FAC_ID, WASTE_TYPE FROM PRE_MODEL_FACILITIES_MATERIAL WHERE UNIT_REVENUE IS NULL)
,NO_TURN_TIME      AS (SELECT FAC_ID FROM PRE_MODEL_FACILITIES WHERE TURN_TIME IS NULL)
--,NO_FIXED_COST     AS (SELECT FAC_ID FROM PRE_MODEL_FACILITIES WHERE FIXED_COST IS NULL)

SELECT TABLE_NM
      ,test_NM
      ,CNT
      ,RECORDS_WITH_NULL
      ,TABLE_NM || ' HAS ' || CNT || ' INSTANCES WITH ' || test_NM || ': ' || RECORDS_WITH_NULL AS DETAIL
FROM
(
 SELECT 'PRE_MODEL_TRANSFER_COSTS' AS TABLE_NM
       ,'No long haul cost supplied' AS test_NM
       ,COUNT(*) AS CNT
       ,LISTAGG( '(' || LANE_ORIGIN_FAC_ID || ',' || LANE_DESTINATION_FAC_ID || ')', ', ' ) WITHIN GROUP(ORDER BY LANE_ORIGIN_FAC_ID, LANE_DESTINATION_FAC_ID) AS RECORDS_WITH_NULL
 FROM NO_LONG_HAUL_COST

 UNION ALL

 SELECT 'PRE_MODEL_TRANSFER_COSTS' AS TABLE_NM
       ,'No average load size supplied' AS test_NM
       ,COUNT(*) AS CNT
       ,LISTAGG( '(' || LANE_ORIGIN_FAC_ID || ',' || LANE_DESTINATION_FAC_ID || ')', ', ' ) WITHIN GROUP(ORDER BY LANE_ORIGIN_FAC_ID, LANE_DESTINATION_FAC_ID) AS RECORDS_WITH_NULL
 FROM NO_LOAD_SIZE

 UNION ALL

 SELECT 'PRE_MODEL_FACILITIES_MATERIAL' AS TABLE_NM
       ,'No unit cost per ton supplied' AS test_NM
       ,COUNT(*) AS CNT
       ,LISTAGG( '(' || FAC_ID || ',' || WASTE_TYPE || ')', ', ' ) WITHIN GROUP(ORDER BY FAC_ID, WASTE_TYPE) AS RECORDS_WITH_NULL
 FROM NO_UNIT_COST

 UNION ALL

 SELECT 'PRE_MODEL_FACILITIES_MATERIAL' AS TABLE_NM
       ,'No unit price per ton supplied' AS test_NM
       ,COUNT(*) AS CNT
       ,LISTAGG( '(' || FAC_ID || ',' || WASTE_TYPE || ')', ', ' ) WITHIN GROUP(ORDER BY FAC_ID, WASTE_TYPE) AS RECORDS_WITH_NULL
 FROM NO_UNIT_PRICE

-- UNION ALL

-- SELECT 'PRE_MODEL_FACILITIES_MATERIAL' AS TABLE_NM
--       ,'NULLS IN UNIT_REVENUE' AS test_NM
--       ,COUNT(*) AS CNT
--       ,LISTAGG( '(' || FAC_ID || ',' || WASTE_TYPE || ')', ', ' ) WITHIN GROUP(ORDER BY FAC_ID, WASTE_TYPE) AS RECORDS_WITH_NULL
-- FROM NO_UNIT_REVENUE

 UNION ALL

 SELECT 'PRE_MODEL_FACILITIES' AS TABLE_NM
       ,'No facility turn time supplied' AS test_NM
       ,COUNT(*) AS CNT
       ,LISTAGG( FAC_ID, ', ' ) WITHIN GROUP(ORDER BY FAC_ID) AS RECORDS_WITH_NULL
 FROM NO_TURN_TIME

-- UNION ALL

-- SELECT 'PRE_MODEL_FACILITIES' AS TABLE_NM
--       ,'NULLS IN FIXED_COST' AS test_NM
--       ,COUNT(*) AS CNT
--       ,LISTAGG( FAC_ID, ', ' ) WITHIN GROUP(ORDER BY FAC_ID) AS RECORDS_WITH_NULL
-- FROM NO_FIXED_COST
)
WHERE CNT > 0
ORDER BY TABLE_NM, test_NM
;

-- ************************************** SUB_LOB_HRS_JOINED
CREATE VIEW SUB_LOB_HRS_JOINED AS

SELECT

    r.HAULING_SITE

    ,r.SUBLOB

    ,cmr.SUBLOB AS CLEAN_SUBLOB

    ,r.TOTAL_DURATION_HRS

    ,COALESCE(sdr.STEM_DISPOSAL_RETURN_HRS,0) AS STEM_DISPOSAL_RETURN_HRS

    ,(r.TOTAL_DURATION_HRS - COALESCE(sdr.STEM_DISPOSAL_RETURN_HRS,0)) AS TOTAL_COLLECTION_HRS

FROM SUBLOB_TOTAL_ROUTE_DURATION_HRS r

LEFT JOIN SUBLOB_STEM_DISPOSAL_RETURN_HRS sdr

    ON r.HAULING_SITE=sdr.HAULING_SITE AND r.SUBLOB=sdr.SUBLOB

LEFT JOIN COMRES_WASTETYPE_MAPPING cmr ON r.SUBLOB=cmr.SUBLOB;

-- ************************************** ROUTE_STEM_DISPOSAL_RETURN_HRS
CREATE VIEW ROUTE_STEM_DISPOSAL_RETURN_HRS AS

SELECT

    HAULING_SITE

    ,RO_KEY

    ,SUBLOB

    ,EVENT_TYPE

    ,EVENT_START

    ,EVENT_END

    ,COALESCE(TRAVEL_TIME_TO_HRS,0) TRAVEL_TIME_TO_HRS_CLEAN

    ,COALESCE(TRAVEL_TIME_FROM_HRS,0) AS TRAVEL_TIME_FROM_HRS_CLEAN

    ,COALESCE(EVENT_HRS,0) AS TRAVEL_TIME_EVENT_CLEAN

    ,CASE  -- a lot of routes are missing customer events. Without special handling, this causes

    -- double counting of travel time. Note that a lot of these cases have been superceded by

    -- collection time imputation in SUBLOB_STEM_DISPOSAL_RETURN_HRS

      WHEN PREVIOUS_EVENT_TYPE = 'CUSTOMER'

        THEN TRAVEL_TIME_TO_HRS_CLEAN + TRAVEL_TIME_EVENT_CLEAN + TRAVEL_TIME_FROM_HRS_CLEAN

      WHEN EVENT_TYPE IN ('Arrive Yard', 'landfill') AND PREVIOUS_EVENT_TYPE = 'Leave Yard'

        THEN TRAVEL_TIME_TO_HRS_CLEAN * 0.3 + TRAVEL_TIME_EVENT_CLEAN

      ELSE TRAVEL_TIME_EVENT_CLEAN + TRAVEL_TIME_FROM_HRS_CLEAN

    END AS TOTAL_HRS -- Avoid double-counting travel-time when no customers registered

    ,SERVICE_DT

FROM CO_EVENT_TIME_INCREMENT

WHERE UPPER(EVENT_TYPE) IN ('LEAVE YARD','LANDFILL','ARRIVE YARD') AND SUBLOB IS NOT NULL

AND HAULING_SITE IN (SELECT DISTINCT REPLACE(FAC_ID,'_Depot') FROM MODEL_DEPOT_LOB);

-- ************************************** MODEL_FACILITIES_MATERIAL
CREATE VIEW MODEL_FACILITIES_MATERIAL AS

WITH PRE_MODEL_ACTIVE_FACILITY_MATERIALS AS

--

--	Only interested in doing these calculations for Waste Types associated with active facilities

--	where acceptance is 'Y' or 'U' (unknown).  We ignore values where waste type is not accepted

--

(

SELECT

    mat.FAC_ID,

    mat.FAC_TYPE,

    mat.WASTE_TYPE,

    mat.ACCEPTED_FLAG,

    mat.UNIT_PRICE,

    disp.LATITUDE,

    disp.LONGITUDE

FROM PRE_MODEL_FACILITIES_MATERIAL mat

LEFT JOIN DISPOSAL_SITE disp

    ON mat.FAC_ID = disp.FAC_ID

WHERE

    disp.ACTIVE_FLAG = 'A'

    AND mat.ACCEPTED_FLAG IN ('Y','U')),

--

--	Define outliers.  We take inter-quartile range and identify:-

--  - lower limit as 25% quartile minus 1.5 * Interquartile range - can be negative if there is a wide variety of data

--  - upper limit is 75& quartile + 1.5 * Interquartile range

--

PRE_MODEL_FACILITY_MATERIAL_OUTLIER_LIMITS AS

(

SELECT

    FAC_TYPE,

    WASTE_TYPE,

    PERCENTILE_DISC(.25) WITHIN GROUP (ORDER BY UNIT_PRICE ASC) AS QUARTILE_1,

    PERCENTILE_DISC(.75) WITHIN GROUP (ORDER BY UNIT_PRICE ASC) AS QUARTILE_3,

    QUARTILE_3 - QUARTILE_1 AS IQR,

    QUARTILE_1 - 1.5 * IQR AS LOWER_LIMIT,

    QUARTILE_3 + 1.5 * IQR AS UPPER_LIMIT

FROM PRE_MODEL_ACTIVE_FACILITY_MATERIALS

GROUP BY

    FAC_TYPE,

    WASTE_TYPE

ORDER BY

    FAC_TYPE,

    WASTE_TYPE

),

PRE_MODEL_FACILITY_MATERIALS_FULL_COMPS AS

--

--	Compare each facility with every other in the scope on FAC_TYPE and WASTE_TYPE and rank them by distance

--  Filter out the outliers based on PRE_MODE_FACILITY_MATERIAL_OUTLIER_LIMITS

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    comp.UNIT_PRICE AS COMP_UNIT_PRICE,

    fac.LATITUDE AS FAC_LATITUDE,

    fac.LONGITUDE AS FAC_LONGITUDE,

    comp.LATITUDE AS COMP_LATITUDE,

    comp.LONGITUDE AS COMP_LONGITUDE,

    0.6213712 * HAVERSINE(FAC_LATITUDE, FAC_LONGITUDE, COMP_LATITUDE, COMP_LONGITUDE) AS DISTANCE_MILES,

    RANK () OVER(PARTITION BY fac.FAC_ID, fac.WASTE_TYPE ORDER BY DISTANCE_MILES ASC) AS RANK

FROM PRE_MODEL_ACTIVE_FACILITY_MATERIALS fac

JOIN PRE_MODEL_ACTIVE_FACILITY_MATERIALS comp

    ON fac.FAC_TYPE = comp.FAC_TYPE

    AND fac.WASTE_TYPE = comp.WASTE_TYPE

    AND fac.FAC_ID <> comp.FAC_ID

JOIN PRE_MODEL_FACILITY_MATERIAL_OUTLIER_LIMITS lim

    ON fac.FAC_TYPE = lim.FAC_TYPE

    AND fac.WASTE_TYPE = lim.WASTE_TYPE

WHERE

    comp.UNIT_PRICE IS NOT NULL

    AND comp.UNIT_PRICE BETWEEN lim.LOWER_LIMIT AND lim.UPPER_LIMIT

),

PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_COMPS AS

--

--	Compare each facility with every other on the scope on WASTE_TYPE ONLY and rank them by distance

--  Filter out the outliers based on PRE_MODE_FACILITY_MATERIAL_OUTLIER_LIMITS

--  Note that this view is a superset of PRE_MODEL_FACILITY_MATERIALS_FULL_COMPS but pulls in

--  facilities based on a Waste Type match only.

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    comp.UNIT_PRICE AS COMP_UNIT_PRICE,

    fac.LATITUDE AS FAC_LATITUDE,

    fac.LONGITUDE AS FAC_LONGITUDE,

    comp.LATITUDE AS COMP_LATITUDE,

    comp.LONGITUDE AS COMP_LONGITUDE,

    0.6213712 * HAVERSINE(FAC_LATITUDE, FAC_LONGITUDE, COMP_LATITUDE, COMP_LONGITUDE) AS DISTANCE_MILES,

    RANK () OVER(PARTITION BY fac.FAC_ID, fac.WASTE_TYPE ORDER BY DISTANCE_MILES ASC) AS RANK

FROM PRE_MODEL_ACTIVE_FACILITY_MATERIALS fac

JOIN PRE_MODEL_ACTIVE_FACILITY_MATERIALS comp

    ON fac.WASTE_TYPE = comp.WASTE_TYPE

    AND fac.FAC_ID <> comp.FAC_ID

JOIN PRE_MODEL_FACILITY_MATERIAL_OUTLIER_LIMITS lim

    ON fac.FAC_TYPE = lim.FAC_TYPE

    AND fac.WASTE_TYPE = lim.WASTE_TYPE

WHERE

    comp.UNIT_PRICE IS NOT NULL

    AND comp.UNIT_PRICE BETWEEN lim.LOWER_LIMIT AND lim.UPPER_LIMIT),

PRE_MODEL_FACILITY_MATERIALS_FULL_ESTIMATES AS

--

--	Get the average of the closest 5 facilities - assuming there are 3 or more

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    AVG(COMP_UNIT_PRICE) AS EST_UNIT_PRICE

FROM PRE_MODEL_FACILITY_MATERIALS_FULL_COMPS fac

WHERE RANK <= 5

GROUP BY

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE

HAVING COUNT(*) >= 3),

PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_ESTIMATES AS

--

--	Get the average of the closes 5 facilities - assuming there are 1 or more

--  This is for the less desirable join on WASTE_TYPE only

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    AVG(COMP_UNIT_PRICE) AS EST_UNIT_PRICE

FROM PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_COMPS fac

WHERE RANK <= 5

GROUP BY

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE

HAVING COUNT(*) >= 1)

--

-- Apply the UNIT_PRICE defaults in the following order:-

-- (1) Join on FAC_TYPE and WASTE_TYPE 	- PRE_MODEL_FACILITY_MATERIALS_FULL_ESTIMATES

-- (2) Join on WASTE_TYPE only			- PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_ESTIMATES

-- (3) $60 for any 3P facility

--

select  fac.FAC_ID,

        fac.WASTE_TYPE,

        fac.ACCEPTED_FLAG,

        nvl(UNIT_COST,CASE WHEN UPPER(fac.FAC_TYPE)='TS' THEN 2 ELSE 20 END) as UNIT_COST , --$2/ton for TS, $20/ton for any other facility

        COALESCE(UNIT_PRICE,fll.EST_UNIT_PRICE,wt.EST_UNIT_PRICE,60) as UNIT_PRICE , --$60/ton for any 3P facility

        nvl(UNIT_REVENUE,0) as UNIT_REVENUE ,

        nvl(MIN_TONS,0) as MIN_TONS,

        case when MAX_TONS is null or MAX_TONS = 0 then 999999 else MAX_TONS end as MAX_TONS

from PRE_MODEL_FACILITIES_MATERIAL fac

LEFT JOIN PRE_MODEL_FACILITY_MATERIALS_FULL_ESTIMATES fll

    ON fac.FAC_ID = fll.FAC_ID

    AND fac.WASTE_TYPE = fll.WASTE_TYPE

LEFT JOIN PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_ESTIMATES wt

    ON fac.FAC_ID = wt.FAC_ID

    AND fac.WASTE_TYPE = wt.WASTE_TYPE;

-- ************************************** VALIDATION_DATA_TRANSFER_LANE_DESTINATION_MATERIAL_ACCEPTANCE
CREATE VIEW VALIDATION_DATA_TRANSFER_LANE_DESTINATION_MATERIAL_ACCEPTANCE AS
--
-- 		ensure that, for the waste types that any (WM or 3P-owned) transfer station accepts,
--		its active lanes terminate at a landfill destination that ALSO accepts the waste type
--		irrespective of the active status of the destination landfill (warning)
--		Get all the active transfer lanes associated with all the transfer stations / waste type accepted combos
--		look for cases where the destination facility does not accept that waste type.
--
SELECT A.FAC_ID
	 ,C.WASTE_TYPE
   ,'Transfer Station ' || A.FAC_ID || ' has Active Lane for ' || C.WASTE_TYPE|| ' to ' || B.LANE_DESTINATION_FAC_ID || ' which does not accept ' || C.WASTE_TYPE AS DETAIL
   ,SUBSTR(A.FAC_ID,1,6) AS LH_PARM_1
	,LH_FAC_TYPE(A.FAC_ID)  AS LH_PARM_2
	,C.WASTE_TYPE AS LH_PARM_3
	,SUBSTR(B.LANE_DESTINATION_FAC_ID,1,6) AS LH_PARM_4
	,LH_FAC_TYPE(B.LANE_DESTINATION_FAC_ID)  AS LH_PARM_5
FROM MODEL_FACILITIES A
JOIN MODEL_FACILITIES_MATERIAL C ON A.FAC_ID = C.FAC_ID AND C.ACCEPTED_FLAG in ('Y', 'U')		-- Only if acceptance is Y or U
JOIN MODEL_TRANSFER_COSTS B  ON A.FAC_ID = B.LANE_ORIGIN_FAC_ID AND C.WASTE_TYPE = B.WASTE_TYPE AND B.STATUS_IND = 'A'					-- currently always 'A'
LEFT JOIN MODEL_FACILITIES_MATERIAL D ON B.LANE_DESTINATION_FAC_ID = D.FAC_ID AND B.WASTE_TYPE = D.WASTE_TYPE AND D.ACCEPTED_FLAG in ('Y', 'U')
WHERE A.FAC_TYPE = 'TS'				    -- only interested in Transfer Lanes
AND D.FAC_ID IS NULL
;

-- ************************************** VALIDATION_DATA_PRE_MODEL_NO_UNIT_PRICE
CREATE VIEW VALIDATION_DATA_PRE_MODEL_NO_UNIT_PRICE AS
SELECT
    FM.FAC_ID, FM.WASTE_TYPE AS WASTE_TYPE, TOTAL_TONS,
     'Unit price per ton not supplied for Facility '||FM.FAC_ID||' and waste type '||FM.WASTE_TYPE||'. A substitute price of $'||round(MFM.UNIT_PRICE,2)||' was applied.'||
     CASE WHEN TOTAL_RECORDS IS NULL THEN ' Facility and waste type have no collection points  ' ELSE
        ' Facility and waste type accounts for '||TOTAL_RECORDS ||' Collection Points and '||TOTAL_TONS||' Tons' END AS DETAIL
	,SUBSTR(FM.FAC_ID,1,6) AS LH_PARM_1
	,LH_FAC_TYPE(FM.FAC_ID) AS LH_PARM_2
    ,FM.WASTE_TYPE AS LH_PARM_3
	,NULL AS LH_PARM_4
	,NULL AS LH_PARM_5
FROM PRE_MODEL_FACILITIES_MATERIAL FM
LEFT JOIN
  (SELECT MCP.DISPFACID AS DISPFACID ,
          WASTE_TYPE ,
          COUNT(*) AS TOTAL_RECORDS ,
          SUM(TONS) AS TOTAL_TONS
   FROM MODEL_COLLECTION_POINTS MCP
   GROUP BY DISPFACID ,
            WASTE_TYPE) MP ON FM.FAC_ID = MP.DISPFACID
AND FM.WASTE_TYPE=MP.WASTE_TYPE
INNER JOIN MODEL_FACILITIES MF ON FM.FAC_ID=MF.FAC_ID AND MF.WM_OWNED_FLAG ='N'
INNER JOIN MODEL_FACILITIES_MATERIAL MFM ON MFM.FAC_ID = FM.FAC_ID AND MFM.WASTE_TYPE = FM.WASTE_TYPE
WHERE FM.UNIT_PRICE IS NULL
;

-- ************************************** VALIDATION_DATA_PRE_MODEL_NO_UNIT_COST
CREATE VIEW VALIDATION_DATA_PRE_MODEL_NO_UNIT_COST AS
 SELECT
     FM.FAC_ID, FM.WASTE_TYPE AS WASTE_TYPE, TOTAL_TONS,
     'Unit cost per ton not supplied for Facility '||FM.FAC_ID||' and waste type '||FM.WASTE_TYPE||'. A substitute cost of $'||round(MFM.UNIT_COST,2)||' was applied.'||
     CASE WHEN TOTAL_RECORDS IS NULL THEN ' Facility and waste type have no collection points  ' ELSE
        ' Facility and waste type accounts for '||TOTAL_RECORDS ||' Collection Points and '||TOTAL_TONS||' Tons' END AS DETAIL
	 ,SUBSTR(FM.FAC_ID,1,6) AS LH_PARM_1
	  ,LH_FAC_TYPE(FM.FAC_ID) AS LH_PARM_2
      ,FM.WASTE_TYPE AS LH_PARM_3
	  ,NULL AS LH_PARM_4
	  ,NULL AS LH_PARM_5
 FROM PRE_MODEL_FACILITIES_MATERIAL FM
LEFT JOIN (
  SELECT MCP.DISPFACID as DISPFACID
    , WASTE_TYPE
    ,COUNT(*) AS TOTAL_RECORDS
    ,SUM(TONS) AS TOTAL_TONS
  FROM MODEL_COLLECTION_POINTS MCP
  GROUP BY DISPFACID
    , WASTE_TYPE
) MP ON FM.FAC_ID = MP.DISPFACID and FM.WASTE_TYPE=MP.WASTE_TYPE
INNER JOIN MODEL_FACILITIES MF ON MF.FAC_ID=FM.FAC_ID and MF.WM_OWNED_FLAG ='Y'
INNER JOIN MODEL_FACILITIES_MATERIAL MFM ON MFM.FAC_ID = FM.FAC_ID AND MFM.WASTE_TYPE = FM.WASTE_TYPE
WHERE FM.UNIT_COST IS NULL
;

-- ************************************** VALIDATION_DATA_ORIGIN_TRANSFER_LANE_MATERIAL_ACCEPTANCE
CREATE VIEW VALIDATION_DATA_ORIGIN_TRANSFER_LANE_MATERIAL_ACCEPTANCE AS
--
--  To ensure that every WM transfer station has at least one active lane for the waste types that it accepts (showstopper).
--  Get waste types associated with source transfer stations
--  and verify at least 1 active lane exists for this waste type
--
SELECT A.FAC_ID
   ,('WM-owned transfer station ' || A.FAC_ID || ' has no active outbound transfer lane for waste type ' ||C.WASTE_TYPE) AS DETAIL
   ,SUBSTR(A.FAC_ID,1,6) AS LH_PARM_1
   ,LH_FAC_TYPE(A.FAC_ID)  AS LH_PARM_2
   ,C.WASTE_TYPE AS LH_PARM_3
   ,NULL AS LH_PARM_4
   ,NULL AS LH_PARM_5
FROM MODEL_FACILITIES A
JOIN MODEL_FACILITIES_MATERIAL C ON A.FAC_ID = C.FAC_ID AND C.ACCEPTED_FLAG in ('Y', 'U')		-- Only if acceptance is Y or U
WHERE NOT EXISTS
(	SELECT 1 FROM MODEL_TRANSFER_COSTS B
	WHERE C.FAC_ID = B.LANE_ORIGIN_FAC_ID
    AND C.WASTE_TYPE = B.WASTE_TYPE
    AND B.STATUS_IND = 'A'					-- currently always 'A'
)
AND A.WM_OWNED_FLAG = 'Y'				    -- only interested in WM owned.
AND A.FAC_TYPE = 'TS'				        -- only interested in Transfer Lanes
;

-- ************************************** VALIDATION_DATA_CHECK_FAC_MAT_UNKNOWN_WASTE_TYPE
CREATE VIEW VALIDATION_DATA_CHECK_FAC_MAT_UNKNOWN_WASTE_TYPE AS
SELECT CP.DISPFACID AS DISPOSAL_FACILITY_ID
      ,CP.WASTE_TYPE,
	CP.TOTAL_TONNAGE AS TOTAL_TONS,
      'Facility '||CP.DISPFACID|| ' with waste type '||CP.WASTE_TYPE||' has Unknown acceptance but has accepted historic tonnage of ' || round(CAST(CP.TOTAL_TONNAGE AS STRING),2) ||
         ' tons and has '||CAST(CP.NUMBER_OF_RECORDS AS STRING)|| ' collection points '
         AS DETAIL
	,SUBSTR(CP.DISPFACID,1,6) AS LH_PARM_1
	,LH_FAC_TYPE(CP.DISPFACID)  AS LH_PARM_2
	,CP.WASTE_TYPE AS LH_PARM_3
	,NULL AS LH_PARM_4
	,NULL AS LH_PARM_5
FROM VALIDATION_DATA_COLLECTION_POINT_SUMMARY CP
INNER JOIN MODEL_FACILITIES_MATERIAL FM ON FM.FAC_ID=CP.DISPFACID AND FM.WASTE_TYPE = CP.WASTE_TYPE
WHERE UPPER(FM.ACCEPTED_FLAG) = 'U'
;

-- ************************************** VALIDATION_DATA_CHECK_EMPTY_WASTE_TYPE_ACCEPTANCE
CREATE VIEW VALIDATION_DATA_CHECK_EMPTY_WASTE_TYPE_ACCEPTANCE AS
SELECT
  CP.DISPFACID AS DISPOSAL_FACILITY_ID
  ,CP.WASTE_TYPE
  ,CASE WHEN FM.FAC_ID IS NULL
        THEN ('No waste type acceptance data found for ' || CP.DISPFACID ||
            ' and Waste Type ' || CP.WASTE_TYPE)
  END AS DETAIL
  ,SUBSTR(CP.DISPFACID,1,6) AS LH_PARM_1
  ,CP.WASTE_TYPE  AS LH_PARM_2
  ,NULL AS LH_PARM_3
  ,NULL AS LH_PARM_4
  ,NULL AS LH_PARM_5
FROM VALIDATION_DATA_COLLECTION_POINT_SUMMARY CP
LEFT JOIN MODEL_FACILITIES_MATERIAL FM
ON FM.FAC_ID = CP.DISPFACID
    AND FM.WASTE_TYPE = CP.WASTE_TYPE
WHERE CP.DISPFACID IS NOT NULL
    AND FM.FAC_ID IS NULL
    AND CP.TOTAL_TONNAGE > 0
;

-- ************************************** VALIDATION_DATA_CHECK_DISPOSAL_WASTE_TYPE_LEGALITY
CREATE VIEW VALIDATION_DATA_CHECK_DISPOSAL_WASTE_TYPE_LEGALITY AS
SELECT CP.DISPFACID AS DISPOSAL_FACILITY_ID
      ,CP.WASTE_TYPE,CP.TOTAL_TONNAGE AS TOTAL_TONS,
      'Facility '||CP.DISPFACID|| ' does not accept waste type '||CP.WASTE_TYPE||' but has accepted historic tonnage of ' || round(CAST(CP.TOTAL_TONNAGE AS STRING),2) ||
         ' tons and has '||CAST(CP.NUMBER_OF_RECORDS AS STRING)|| ' collection points for this waste type'
         AS DETAIL
	,SUBSTR(CP.DISPFACID,1,6) AS LH_PARM_1
	,LH_FAC_TYPE(CP.DISPFACID)  AS LH_PARM_2
	,CP.WASTE_TYPE AS LH_PARM_3
	,NULL AS LH_PARM_4
	,NULL AS LH_PARM_5
FROM VALIDATION_DATA_COLLECTION_POINT_SUMMARY CP
INNER JOIN MODEL_FACILITIES_MATERIAL FM ON FM.FAC_ID=CP.DISPFACID AND FM.WASTE_TYPE = CP.WASTE_TYPE
WHERE UPPER(FM.ACCEPTED_FLAG) = 'N'
;

-- ************************************** SUBLOB_STEM_DISPOSAL_RETURN_HRS
CREATE VIEW SUBLOB_STEM_DISPOSAL_RETURN_HRS AS

WITH good_routes AS (  -- those routes with enough consumer data

SELECT  -- can use directly aggregated STEM_DISPOSAL_RETURN_HRS

    rsdrh.HAULING_SITE

    ,rsdrh.SUBLOB

    ,SUM(TOTAL_HRS) AS RAW_STEM_DISPOSAL_RETURN_HRS,

    CASE WHEN RAW_STEM_DISPOSAL_RETURN_HRS < 0 THEN 0

    ELSE RAW_STEM_DISPOSAL_RETURN_HRS

    END AS STEM_DISPOSAL_RETURN_HRS

FROM ROUTE_STEM_DISPOSAL_RETURN_HRS rsdrh

    INNER JOIN good_routes_for_timing grft

        ON rsdrh.ro_key = grft.ro_key

        AND rsdrh.sublob = grft.sublob

        AND rsdrh.HAULING_SITE = grft.HAULING_SITE

        AND rsdrh.service_dt = grft.service_dt

WHERE rsdrh.service_dt BETWEEN $start_date AND $end_date

GROUP BY rsdrh.HAULING_SITE, rsdrh.SUBLOB

),

bad_routes AS (

SELECT  -- bad routes adjust total_hrs (defined as the latest event_end - the earliest event_start

    brft.HAULING_SITE  -- by pre-calculated % time taken using averages on good routes per sublob

    , brft.sublob

    , COALESCE(mgrdr.avg_pct_stem, 0.3) * COALESCE(SUM(trd.TOTAL_ROUTE_DURATION_HRS), 10) AS stem_disposal_return_hrs

FROM TOTAL_ROUTE_DURATION trd  -- NB. event_start filter already happened in TOTAL_ROUTE_DURATION

    RIGHT JOIN bad_routes_for_timing brft

        ON trd.ro_key = brft.ro_key

        AND trd.sublob = brft.sublob

        AND trd.HAULING_SITE = brft.HAULING_SITE

    INNER JOIN mean_good_route_disp_return mgrdr

        ON mgrdr.sublob = brft.sublob

GROUP BY brft.HAULING_SITE, brft.SUBLOB, mgrdr.avg_pct_stem

)

SELECT  -- add imputed bad rt hours to calculated good rt hours

    HAULING_SITE

    , sublob

    , SUM(stem_disposal_return_hrs) AS stem_disposal_return_hrs

FROM (

    SELECT HAULING_SITE, sublob, stem_disposal_return_hrs FROM good_routes

    UNION ALL

    SELECT * FROM bad_routes

) tbl

GROUP BY HAULING_SITE, sublob;

-- ************************************** SUBLOB_DISPOSAL_HRS
CREATE VIEW SUBLOB_DISPOSAL_HRS AS
SELECT
    HAULING_SITE
    ,SUBLOB
    ,SUM(TOTAL_HRS) AS RAW_STEM_DISPOSAL_RETURN_HRS,
    CASE WHEN RAW_STEM_DISPOSAL_RETURN_HRS < 0 THEN 0
    ELSE RAW_STEM_DISPOSAL_RETURN_HRS
    END AS STEM_DISPOSAL_RETURN_HRS
FROM ROUTE_STEM_DISPOSAL_RETURN_HRS
WHERE EVENT_START >= $start_date AND EVENT_END <= $end_date
GROUP BY HAULING_SITE, SUBLOB;

-- ************************************** SUB_LOB_MAPPED
CREATE VIEW SUB_LOB_MAPPED AS
SELECT
    s.HAULING_SITE
    ,s.SUBLOB AS SUBLOBDESC
    ,s.TOTAL_DURATION_HRS
    ,s.STEM_DISPOSAL_RETURN_HRS
    ,s.TOTAL_COLLECTION_HRS
    ,COALESCE(c.SUBLOB,'RO') AS SUBLOB
 FROM SUB_LOB_HRS_JOINED s
 LEFT JOIN COMRES_WASTETYPE_MAPPING c ON s.SUBLOB=c.SUBLOB_DESCRIPTION;

-- ************************************** ROUTE_DISPOSAL_HRS
CREATE VIEW ROUTE_DISPOSAL_HRS AS
SELECT
    HAULING_SITE
    ,SUBLOB
    ,SUM(TOTAL_HRS) AS RAW_STEM_DISPOSAL_RETURN_HRS,
    CASE WHEN RAW_STEM_DISPOSAL_RETURN_HRS < 0 THEN 0
    ELSE RAW_STEM_DISPOSAL_RETURN_HRS
    END AS STEM_DISPOSAL_RETURN_HRS
FROM ROUTE_STEM_DISPOSAL_RETURN_HRS
GROUP BY HAULING_SITE, SUBLOB;

-- ************************************** model_hrs_cap
CREATE VIEW model_hrs_cap AS

 SELECT

     ROW_NUMBER() OVER (ORDER BY mdl.fac_id) AS hrs_cap_id

     ,1 AS case_id

     ,mdl.fac_id

     ,mdl.SUBLOB

     ,0 AS MIN_HRS

     ,(

         hs.TRUCK_CNT * NVL(hs.HOURS_PER_TRUCK, 10) --WEEKDAYS

         * COUNTDAYS($start_date, $end_date, 0)

       + hs.TRUCK_CNT * NVL(hs.HOURS_PER_TRUCK, 10) --SATURDAYS

         * COUNTDAYS($start_date, $end_date, 1)

         * NVL(hs.PERCENTAGE_HOURS_ON_SAT, 0.5)

      ) AS TRUCK_CAPACITY  -- Truck capacity is backing out average hours per truck to total hours

     ,c.TOTAL_COLLECTION_HRS

     ,COALESCE(TRUCK_CAPACITY - COALESCE(c.TOTAL_COLLECTION_HRS,0), 9999999) AS MAX_HRS

 FROM MODEL_DEPOT_LOB mdl

 LEFT JOIN HAULING_SITE_CAPACITY hs

     ON REPLACE(mdl.FAC_ID,'_Depot') = hs.FAC_ID AND mdl.SUBLOB=hs.SUBLOB

 LEFT JOIN SUB_LOB_HRS_JOINED c ON REPLACE(mdl.FAC_ID,'_Depot') =c.HAULING_SITE AND mdl.SUBLOB = c.SUBLOB

 WHERE UPPER(mdl.FAC_ID)!='3PDEPOT';

-- ************************************** MODEL_FLOW_CONTROL_SPECIAL_RATE
CREATE VIEW MODEL_FLOW_CONTROL_SPECIAL_RATE AS



-- STEP 1:  SELECT ONLY SPECIAL RATE FLOW CONTROL RULES

WITH SPECIAL_RATE_RULES AS

(SELECT MFC.*

       ,FC.DEST_COUNTY_NM

       ,FC.DEST_CITY_NM

       ,FC.DEST_STATE_CD

       ,FC.DEST_DISPOSAL_SITE_ID

       ,TRIM(GET(SPLIT(FC.RULE_TYPE,'-'),1)) AS RULE_DEST

 FROM MODEL_FLOW_CONTROL_RULES MFC

 INNER JOIN FLOW_CONTROL FC ON MFC.MIN_FC_PKEY = FC.PKEY AND ACTIVE_FLAG = 'A'

 WHERE MFC.METHOD_TYPE = 5), --Special rate only rules



-- STEP 2:  DIVIDE UP SPECIAL RATE RULES BY RULE_SOURCE (State, County, City, Site, Customer)

-- GET all state-level rules for special rate

SOURCE_STATE_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_SOURCE='State'),



-- GET all county-level rules for special rate

SOURCE_COUNTY_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_SOURCE='County'),



-- GET all city-level rules for special rate

SOURCE_CITY_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_SOURCE='City'),



-- GET all site-level rules for special rate

SOURCE_HAULING_SITE_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_SOURCE='Hauling Site'),



-- GET all hauling site - OCS level rules for special rate

SOURCE_OCS_DISPOSAL_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_SOURCE='OCS Code'),





--Create the table for all [x level]-sourced flow controls and associated collection points

FC_SPECIAL_RATE_COLLECTION AS

(

 SELECT fc.FC_RULE_NUMBER

       ,cp.ROWNUMBER

 FROM SOURCE_STATE_FLOW_CONTROL fc

 INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.GEO_STATE_CD)=UPPER(fc.COLLECTION_ENTITY)

WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or

      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR

      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR

      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))



 UNION



 SELECT fc.FC_RULE_NUMBER

       ,cp.ROWNUMBER

 FROM SOURCE_COUNTY_FLOW_CONTROL fc

 INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.GEO_STATE_CD||'-'||cp.GEO_COUNTY_NM)=UPPER(fc.COLLECTION_ENTITY)

WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or

      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR

      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR

      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))



 UNION



 SELECT fc.FC_RULE_NUMBER

       ,cp.ROWNUMBER

 FROM SOURCE_CITY_FLOW_CONTROL fc

 INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(CP.GEO_STATE_CD||'-'||cp.GEO_CITY_NM)=UPPER(fc.COLLECTION_ENTITY)

WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or

      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR

      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR

      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))



 UNION



 SELECT fc.FC_RULE_NUMBER

       ,cp.ROWNUMBER

 FROM SOURCE_HAULING_SITE_FLOW_CONTROL fc

 INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.DEPOTFACID)=UPPER(fc.COLLECTION_ENTITY||'_DEPOT')

WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or

      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR

      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR

      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))



 UNION

 --

 -- Again we are joining on the Depot and the OCS Codes - CONTAINS handles the case where we have multiple - e.g ABC, DEF

 SELECT fc.FC_RULE_NUMBER

       ,cp.ROWNUMBER

 FROM SOURCE_OCS_DISPOSAL_FLOW_CONTROL fc

 INNER JOIN MODEL_COLLECTION_POINTS cp ON UPPER(cp.DEPOTFACID)=UPPER(GET(SPLIT(fc.COLLECTION_ENTITY,'-'),0)||'_DEPOT') AND

  										  CONTAINS( UPPER(CP.OCS_DISPOSAL_CD) , UPPER(GET(SPLIT(fc.COLLECTION_ENTITY,'-'),1) ))

WHERE ((fc.LOB=cp.LOB and fc.WASTE_TYPE=cp.WASTE_TYPE) or

      (UPPER(fc.LOB)='ALL LOBS' AND fc.WASTE_TYPE=cp.WASTE_TYPE) OR

      (fc.LOB=cp.LOB and UPPER(fc.WASTE_TYPE)='ALL') OR

      (UPPER(fc.LOB)='ALL LOBS' AND UPPER(fc.WASTE_TYPE)='ALL'))

),



-- STEP 4:  DIVIDE UP SPECIAL RATE RULES BY DESTINATION SOURCE-TYPE

--STATE-specific flow controls

DEST_STATE_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_DEST = 'State'

), -- i.e., where state but no other destinations have been specified



--COUNTY-specific flow controls

DEST_COUNTY_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_DEST = 'County'),



--CITY-specific flow controls

DEST_CITY_FLOW_CONTROL AS

(SELECT *

 FROM SPECIAL_RATE_RULES

 WHERE RULE_DEST = 'City'),



--SITE-specific flow controls

DEST_SITE_FLOW_CONTROL AS

(SELECT SRR.*

 FROM SPECIAL_RATE_RULES SRR

 WHERE RULE_DEST = 'Disposal Site'),

-- INNER JOIN DISPOSAL_SITE DS ON DS.FAC_ID = SRR.DEST_DISPOSAL_SITE_ID),



-- STEP 5: GET ALL DISPOSAL SITES BY FLOW CONTROL RULE

 MODEL_DISPOSAL_FACILITIES_MAT_GEO AS

 (

 SELECT

 fac.FAC_ID,

 facm.WASTE_TYPE,

 fac.GEO_CITY_NM,

 fac.GEO_COUNTY_NM,

 fac.GEO_STATE_CD,

 fac.WM_OWNED_FLAG

 FROM MODEL_FACILITIES_MATERIAL facm

 LEFT join MODEL_FACILITIES fac ON fac.FAC_ID = facm.FAC_ID

 WHERE facm.ACCEPTED_FLAG in ('Y','U')

 ),

--Disposal sites by Flow control ID for special rates

FC_SPECIAL_RATE_DISPOSAL_SITES AS

(

 SELECT FC.FC_RULE_NUMBER,

        FAC.FAC_ID,

        FAC.WM_OWNED_FLAG

 FROM DEST_STATE_FLOW_CONTROL FC

 INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON UPPER(fac.GEO_STATE_CD)=UPPER(fc.DEST_STATE_CD)

 WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')





 UNION



SELECT

    FC.FC_RULE_NUMBER,

        FAC.FAC_ID,

        FAC.WM_OWNED_FLAG

FROM DEST_COUNTY_FLOW_CONTROL fc

INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON UPPER(FAC.GEO_STATE_CD||'-'||FAC.GEO_COUNTY_NM) = UPPER(FC.DEST_STATE_CD||'-'||FC.DEST_COUNTY_NM)

WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')



 UNION



SELECT

    FC.FC_RULE_NUMBER,

        FAC.FAC_ID,

        FAC.WM_OWNED_FLAG

FROM DEST_CITY_FLOW_CONTROL fc

INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON UPPER(FAC.GEO_STATE_CD||'-'||FAC.GEO_CITY_NM) = UPPER(FC.DEST_STATE_CD||'-'||FC.DEST_CITY_NM)

WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')



 UNION



SELECT

    FC.FC_RULE_NUMBER,

        FAC.FAC_ID,

        FAC.WM_OWNED_FLAG

FROM DEST_SITE_FLOW_CONTROL fc

INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON fac.FAC_ID=fc.DEST_DISPOSAL_SITE_ID

WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')

)



-- STEP 6:  CROSS PRODUCT:  By Flow Control Rule, output all combinations of

--          collection points and disposal sites selected above



SELECT CP.FC_RULE_NUMBER

      ,CP.ROWNUMBER

      ,DS.FAC_ID

      ,CASE WHEN DS.WM_OWNED_FLAG='Y' THEN FC.SPECIAL_RATE_AMT ELSE 0 END AS UNIT_COST

      ,CASE WHEN DS.WM_OWNED_FLAG='Y' THEN 0.0 ELSE FC.SPECIAL_RATE_AMT END AS UNIT_PRICE

      ,0 AS UNIT_REVENUE

FROM SPECIAL_RATE_RULES FC

  INNER JOIN FC_SPECIAL_RATE_COLLECTION CP ON CP.FC_RULE_NUMBER = FC.FC_RULE_NUMBER

  INNER JOIN FC_SPECIAL_RATE_DISPOSAL_SITES DS ON DS.FC_RULE_NUMBER = FC.FC_RULE_NUMBER

;

-- ************************************** MODEL_FLOW_CONTROL_DISPOSAL
CREATE VIEW MODEL_FLOW_CONTROL_DISPOSAL AS
  --STATE-specific flow controls
WITH STATE_FLOW_CONTROL AS
 (SELECT * FROM EXPLODED_FLOW_CONTROL
 WHERE RULE_DEST = 'State'),

 --COUNTY-specific flow controls
 COUNTY_FLOW_CONTROL AS
 (SELECT * FROM EXPLODED_FLOW_CONTROL
 WHERE RULE_DEST = 'County'),

 --CITY-specific flow controls
CITY_FLOW_CONTROL AS
 (SELECT * FROM EXPLODED_FLOW_CONTROL
 WHERE RULE_DEST = 'City'),

 --SITE-specific flow controls
SITE_FLOW_CONTROL AS
 (SELECT * FROM EXPLODED_FLOW_CONTROL
 WHERE RULE_DEST = 'Disposal Site'),

 --Get all disposal facilities in the model
 MODEL_DISPOSAL_FACILITIES_MAT_GEO AS
 (
 SELECT
 fac.FAC_ID,
 facm.WASTE_TYPE,
 fac.GEO_CITY_NM,
 fac.GEO_COUNTY_NM,
 fac.GEO_STATE_CD
 FROM MODEL_FACILITIES_MATERIAL facm
 INNER join MODEL_FACILITIES fac ON fac.FAC_ID = facm.FAC_ID AND fac.status_ind ='A'
 WHERE facm.ACCEPTED_FLAG!='N'
 ),

 --Create the table for all county-sourced flow controls and associated disposal points
FLOW_CONTROL_STATE_DISPOSAL AS
(SELECT
    fac.FAC_ID
    ,fc.FC_RULE_NUMBER
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
FROM STATE_FLOW_CONTROL fc
INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON UPPER(fac.GEO_STATE_CD)=UPPER(fc.DEST_STATE_CD)
WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')),

--Create the table for all county-sourced flow controls and associated disposal points
FLOW_CONTROL_COUNTY_DISPOSAL AS
(SELECT
    fac.FAC_ID
    ,fc.FC_RULE_NUMBER
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
FROM COUNTY_FLOW_CONTROL fc
INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON UPPER(FAC.GEO_STATE_CD||'-'||FAC.GEO_COUNTY_NM) = UPPER(FC.DEST_STATE_CD||'-'||FC.DEST_COUNTY_NM)
WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')),

--Create the table for all city-souced flow controls and associated disposal points
FLOW_CONTROL_CITY_DISPOSAL AS
(SELECT
    fac.FAC_ID
    ,fc.FC_RULE_NUMBER
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
FROM CITY_FLOW_CONTROL fc
INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON UPPER(FAC.GEO_STATE_CD||'-'||FAC.GEO_CITY_NM) = UPPER(FC.DEST_STATE_CD||'-'||FC.DEST_CITY_NM)
WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL')),

--Create the table for all site-sourced flow controls and associated disposal points
FLOW_CONTROL_SITE_DISPOSAL AS
(SELECT
    fac.FAC_ID
    ,fc.FC_RULE_NUMBER
    ,fc.WASTE_TYPE AS FC_WASTE_TYPE
FROM SITE_FLOW_CONTROL fc
INNER JOIN MODEL_DISPOSAL_FACILITIES_MAT_GEO fac ON fac.FAC_ID=fc.DEST_DISPOSAL_SITE_ID
WHERE (fc.WASTE_TYPE=fac.WASTE_TYPE) or (UPPER(fc.WASTE_TYPE)='ALL'))

--Create final view
SELECT
    FC_RULE_NUMBER
    ,FAC_ID AS DISP_FAC_ID
FROM FLOW_CONTROL_COUNTY_DISPOSAL
UNION
SELECT
    FC_RULE_NUMBER
    ,FAC_ID AS DISP_FAC_ID
FROM FLOW_CONTROL_CITY_DISPOSAL
UNION
SELECT
    FC_RULE_NUMBER
    ,FAC_ID AS DISP_FAC_ID
FROM FLOW_CONTROL_SITE_DISPOSAL
UNION
SELECT
    FC_RULE_NUMBER
    ,FAC_ID AS DISP_FAC_ID
FROM FLOW_CONTROL_STATE_DISPOSAL
;

-- ************************************** VALIDATION_DATA_LIMITED_TRUCK_CAPACITY
CREATE VIEW VALIDATION_DATA_LIMITED_TRUCK_CAPACITY AS
SELECT HC.FAC_ID
      ,HC.SUBLOB
      ,HC.TRUCK_CAPACITY / HSC.TRUCK_CNT / $DAYS as HRS_PER_TRUCK
      ,'Daily truck hours at Hauling site ' || SUBSTR(HC.FAC_ID,1,6) || ' sublob ' || HC.SUBLOB || ' is ' || round(HRS_PER_TRUCK,2) || ', which exceeds threshold of 15 hrs/day' AS DETAIL
      ,SUBSTR(HC.FAC_ID,1,6) AS LH_PARM_1
      ,'COLLECTION' AS LH_PARM_2
      ,HC.SUBLOB AS LH_PARM_3
      ,NULL AS LH_PARM_4
      ,NULL AS LH_PARM_5      
FROM model_hrs_cap HC
LEFT JOIN HAULING_SITE_CAPACITY HSC
    ON HSC.FAC_ID = SUBSTR(HC.FAC_ID,1,6) --model_hrs_cap FAC_ID has *_DEPOT, so using substr to match with HSC.FAC_ID
    AND HSC.SUBLOB = HC.SUBLOB
WHERE HRS_PER_TRUCK > 15;

-- ************************************** VALIDATION_DATA_HRS_CAP_ACTIVE_FACILITIES
CREATE VIEW VALIDATION_DATA_HRS_CAP_ACTIVE_FACILITIES AS
SELECT HC.FAC_ID as model_hrs_cap_DEPOT
      , MP.TOTAL_TONS AS TOTAL_TONS
      ,'Hauling site '||HC.FAC_ID|| ', is inactive.  It accounts for '||MP.TOTAL_RECORDS|| ' collection points and  ' ||MP.TOTAL_TONS||' tons' AS DETAIL
	  ,SUBSTR(HC.FAC_ID,1,6) AS LH_PARM_1
	  ,'COLLECTION'  AS LH_PARM_2
      ,NULL AS LH_PARM_3
	  ,NULL AS LH_PARM_4
	  ,NULL AS LH_PARM_5
     FROM (select distinct FAC_ID from model_hrs_cap) HC
LEFT JOIN HAULING_SITE HS ON HS.FAC_ID||'_Depot'=HC.FAC_ID
LEFT JOIN
(
  SELECT DEPOTFACID
        ,COUNT(*) AS TOTAL_RECORDS
        ,SUM(TONS) AS TOTAL_TONS
  FROM MODEL_COLLECTION_POINTS
  GROUP BY DEPOTFACID
)MP ON HC.FAC_ID = MP.DEPOTFACID
WHERE HS.FAC_ID IS NULL OR UPPER(HS.ACTIVE_FLAG) != 'A'
;

-- ************************************** VALIDATION_DATA_HRS_CAP
CREATE VIEW VALIDATION_DATA_HRS_CAP AS
SELECT
  FAC_ID
  ,SUBLOB
  ,'Hauling site ' || FAC_ID || ' in sublob ' || SUBLOB ||
        case when MIN_HRS < 0 then ' has negative MIN_HRS ' || CAST(round(MIN_HRS,2) AS STRING) else '' end ||
        case when MAX_HRS < 0 then ' has negative MAX_HRS ' || CAST(round(MAX_HRS,2) AS STRING) else '' end ||
        case when MIN_HRS > MAX_HRS then ' has MIN_HRS > MAX_HRS where MIN_HRS= ' || CAST(round(MIN_HRS,2) AS STRING) || ' and MAX_HRS = ' || CAST(round(MAX_HRS,2) AS STRING) else '' end
  AS DETAIL
  ,SUBSTR(FAC_ID,1,6) AS LH_PARM_1
  ,'COLLECTION' AS LH_PARM_2
  ,NULL AS LH_PARM_3
  ,NULL AS LH_PARM_4
  ,NULL AS LH_PARM_5  
FROM model_hrs_cap
WHERE MIN_HRS < 0.0 or MAX_HRS < 0.0 or MIN_HRS > MAX_HRS
;

-- ************************************** test
CREATE VIEW test as select * from model_hrs_cap;

-- ************************************** SUB_LOB_STEM_DISPOSAL_RETURN_HRS
CREATE VIEW SUB_LOB_STEM_DISPOSAL_RETURN_HRS AS
SELECT
    rdh.HAULING_SITE,
    cp.SUBLOB,
    SUM(rdh.STEM_DISPOSAL_RETURN_HRS) AS TOTAL_STEM_DISPOSAL_RETURN_HRS
FROM ROUTE_DISPOSAL_HRS rdh
INNER JOIN MODEL_COLLECTION_POINTS cp ON TO_VARCHAR(rdh.RO_KEY)=cp.ROUTEID AND rdh.HAULING_SITE=cp.DEPOTFACID
GROUP BY rdh.HAULING_SITE, cp.SUBLOB;

-- ************************************** SUB_LOB_CAPACITY_HRS
CREATE VIEW SUB_LOB_CAPACITY_HRS AS
SELECT
    REPLACE(mdl.FAC_ID,'_Depot') AS FAC_ID,
    mdl.SUBLOB,
    hs.TRUCK_CNT*10*5 AS TRUCK_CAPACITY, --TODO: Need to replace with actual duration hours
    c.TOTAL_COLLECTION_HRS,
    (TRUCK_CAPACITY - c.TOTAL_COLLECTION_HRS) AS HRS_CAP
FROM MODEL_DEPOT_LOB mdl
LEFT JOIN HAULING_SITE_CAPACITY hs
    ON REPLACE(mdl.FAC_ID,'_Depot') = hs.FAC_ID AND mdl.SUBLOB=hs.SUBLOB
LEFT JOIN SUB_LOB_MAPPED c ON REPLACE(mdl.FAC_ID,'_Depot') =c.HAULING_SITE AND mdl.SUBLOB = c.SUBLOB;

-- ************************************** VALIDATION_DATA_CHECK_FLOW_CONTROL_MATERIAL_ACCEPTANCE
CREATE VIEW VALIDATION_DATA_CHECK_FLOW_CONTROL_MATERIAL_ACCEPTANCE AS

with must_go_disposal_exploded as

(

 --Get relevant collection points and disposal sites for 'All waste MUST go' rules

  SELECT

  FC_C.FC_RULE_NUMBER,

  FC_C.ROWNUMBER,

  MCP.WASTE_TYPE AS CP_WASTE_TYPE,

  FC_R.METHOD_TYPE,

  FC_R.METHOD_TYPE_DESC,

  FC_R.LOB,

  FC_R.WASTE_TYPE,

  FC_R.RULE_SOURCE,

  mfm.FAC_ID as MUST_GO_DISPFACID,

  mfm.ACCEPTED_FLAG

  FROM MODEL_FLOW_CONTROL_COLLECTION fc_c

  INNER JOIN MODEL_FLOW_CONTROL_RULES fc_r ON (fc_r.FC_RULE_NUMBER = fc_c.FC_RULE_NUMBER  and  FC_R.METHOD_TYPE=1) --only limited to active rules already

  LEFT JOIN MODEL_COLLECTION_POINTS mcp on MCP.ROWNUMBER = FC_C.ROWNUMBER

  LEFT JOIN MODEL_FLOW_CONTROL_DISPOSAL mg on mg.FC_RULE_NUMBER=fc_c.FC_RULE_NUMBER

  LEFT JOIN MODEL_FACILITIES_MATERIAL mfm ON mg.DISP_FAC_ID=mfm.FAC_ID and MCP.WASTE_TYPE=mfm.WASTE_TYPE AND MFM.ACCEPTED_FLAG IN ('Y','U')

  WHERE FC_R.METHOD_TYPE=1

),

must_not_go_disposal_exploded as

(

--Get relevant collection points and disposal sites for 'All waste MUST NOT go' rules

  SELECT

  fc_c.ROWNUMBER,

  mng.FC_RULE_NUMBER,

  MCP.WASTE_TYPE AS CP_WASTE_TYPE,

  mfm.FAC_ID as DISP_FAC_ID,

  mfm.ACCEPTED_FLAG

 FROM MODEL_FLOW_CONTROL_COLLECTION fc_c

 INNER JOIN MODEL_FLOW_CONTROL_RULES fc_r ON (fc_r.FC_RULE_NUMBER = fc_c.FC_RULE_NUMBER  and  FC_R.METHOD_TYPE=4) --only limited to active rules already

 LEFT JOIN MODEL_COLLECTION_POINTS mcp on MCP.ROWNUMBER = FC_C.ROWNUMBER

 LEFT JOIN MODEL_FLOW_CONTROL_DISPOSAL mng ON mng.FC_RULE_NUMBER=Fc_c.FC_RULE_NUMBER

 LEFT JOIN MODEL_FACILITIES_MATERIAL mfm ON mng.DISP_FAC_ID=mfm.FAC_ID and MCP.WASTE_TYPE=mfm.WASTE_TYPE AND MFM.ACCEPTED_FLAG IN ('Y','U')

),

JOINED_CPS as

(

--Get the 'MUST GO' collection points and disposal facilities and join to 'MUST NOT GO'

--We want to test whether there are some NULL entries for 'must not go' facilities to ensure

--that there valid outlets for particular collection points

select

m.*,

mng.FC_RULE_NUMBER AS MUST_NOT_GO_RULE_NUMBER,

mng.DISP_FAC_ID AS MUST_NOT_GO_DISPFACID,

CASE WHEN MUST_GO_DISPFACID IS NOT NULL AND MUST_NOT_GO_DISPFACID IS NULL THEN 1 ELSE 0 END AS GOOD_DISPOSAL_LOCATION

FROM must_go_disposal_exploded m

LEFT JOIN must_not_go_disposal_exploded mng on m.ROWNUMBER = mng.ROWNUMBER AND m.MUST_GO_DISPFACID = mng.DISP_FAC_ID AND m.ACCEPTED_FLAG=mng.ACCEPTED_FLAG

)

SELECT

ROWNUMBER,

'CP' || rownumber || ', with must go rule: ' || LISTAGG(DISTINCT FC_RULE_NUMBER,',') || ' and must not go rule: ' ||

LISTAGG(DISTINCT MUST_NOT_GO_RULE_NUMBER,',') || ' has no valid disposal locations.' as DETAIL,

SUM(GOOD_DISPOSAL_LOCATION) as SUM_GOOD_DISPOSAL_LOCATION

FROM joined_cps

GROUP BY rownumber

HAVING SUM_GOOD_DISPOSAL_LOCATION=0;

-- ************************************** SUB_LOB_HRS
CREATE VIEW SUB_LOB_HRS AS
SELECT
    r.HAULING_SITE
    ,r.SUBLOB
    ,r.TOTAL_ROUTE_DURATION_HRS
    ,sdr.TOTAL_STEM_DISPOSAL_RETURN_HRS
    ,(r.TOTAL_ROUTE_DURATION_HRS - sdr.TOTAL_STEM_DISPOSAL_RETURN_HRS) AS TOTAL_COLLECTION_HRS
FROM SUB_LOB_TOTAL_ROUTE_DURATION r
LEFT JOIN SUB_LOB_STEM_DISPOSAL_RETURN_HRS sdr 
    ON r.HAULING_SITE=sdr.HAULING_SITE AND r.SUBLOB=sdr.SUBLOB;

-- ************************************** VALIDATION_DETAIL
CREATE VIEW VALIDATION_DETAIL AS

SELECT VAL.VALIDATION_ID VALIDATION_ID,

VM.TABLE_NAME AS TABLE_NM,

VM.test_NAME AS test_NM,

VAL.DETAIL,

VM.SORT_ORDER,

VAL.SEQ,

VM.test_TYPE  AS test_TYPE,

VM.TARGET_LH_SCREEN AS TARGET_LH_SCREEN,

VAL.LH_PARM_1 as LH_PARM_1,

VAL.LH_PARM_2 as LH_PARM_2,

VAL.LH_PARM_3 as LH_PARM_3,

VAL.LH_PARM_4 as LH_PARM_4,

VAL.LH_PARM_5 as LH_PARM_5

FROM

(

	(

		SELECT 1 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY A.FAC_ID DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_COMPLETENESS_MODEL_FACILITIES A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 2 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY DEPOTFACID DESC NULLS LAST,OCS_DISPOSAL_CD DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_COMPLETENESS_MODEL_COLLECTION_POINTS A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 4 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY A.DEPOTFACID DESC NULLS LAST, A.OCS_DISPOSAL_CD DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_COMPLETENESS_MODEL_COLL_PTS_BAD_FAC_ID A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 5 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY FAC_ID DESC NULLS LAST, SUBLOB DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_HRS_CAP A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 6 VALIDATION_ID

		,ROW_NUMBER() OVER (ORDER BY FAC_ID DESC NULLS LAST, SUBLOB DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_LIMITED_TRUCK_CAPACITY A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 9 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY A.LANE_ORIGIN_FAC_ID DESC NULLS LAST, A.LANE_DESTINATION_FAC_ID DESC NULLS LAST, A.WASTE_TYPE DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_TRANSFER_LANE_NULL_LOAD_SIZE A

		ORDER BY SEQ

	)



	UNION All



	(

		SELECT 21 VALIDATION_ID

		,ROW_NUMBER() OVER (ORDER BY DETAIL DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,NULL AS LH_PARM_1

		,NULL AS LH_PARM_2

		,NULL AS LH_PARM_3

		,NULL as LH_PARM_4

		,NULL as LH_PARM_5

		FROM VALIDATION_DATA_CHECK_FLOW_CONTROL_MATERIAL_ACCEPTANCE A

		ORDER BY SEQ

	)



	UNION All



	(

		SELECT 22 VALIDATION_ID

		,ROW_NUMBER() OVER (ORDER BY DETAIL DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_TRANSFER_LANE_DESTINATION_MATERIAL_ACCEPTANCE A

		ORDER BY SEQ

	)



	UNION All



	(

		SELECT 8 VALIDATION_ID

		,ROW_NUMBER() OVER (ORDER BY FAC_ID DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_ORIGIN_TRANSFER_LANE_MATERIAL_ACCEPTANCE A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 19 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_CHECK_DISPOSAL_WASTE_TYPE_LEGALITY A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 3 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY A.DISPOSAL_FACILITY_ID DESC NULLS LAST, A.WASTE_TYPE DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_CHECK_EMPTY_WASTE_TYPE_ACCEPTANCE A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 10 VALIDATION_ID

		,ROW_NUMBER() OVER (ORDER BY GREAT_CIRCLE_MILES DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_SUSPICIOUS_LOC_MATCH A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 11 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_HRS_CAP_ACTIVE_FACILITIES A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 12 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_TRANSFER_LANES_LEGAL A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 7 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY DEPOTFACID DESC NULLS LAST, SUBLOB DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_FLEET_CAPACITY_EXISTS A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 18 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_CHECK_FAC_MAT_UNKNOWN_WASTE_TYPE A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 23 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_OMITTED_DCO_FROZEN_CPS A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 15 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_PRE_MODEL_NO_LONG_HAUL_COST A

		ORDER BY SEQ

	)





	UNION ALL



	(

		SELECT 13 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_PRE_MODEL_NO_UNIT_COST A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 14 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_PRE_MODEL_NO_UNIT_PRICE A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 17 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_PRE_MODEL_NO_TURN_TIME A

		ORDER BY SEQ

	)



	UNION ALL



	(

		SELECT 16 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY TOTAL_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_PRE_MODEL_NO_LOAD_SIZE A

		ORDER BY SEQ

	)



		UNION ALL



	(

		SELECT 25 VALIDATION_ID

		,ROW_NUMBER() OVER(ORDER BY CP_TONS DESC NULLS LAST) AS SEQ

		,A.DETAIL AS DETAIL

		,A.LH_PARM_1 as LH_PARM_1

		,A.LH_PARM_2 as LH_PARM_2

		,A.LH_PARM_3 as LH_PARM_3

		,A.LH_PARM_4 as LH_PARM_4

		,A.LH_PARM_5 as LH_PARM_5

		FROM VALIDATION_DATA_CPS_WITH_NO_TMS_HISTORICAL_TONNAGE A

		ORDER BY SEQ

	)



) VAL INNER JOIN VALIDATION_METADATA VM

ON VAL.VALIDATION_ID=VM.VALIDATION_ID

ORDER BY SORT_ORDER, SEQ;

-- ************************************** VALIDATION_AGGREGATE
CREATE VIEW VALIDATION_AGGREGATE AS
SELECT
   VM.VALIDATION_ID as VALIDATION_ID
  ,VM.SORT_ORDER as SORT_ORDER
  ,VM.test_TYPE as test_TYPE
  ,VM.test_NAME as test_NAME
  ,NVL(VAL.PASS,1) as PASS
  ,NVL(VAL.ROW_COUNT, 0) as ROW_COUNT
FROM VALIDATION_METADATA VM
LEFT JOIN
  (
    SELECT VD.VALIDATION_ID
            ,VD.SORT_ORDER
            ,VD.test_TYPE
            ,VD.test_NM AS test_NAME
            ,COUNT(*)=0 AS PASS
            ,COUNT(*) AS ROW_COUNT
      FROM VALIDATION_DETAIL VD
      GROUP BY VD.VALIDATION_ID, VD.SORT_ORDER, VD.test_NM, VD.test_TYPE
    ORDER BY VD.SORT_ORDER
   ) VAL
ON VAL.VALIDATION_ID=VM.VALIDATION_ID
ORDER BY VM.SORT_ORDER
;

-- ************************************** ASSERT
CREATE FUNCTION ASSERT(VALUE VARCHAR, test VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '
  if (VALUE === test) {
    return `True (''${VALUE}'' = ''${test}'')`;
  } else {
    throw `Assertion failed: ''${VALUE}'' != ''${test}''`
  }
';

-- ************************************** COUNTDAYOFWEEK
CREATE FUNCTION COUNTDAYOFWEEK(START_DATE DATE, END_DATE DATE, DAYOFWEEK VARIANT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
AS '

  Date.prototype.addDays = function (days) {

      var date = new Date(this.valueOf());

      date.setDate(date.getDate() + days);

      return date;

  };



   var numDays = 0;

   var currentDate = new Date(START_DATE);

   while (currentDate <= END_DATE) {

            //count specified day of week 0=Sunday, 1=Monday ... 6=Saturday

            if (currentDate.getDay() == DAYOFWEEK) { numDays++; }

        currentDate = currentDate.addDays(1);

     };

    return numDays;

 ';

-- ************************************** COUNTDAYS
CREATE FUNCTION COUNTDAYS(START_DATE DATE, END_DATE DATE, SATURDAYS VARIANT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
AS '
  Date.prototype.addDays = function (days) {
      var date = new Date(this.valueOf());
      date.setDate(date.getDate() + days);
      return date;
  };

   var numDays = 0;
   var currentDate = new Date(START_DATE);
   while (currentDate <= END_DATE) {
        if(SATURDAYS==1)
        {
            //count Saturdays
            if (currentDate.getDay() == 6) {
                numDays++;
            }
        }
        else
        {
            //count workdays
            if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {
                numDays++;
            }
        }
        currentDate = currentDate.addDays(1);
     };

    return numDays;
  ';

-- ************************************** function_76
CREATE FUNCTION function_76()
Returns -- Please specify return type
Language -- Please specify function language

  Comment = 'No Comment Provided'

AS
'--Please provide function definition'
;

-- ************************************** GET_3P_END_DATE
CREATE FUNCTION GET_3P_END_DATE(NUM_WEEKS_3P FLOAT, START_DATE DATE, END_DATE DATE, MAX_END_DATE DATE)
RETURNS DATE
LANGUAGE JAVASCRIPT
IMMUTABLE
COMMENT='Get max dates for calculating 3P averages for PMT_LANDFILLS and PMT_TRANSFERS'
AS '
    // Get num weeks in end_date - start_date
    var extant_weeks = Math.round((END_DATE - START_DATE) / 1000 / 60 / 60 / 24 / 7);
    // forward padding should be the greater of integer division of half the difference between extant
    // weeks and num_weeks_3p
    var week_diff = (NUM_WEEKS_3P - extant_weeks) / 2;

    var end_3p = END_DATE; // we are right-aligning if num_weeks_3p < extant_weeks
    if(extant_weeks < NUM_WEEKS_3P){
        end_3p.setDate(end_3p.getDate() + Math.ceil(week_diff)*7);
    }

    // cap end_3p at first week beginning before maximum end date
    if(end_3p > MAX_END_DATE){
        // we have a sunday beginning of week here
        end_3p.setDate(MAX_END_DATE.getDate() - MAX_END_DATE.getDay());
    }
    return end_3p;
';

-- ************************************** GET_3P_START_DATE
CREATE FUNCTION GET_3P_START_DATE(NUM_WEEKS_3P FLOAT, START_DATE DATE, END_DATE DATE, END_DATE_3P DATE)
RETURNS DATE
LANGUAGE JAVASCRIPT
IMMUTABLE
COMMENT='Get min dates for calculating 3P averages for PMT_LANDFILLS and PMT_TRANSFERS'
AS '
    // TODO: validation on min_start_date within this function
    // Get num weeks in end_date - start_date
    var extant_weeks = Math.round((END_DATE - START_DATE) / 1000 / 60 / 60 / 24 / 7);

    if(extant_weeks > NUM_WEEKS_3P) {
    // If there''s more data available than requested, right-align the window we''ll use
        var start_3p = END_DATE;
        var week_diff = NUM_WEEKS_3P * 7;
    } else {
    // the week_diff is the remaining amount of padding inferrable from end_date_3p
        var start_3p = START_DATE;
        var forward_padding = (END_DATE_3P - END_DATE) / 1000 / 60 / 60 / 24 / 7;
        var week_diff = (NUM_WEEKS_3P - extant_weeks) - forward_padding;
    }
    start_3p.setDate(start_3p.getDate() - week_diff * 7);

    // Finally, ensure start_date is a Sunday
    start_3p.setDate(start_3p.getDate() - start_3p.getDay());
    return start_3p;
';

-- ************************************** LH_FAC_TYPE
CREATE FUNCTION LH_FAC_TYPE(FAC_ID VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE SQL
AS '
        select CASE when substring(FAC_ID,8) = ''TS'' then ''Transfer Station''
					when substring(FAC_ID,8) = ''MRF'' then ''MRF Recycling'' 
					when substring(FAC_ID,8) = ''Depot'' then ''COLLECTION'' else
					substring(FAC_ID,8) end as fac_type
    ';

-- ************************************** CREATE_ALL_TEMP
CREATE PROCEDURE CREATE_ALL_TEMP()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var views_as_temp_tables = [
	"MODEL_FACILITY_LIST",
	"MODEL_ALL_CONSTRAINTS",
	"MODEL_COLLECTION_POINTS",
	"PRE_MODEL_FACILITIES",
	"MODEL_FACILITIES",
	"PRE_MODEL_FACILITIES_MATERIAL",
	"PRE_MODEL_TRANSFER_COSTS",
	"MODEL_FACILITIES_MATERIAL",
	"MODEL_DEPOT_LOB",
	"MODEL_DISPOSAL_LOB",
	"MODEL_TRANSFER_COSTS",
	"model_hrs_cap",
	"MODEL_SWAP_HEADER",
	"MODEL_SWAP_DETAIL",
	"MODEL_FLOW_CONTROL_RULES",
	"MODEL_FLOW_CONTROL_COLLECTION",
	"EXPLODED_FLOW_CONTROL",
	"MODEL_FLOW_CONTROL_DISPOSAL",
	"MODEL_FLOW_CONTROL_SPECIAL_RATE",
	"VALIDATION_DETAIL"
];
for (i = 0; i < views_as_temp_tables.length; i++) {
  var sql_command = "CALL CREATE_TEMP_TABLE(''" + views_as_temp_tables[i] +"'');";
  var res = snowflake.execute( {sqlText: sql_command } );
}
return 1;
';

-- ************************************** CREATE_TEMP_TABLE
CREATE PROCEDURE CREATE_TEMP_TABLE(IDENTIFIER VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var sql_command = "SELECT MIN(TABLE_TYPE) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=''" + IDENTIFIER + "'';";
var res = snowflake.execute( {sqlText: sql_command } );
res.next();
var type = res.getColumnValue(1);
if(type==''LOCAL TEMPORARY'')
{
  var sql_command = "DROP TABLE IF EXISTS " + IDENTIFIER + ";";
  var res = snowflake.execute( {sqlText: sql_command } );
}
var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE " + IDENTIFIER + " AS SELECT * FROM " + IDENTIFIER;
var res = snowflake.execute( {sqlText: sql_command } );
return 1;
';

-- ************************************** INSERT_ALL_PERSISTENT
CREATE PROCEDURE INSERT_ALL_PERSISTENT(ENO_ID VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var sql_command = "SELECT " + "''" + ENO_ID + "''";
var res = snowflake.execute( {sqlText: sql_command } );
res.next();
var temp_tables = [
	"MODEL_ALL_CONSTRAINTS",
	"MODEL_COLLECTION_POINTS",
	"MODEL_FACILITIES",
	"MODEL_FACILITIES_MATERIAL",
	"MODEL_DEPOT_LOB",
	"MODEL_DISPOSAL_LOB",
	"MODEL_TRANSFER_COSTS",
	"model_hrs_cap",
	"MODEL_SWAP_HEADER",
	"MODEL_SWAP_DETAIL",
	"MODEL_FLOW_CONTROL_RULES",
	"MODEL_FLOW_CONTROL_COLLECTION",
	"EXPLODED_FLOW_CONTROL",
	"MODEL_FLOW_CONTROL_DISPOSAL",
	"MODEL_FLOW_CONTROL_SPECIAL_RATE"

];
for (i = 0; i < temp_tables.length; i++) {
  var sql_command = "INSERT INTO " + temp_tables[i] +"_PERSISTENT SELECT " + "''" + ENO_ID + "'' as ENO_ID, * FROM " + temp_tables[i] +";";
  var res = snowflake.execute( {sqlText: sql_command } );
}
return 1;
';

-- ************************************** UI_PARMS
CREATE PROCEDURE UI_PARMS(START_DATE VARCHAR, END_DATE VARCHAR, MARKET_AREA VARCHAR, RANGE VARCHAR, LAMBDA VARCHAR, USERID VARCHAR, OPTIMIZE_EANDR_ONLY VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS '
var sql_command = "select MRP_SEQ_01.nextval"
var res = snowflake.execute( {sqlText: sql_command } );
res.next();
seq = res.getColumnValue(1);
var sql_command = "set start_date = " + "''" + START_DATE + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set end_date = " + "''" + END_DATE + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set MARKET_AREA = " + "''" + MARKET_AREA + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set RANGE = " + "''" + RANGE + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set LAMBDA = " + "''" + LAMBDA + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set USERID = " + "''" + USERID + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set num_weeks_3p = " + "''" + 13 + "''";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "set OPTIMIZE_EANDR_ONLY = " + "''" + OPTIMIZE_EANDR_ONLY + "''";
var res = snowflake.execute( {sqlText: sql_command } );

//Set Variable DAYS
var result1 = "SELECT COUNTDAYS($start_date,$end_date,0) as COUNTDAYS";
var res1 = snowflake.execute( {sqlText: result1 } );
res1.next();
COUNTDAYS = res1.getColumnValue(1);
var sql_command = "set DAYS =" + "''" + COUNTDAYS + "''";
var res = snowflake.execute( {sqlText: sql_command } );

if (LAMBDA == ''N'') {
//Set Varialble ENO_ID
var result = "SELECT $USERID||''_''||$MARKET_AREA||''_''||to_char(current_date,''YYYYMMDD'')||''_''||''" + seq +"'' as ENO_ID";
var res = snowflake.execute( {sqlText: result } );
res.next();
ENO_ID = res.getColumnValue(1);
var sql_command = "insert into MART.MODEL_RUN_PARAMETERS SELECT ''" + ENO_ID +"'' as ENO_ID,object_construct(''Start_Date:'', $start_date,''END_DATE:'',$end_date,''MARKET_AREA:'',$MARKET_AREA,''RANGE:'', $RANGE, ''LAMBDA:'', $LAMBDA, ''USERID:'', $USERID, ''OPTIMIZE_EANDR_ONLY:'', $OPTIMIZE_EANDR_ONLY) as PARAMETER_JSON,current_timestamp as timestamp_ltz,current_User as USER_NM";
var res = snowflake.execute( {sqlText: sql_command } );
var VALIDATION_SP = "CALL VALIDATION(''" + ENO_ID +"'')";
var res = snowflake.execute( {sqlText: VALIDATION_SP } );
return ENO_ID;};
if (LAMBDA == ''Y'') {
var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE MODEL_COLLECTION_POINTS AS SELECT * FROM MODEL_COLLECTION_POINTS;";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE MODEL_FACILITIES AS SELECT * FROM MODEL_FACILITIES;";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE PRE_MODEL_FACILITIES_MATERIAL AS SELECT * FROM PRE_MODEL_FACILITIES_MATERIAL;";
var res = snowflake.execute( {sqlText: sql_command } );
};
if (LAMBDA == ''P'') {
var sql_command = "SELECT 1;";
var res = snowflake.execute( {sqlText: sql_command } );
};
return 1;
';

-- ************************************** UI_PARMS
CREATE PROCEDURE UI_PARMS(START_DATE VARCHAR, END_DATE VARCHAR, MARKET_AREA VARCHAR, RANGE VARCHAR, LAMBDA VARCHAR, USERID VARCHAR, OPTIMIZE_EANDR_ONLY VARCHAR, TMS_WEEKS VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS '

var sql_command = "select MRP_SEQ_01.nextval"

var res = snowflake.execute( {sqlText: sql_command } );

res.next();

seq = res.getColumnValue(1);

var sql_command = "set start_date = " + "''" + START_DATE + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set end_date = " + "''" + END_DATE + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set MARKET_AREA = " + "''" + MARKET_AREA + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set RANGE = " + "''" + RANGE + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set LAMBDA = " + "''" + LAMBDA + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set USERID = " + "''" + USERID + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set num_weeks_3p = " + "''" + 13 + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set OPTIMIZE_EANDR_ONLY = " + "''" + OPTIMIZE_EANDR_ONLY + "''";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "set TMS_WEEKS = " + "''" + TMS_WEEKS + "''";

var res = snowflake.execute( {sqlText: sql_command } );



//Set Variable DAYS

var result1 = "SELECT COUNTDAYS($start_date,$end_date,0)+COUNTDAYS($start_date,$end_date,1) as COUNTDAYS";

var res1 = snowflake.execute( {sqlText: result1 } );

res1.next();

COUNTDAYS = res1.getColumnValue(1);

var sql_command = "set DAYS =" + "''" + COUNTDAYS + "''";

var res = snowflake.execute( {sqlText: sql_command } );



if (LAMBDA == ''N'') {

//Set Varialble ENO_ID

var result = "SELECT $USERID||''_''||$MARKET_AREA||''_''||to_char(current_date,''YYYYMMDD'')||''_''||''" + seq +"'' as ENO_ID";

var res = snowflake.execute( {sqlText: result } );

res.next();

ENO_ID = res.getColumnValue(1);

var sql_command = "insert into MART.MODEL_RUN_PARAMETERS SELECT ''" + ENO_ID +"'' as ENO_ID,object_construct(''Start_Date:'', $start_date,''END_DATE:'',$end_date,''MARKET_AREA:'',$MARKET_AREA,''RANGE:'', $RANGE, ''LAMBDA:'', $LAMBDA, ''USERID:'', $USERID, ''OPTIMIZE_EANDR_ONLY:'', $OPTIMIZE_EANDR_ONLY, ''TMS_WEEKS:'', $TMS_WEEKS) as PARAMETER_JSON,current_timestamp as timestamp_ltz,current_User as USER_NM";

var res = snowflake.execute( {sqlText: sql_command } );

var VALIDATION_SP = "CALL VALIDATION(''" + ENO_ID +"'')";

var res = snowflake.execute( {sqlText: VALIDATION_SP } );

return ENO_ID;};

if (LAMBDA == ''Y'') {

var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE MODEL_COLLECTION_POINTS AS SELECT * FROM MODEL_COLLECTION_POINTS;";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE MODEL_FACILITIES AS SELECT * FROM MODEL_FACILITIES;";

var res = snowflake.execute( {sqlText: sql_command } );

var sql_command = "CREATE OR REPLACE /* SqlDBM hack  TEMPORARY */ TABLE PRE_MODEL_FACILITIES_MATERIAL AS SELECT * FROM PRE_MODEL_FACILITIES_MATERIAL;";

var res = snowflake.execute( {sqlText: sql_command } );

};

if (LAMBDA == ''P'') {

var sql_command = "SELECT 1;";

var res = snowflake.execute( {sqlText: sql_command } );

};

return 1;

';

-- ************************************** VALIDATION
CREATE PROCEDURE VALIDATION(ENO_ID VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var sql_command = "SELECT " + "''" + ENO_ID + "''";
var res = snowflake.execute( {sqlText: sql_command } );
res.next();
var sql_command = "CALL CREATE_ALL_TEMP();";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "INSERT INTO mart.MODEL_RUN_VALIDATION_DETAIL select VALIDATION_ID," + "''" + ENO_ID + "'' as ENO_ID, test_NM as test_NAME, TABLE_NM AS TABLE_NM, DETAIL as test_DETAIL, SORT_ORDER as SORT_ORDER, SEQ as SEQ, test_TYPE as test_TYPE,TARGET_LH_SCREEN,LH_PARM_1,LH_PARM_2,LH_PARM_3,LH_PARM_4,LH_PARM_5  from MART.VALIDATION_DETAIL";
var res = snowflake.execute( {sqlText: sql_command } );
var sql_command = "INSERT INTO mart.MODEL_RUN_VALIDATION_AGGREGATE select VALIDATION_ID," + "''" + ENO_ID + "'' as ENO_ID, test_NAME as test_NAME, test_TYPE as test_TYPE, PASS as PASS_IND, ROW_COUNT as ROW_COUNT, SORT_ORDER as SORT_ORDER from MART.VALIDATION_AGGREGATE";
var res = snowflake.execute( {sqlText: sql_command } );
var result = "SELECT CASE WHEN SUM(ROW_COUNT) > 0 THEN ''N'' ELSE ''Y'' END AS CNT FROM MART.MODEL_RUN_VALIDATION_AGGREGATE WHERE ENO_ID = " + "''" + ENO_ID + "'' AND test_TYPE = ''SHOWSTOPPER'' AND PASS_IND = ''FALSE''";
var res = snowflake.execute( {sqlText: result } );
res.next();
CNT = res.getColumnValue(1);
var sql_command = "CALL INSERT_ALL_PERSISTENT(''" + ENO_ID +"'');";
var res = snowflake.execute( {sqlText: sql_command } );
';

