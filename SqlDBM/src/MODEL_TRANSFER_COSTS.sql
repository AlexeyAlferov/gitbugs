-- ***************************** SqlDBM: Snowflake ****************************
-- * Generated by SqlDBM: MART SCHEMA, v18 by lesya.rylova+standard@gmail.com *


-- ************************************** MODEL_TRANSFER_COSTS
CREATE VIEW MODEL_TRANSFER_COSTS as

select

    MTC.LANE_ORIGIN_FAC_ID,

    MTC.WASTE_TYPE,

    MTC.LANE_DESTINATION_FAC_ID,

    nvl(LONG_HAUL_COST,0) as LONG_HAUL_COST,

    nvl(LOAD_SIZE,1) as LOAD_SIZE,

    UNIT_OF_MEASURE,

    nvl(MIN_TONS,0) as MIN_TONS,

    case when MAX_TONS is null or MAX_TONS = 0 then 99999999 else MAX_TONS end as MAX_TONS,

    SOURCE,

    ADDL_UNIT_COST   ,

    STATUS_IND,

--

-- Distribute the collection points based upon the TMS historicl percentage.

-- Is there collection point data to be distributed for this TS and Waste Type

--   Is there TMS historic tonnage for this TS and Waste Type

--		Redistribute the tonnage across the lanes

--	    if a specific lane has no historical tonnage then set the Baseline Actual Flow to 0 and the max to 0

--      - e.g. 2 out of 3 lane for a given TS and Waste Type have historical Tonnage but the 3rd may not.

--   Else

--		Set Baseline Actual Flow to 0 and Max to 999,999 - i.e. we don't have any historic tonnage on which to build a profile to

--	 End

-- Else

--	 Set Baseline Actual Flow to 0 and Max to 999,999  - i.e. we don't have any historic tonnage on which to build a profile to

-- End

--

--

	CASE WHEN cp.tons IS NOT NULL THEN

			CASE WHEN SUM(pct) OVER (PARTITION BY mtc.lane_origin_fac_id, mtc.waste_type) = 100 THEN

				CASE WHEN pct IS NOT NULL THEN tms_hist.pct/100 * cp.tons

					 ELSE 0

				END

				ELSE 0

			END

		ELSE 0

	END AS BASELINE_ACTUAL_FLOW_TONS,

	CASE WHEN cp.tons IS NOT NULL THEN

			CASE WHEN SUM(pct) OVER (PARTITION BY mtc.lane_origin_fac_id, mtc.waste_type) = 100 THEN

				CASE WHEN pct IS NOT NULL THEN 1.05 * tms_hist.pct/100 * cp.tons

					 ELSE 0

				END

				ELSE 99999999

			END

		ELSE 99999999

	END AS BASELINE_MAX_TONS,

	CP.TONS AS CP_TONS,

	TMS_HIST.PCT AS TMS_HIST_PCT,

	TMS_HIST.TONS AS TMS_TONS

FROM PRE_MODEL_TRANSFER_COSTS MTC

--

-- Aggregate the Collection Point Tonnage by Transfer Station and Waste Type

--

LEFT JOIN

(	SELECT DISPFACID, WASTE_TYPE, SUM(TONS) AS TONS

 	FROM MODEL_COLLECTION_POINTS

 	WHERE DISPFACID LIKE '%_TS'

 	GROUP BY DISPFACID, WASTE_TYPE

) CP  	ON MTC.LANE_ORIGIN_FAC_ID = CP.DISPFACID

		AND MTC.WASTE_TYPE = CP.WASTE_TYPE

--

-- Get the historic TMS profile

--

LEFT JOIN MODEL_TMS_HISTORY TMS_HIST 	ON 	mtc.lane_origin_fac_id = tms_hist.lane_origin_fac_id

										AND	mtc.waste_type = tms_hist.waste_type

										AND mtc.lane_destination_fac_id = tms_hist.lane_destination_fac_id

;
