-- ***************************** SqlDBM: Snowflake ****************************
-- * Generated by SqlDBM: MART SCHEMA, v18 by lesya.rylova+standard@gmail.com *


-- ************************************** MODEL_FACILITIES_MATERIAL
CREATE VIEW MODEL_FACILITIES_MATERIAL AS

WITH PRE_MODEL_ACTIVE_FACILITY_MATERIALS AS

--

--	Only interested in doing these calculations for Waste Types associated with active facilities

--	where acceptance is 'Y' or 'U' (unknown).  We ignore values where waste type is not accepted

--

(

SELECT

    mat.FAC_ID,

    mat.FAC_TYPE,

    mat.WASTE_TYPE,

    mat.ACCEPTED_FLAG,

    mat.UNIT_PRICE,

    disp.LATITUDE,

    disp.LONGITUDE

FROM PRE_MODEL_FACILITIES_MATERIAL mat

LEFT JOIN DISPOSAL_SITE disp

    ON mat.FAC_ID = disp.FAC_ID

WHERE

    disp.ACTIVE_FLAG = 'A'

    AND mat.ACCEPTED_FLAG IN ('Y','U')),

--

--	Define outliers.  We take inter-quartile range and identify:-

--  - lower limit as 25% quartile minus 1.5 * Interquartile range - can be negative if there is a wide variety of data

--  - upper limit is 75& quartile + 1.5 * Interquartile range

--

PRE_MODEL_FACILITY_MATERIAL_OUTLIER_LIMITS AS

(

SELECT

    FAC_TYPE,

    WASTE_TYPE,

    PERCENTILE_DISC(.25) WITHIN GROUP (ORDER BY UNIT_PRICE ASC) AS QUARTILE_1,

    PERCENTILE_DISC(.75) WITHIN GROUP (ORDER BY UNIT_PRICE ASC) AS QUARTILE_3,

    QUARTILE_3 - QUARTILE_1 AS IQR,

    QUARTILE_1 - 1.5 * IQR AS LOWER_LIMIT,

    QUARTILE_3 + 1.5 * IQR AS UPPER_LIMIT

FROM PRE_MODEL_ACTIVE_FACILITY_MATERIALS

GROUP BY

    FAC_TYPE,

    WASTE_TYPE

ORDER BY

    FAC_TYPE,

    WASTE_TYPE

),

PRE_MODEL_FACILITY_MATERIALS_FULL_COMPS AS

--

--	Compare each facility with every other in the scope on FAC_TYPE and WASTE_TYPE and rank them by distance

--  Filter out the outliers based on PRE_MODE_FACILITY_MATERIAL_OUTLIER_LIMITS

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    comp.UNIT_PRICE AS COMP_UNIT_PRICE,

    fac.LATITUDE AS FAC_LATITUDE,

    fac.LONGITUDE AS FAC_LONGITUDE,

    comp.LATITUDE AS COMP_LATITUDE,

    comp.LONGITUDE AS COMP_LONGITUDE,

    0.6213712 * HAVERSINE(FAC_LATITUDE, FAC_LONGITUDE, COMP_LATITUDE, COMP_LONGITUDE) AS DISTANCE_MILES,

    RANK () OVER(PARTITION BY fac.FAC_ID, fac.WASTE_TYPE ORDER BY DISTANCE_MILES ASC) AS RANK

FROM PRE_MODEL_ACTIVE_FACILITY_MATERIALS fac

JOIN PRE_MODEL_ACTIVE_FACILITY_MATERIALS comp

    ON fac.FAC_TYPE = comp.FAC_TYPE

    AND fac.WASTE_TYPE = comp.WASTE_TYPE

    AND fac.FAC_ID <> comp.FAC_ID

JOIN PRE_MODEL_FACILITY_MATERIAL_OUTLIER_LIMITS lim

    ON fac.FAC_TYPE = lim.FAC_TYPE

    AND fac.WASTE_TYPE = lim.WASTE_TYPE

WHERE

    comp.UNIT_PRICE IS NOT NULL

    AND comp.UNIT_PRICE BETWEEN lim.LOWER_LIMIT AND lim.UPPER_LIMIT

),

PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_COMPS AS

--

--	Compare each facility with every other on the scope on WASTE_TYPE ONLY and rank them by distance

--  Filter out the outliers based on PRE_MODE_FACILITY_MATERIAL_OUTLIER_LIMITS

--  Note that this view is a superset of PRE_MODEL_FACILITY_MATERIALS_FULL_COMPS but pulls in

--  facilities based on a Waste Type match only.

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    comp.UNIT_PRICE AS COMP_UNIT_PRICE,

    fac.LATITUDE AS FAC_LATITUDE,

    fac.LONGITUDE AS FAC_LONGITUDE,

    comp.LATITUDE AS COMP_LATITUDE,

    comp.LONGITUDE AS COMP_LONGITUDE,

    0.6213712 * HAVERSINE(FAC_LATITUDE, FAC_LONGITUDE, COMP_LATITUDE, COMP_LONGITUDE) AS DISTANCE_MILES,

    RANK () OVER(PARTITION BY fac.FAC_ID, fac.WASTE_TYPE ORDER BY DISTANCE_MILES ASC) AS RANK

FROM PRE_MODEL_ACTIVE_FACILITY_MATERIALS fac

JOIN PRE_MODEL_ACTIVE_FACILITY_MATERIALS comp

    ON fac.WASTE_TYPE = comp.WASTE_TYPE

    AND fac.FAC_ID <> comp.FAC_ID

JOIN PRE_MODEL_FACILITY_MATERIAL_OUTLIER_LIMITS lim

    ON fac.FAC_TYPE = lim.FAC_TYPE

    AND fac.WASTE_TYPE = lim.WASTE_TYPE

WHERE

    comp.UNIT_PRICE IS NOT NULL

    AND comp.UNIT_PRICE BETWEEN lim.LOWER_LIMIT AND lim.UPPER_LIMIT),

PRE_MODEL_FACILITY_MATERIALS_FULL_ESTIMATES AS

--

--	Get the average of the closest 5 facilities - assuming there are 3 or more

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    AVG(COMP_UNIT_PRICE) AS EST_UNIT_PRICE

FROM PRE_MODEL_FACILITY_MATERIALS_FULL_COMPS fac

WHERE RANK <= 5

GROUP BY

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE

HAVING COUNT(*) >= 3),

PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_ESTIMATES AS

--

--	Get the average of the closes 5 facilities - assuming there are 1 or more

--  This is for the less desirable join on WASTE_TYPE only

--

(

SELECT

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE,

    AVG(COMP_UNIT_PRICE) AS EST_UNIT_PRICE

FROM PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_COMPS fac

WHERE RANK <= 5

GROUP BY

    fac.FAC_ID,

    fac.FAC_TYPE,

    fac.WASTE_TYPE

HAVING COUNT(*) >= 1)

--

-- Apply the UNIT_PRICE defaults in the following order:-

-- (1) Join on FAC_TYPE and WASTE_TYPE 	- PRE_MODEL_FACILITY_MATERIALS_FULL_ESTIMATES

-- (2) Join on WASTE_TYPE only			- PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_ESTIMATES

-- (3) $60 for any 3P facility

--

select  fac.FAC_ID,

        fac.WASTE_TYPE,

        fac.ACCEPTED_FLAG,

        nvl(UNIT_COST,CASE WHEN UPPER(fac.FAC_TYPE)='TS' THEN 2 ELSE 20 END) as UNIT_COST , --$2/ton for TS, $20/ton for any other facility

        COALESCE(UNIT_PRICE,fll.EST_UNIT_PRICE,wt.EST_UNIT_PRICE,60) as UNIT_PRICE , --$60/ton for any 3P facility

        nvl(UNIT_REVENUE,0) as UNIT_REVENUE ,

        nvl(MIN_TONS,0) as MIN_TONS,

        case when MAX_TONS is null or MAX_TONS = 0 then 999999 else MAX_TONS end as MAX_TONS

from PRE_MODEL_FACILITIES_MATERIAL fac

LEFT JOIN PRE_MODEL_FACILITY_MATERIALS_FULL_ESTIMATES fll

    ON fac.FAC_ID = fll.FAC_ID

    AND fac.WASTE_TYPE = fll.WASTE_TYPE

LEFT JOIN PRE_MODEL_FACILITY_MATERIALS_WASTE_TYPE_ESTIMATES wt

    ON fac.FAC_ID = wt.FAC_ID

    AND fac.WASTE_TYPE = wt.WASTE_TYPE;
