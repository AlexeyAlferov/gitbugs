-- ***************************** SqlDBM: Snowflake ****************************
-- * Generated by SqlDBM: MART SCHEMA, v18 by lesya.rylova+standard@gmail.com *


-- ************************************** COM_RESI_VOLUMES_LOAD_SEGMENT
CREATE VIEW COM_RESI_VOLUMES_LOAD_SEGMENT as (SELECT 
  "LANDFILL_PKEY", 
  "TOTAL_CUBIC_YD_VOL", 
  "HOME_CNT" 
FROM (--
--	OCS code to calculate Yards and Hones
--
WITH  TEMP_COM_RESI_VOLUMES as (
  --- Table to hold calculated cuqic yards for commercial and Homes for Residential routes
  --- When commercial customer on commercial route yards are sum of yards from TN_CUSTOMERSERVICE
  --- When Residential customer on commercial route yards are CEIL((OCD.QUANTITY)/3.0)*0.5
  --- Home counts are calculated by YARDS /0.5 from TN_CUSTOMERSERVICE
SELECT
  OCD.FK_CUSTOMERORDER,
  OCD.CODE,
  LOB.UNIQUEID LOB_UNIQUEID,
  ORL.UNIQUEID RTE_UNIQUEID,
  CASE WHEN ORL.UNIQUEID = 'C'
  AND LOB.UNIQUEID = 'R' THEN SUM(
    CEIL(
      (OCD.QUANTITY)/ 3.0
    )* 0.5
  ) ELSE CASE WHEN ORL.UNIQUEID in ('C', 'R')
  AND LOB.UNIQUEID = 'C' THEN SUM(OCD.YARDS) ELSE NULL END END TOTAL_CUBIC_YD_VOL,
  SUM(
    CASE WHEN ORL.UNIQUEID = 'C'
    AND LOB.UNIQUEID = 'R'
    AND OCD.ROW_NUM = 1 THEN 1 WHEN ORL.UNIQUEID = 'C'
    AND LOB.UNIQUEID = 'R'
    AND OCD.ROW_NUM <> 1 THEN 0 ELSE CASE WHEN ORL.UNIQUEID = 'C'
    AND LOB.UNIQUEID = 'C' THEN OCD.QUANTITY ELSE NULL END END
  ) CNTNR_CNT,
  CASE WHEN ORL.UNIQUEID = 'R'
  AND LOB.UNIQUEID = 'C' THEN SUM(OCD.YARDS / 0.5) ELSE CASE WHEN ORL.UNIQUEID = 'R'
  AND LOB.UNIQUEID = 'R' THEN SUM(OCD.QUANTITY) ELSE NULL END END HOME_CNT
FROM
  (
    SELECT
      A.*,
      ROW_NUMBER() OVER(
        PARTITION BY FK_CUSTOMERORDER
        ORDER BY
          ID ASC
      ) ROW_NUM
    FROM
      DEV_OCS.ODS.TN_CUSTOMERSERVICE A
  ) OCD
  INNER JOIN  DEV_OCS.ODS.TP_CUSTOMERORDER CO ON CO.PKEY = OCD.FK_CUSTOMERORDER
  INNER JOIN  DEV_OCS.ODS.TP_LOB LOB ON CO.FK_LOB = LOB.PKEY
  JOIN  DEV_OCS.ODS.TP_ROUTEORDER RO ON(
    RO.PKEY = CO.FK_ROUTEORDER
    and RO.STATUS_CODE = 'CONFIRMED'
  )
  JOIN  DEV_OCS.ODS.TP_ROUTE ORTE ON(RO.FK_ROUTE = ORTE.PKEY)
  JOIN  DEV_OCS.ODS.TP_LOB ORL ON(ORL.PKEY = ORTE.FK_LOB)
GROUP BY
  OCD.FK_CUSTOMERORDER,
  OCD.CODE,
  LOB.UNIQUEID,
  ORL.UNIQUEID),
CUST_ORDER_SUPPRESS AS 
(
SELECT PKEY
FROM
(select c.pkey , FK_ROUTEORDER, FK_CUSTOMER, CODE, QUANTITY ,count(s.pkey) over (partition by FK_CUSTOMERORDER  order by FK_CUSTOMERORDER asc) rn
 from
DEV_OCS.ODS.TP_CUSTOMERORDER c
join DEV_OCS.ODS.TN_CUSTOMERSERVICE s
on c.pkey =s.fk_customerorder
and TICKETNUMBER is null
) stop
join
(select FK_ROUTEORDER, FK_CUSTOMER, CODE, QUANTITY,count(s.pkey) over (partition by FK_CUSTOMERORDER  order by FK_CUSTOMERORDER asc) rn
from
DEV_OCS.ODS.TP_CUSTOMERORDER c
join DEV_OCS.ODS.TN_CUSTOMERSERVICE s
on c.pkey =s.fk_customerorder
and TICKETNUMBER is not null
and REASONCODE in ('TKT','RES')
)tkt
on   stop.FK_ROUTEORDER=tkt.FK_ROUTEORDER
and stop.FK_CUSTOMER=tkt.FK_CUSTOMER
and stop.CODE=tkt.CODE
and stop.QUANTITY=tkt.QUANTITY
and stop.rn=tkt.rn

union all

select c.pkey
from
DEV_OCS.ODS.TP_CUSTOMERORDER c
where TICKETNUMBER is not null
and REASONCODE in ('NEW','NOT','ETA')

union all

select distinct FK_CUSTOMERORDER
from
(
        select FK_CUSTOMERORDER, sum(TOTAL_CUBIC_YD_VOL) TOTAL_CUBIC_YD_VOL from TEMP_COM_RESI_VOLUMES
        where LOB_UNIQUEID in ('C')
        group by FK_CUSTOMERORDER
)a
where  nvl(TOTAL_CUBIC_YD_VOL,0)=0

union all

select a.pkey
from DEV_OCS.ODS.TP_CUSTOMERORDER A
join DEV_OCS.ODS.TP_CO_RESULT b
        on a.pkey =b.FK_CUSTOMERORDER
        and b.FK_VEHICLE is null
        and CONFIRMATIONSTATUS ='CONFIRMEDNEG'
        and( a.CUSTOMER_CANCELED ='X' or a.CUSTOMER_CUTOFF='X')
JOIN DEV_OCS.ODS.TP_LOB LOB
        ON A.FK_LOB  = LOB.PKEY and LOB.UNIQUEID <> 'O'
),
CUST_SERVICES_BEFORE_LANDFILL as (
  --- Table to hold all serviced customers before disposal trip, that includes stopped customers.
  --- customers before disposal trip are find by comparing ARRIVECUSTOMER and RESTARTTICKET less than disposal trip
  --- start.
select
  cust_pkey,
  landfill_key
from
  (
    select
      cust.pkey cust_pkey,
      rol.pkey landfill_key,
      rol.ARRIVE,
      row_number() over(
        partition by cust.pkey
        order by
          ARRIVE asc
      ) rn
    from
      (
        select
          fk_routeorder,
          co.pkey,
          DEPARTCUSTOMER
        from
           DEV_OCS.ODS.TP_customerorder co
          join  DEV_OCS.ODS.TP_co_result cor on co.pkey = cor.fk_customerorder
          and cor.fk_vehicle is null
          LEFT JOIN CUST_ORDER_SUPPRESS sp 
          ON sp.pkey = Co.pkey 
          WHERE sp.pkey IS null
        union all
        select
          fk_routeorder,
          co.pkey,
          RESTARTTICKET
        from
           DEV_OCS.ODS.TP_customerorder co
          join  DEV_OCS.ODS.TP_co_result cor on co.pkey = cor.fk_customerorder
          and cor.fk_vehicle is null
          and STOPTICKET is not null
          LEFT JOIN CUST_ORDER_SUPPRESS sp 
          ON sp.pkey = Co.pkey 
          WHERE sp.pkey IS null
      ) cust
      join  DEV_OCS.ODS.TP_ro_landfill rol on rol.fk_routeorder = cust.fk_routeorder
      and rol.fk_vehicle is null
      and rol.ARRIVE > DEPARTCUSTOMER
  )
where
  rn = 1)
select
  dspsl.landfill_key AS LANDFILL_PKEY,
  sum(TOTAL_CUBIC_YD_VOL) TOTAL_CUBIC_YD_VOL,
  sum(home_cnt) home_cnt
from
  (
    select
      FK_CUSTOMERORDER,
      sum (TOTAL_CUBIC_YD_VOL) TOTAL_CUBIC_YD_VOL,
      sum (home_cnt) home_cnt
    from
      temp_com_resi_volumes a
    group by
      FK_CUSTOMERORDER
  ) vol
  join cust_services_before_landfill dspsl on dspsl.cust_pkey = fk_customerorder
group by
  dspsl.landfill_key
) AS "v_0000017686_0000143733");
